// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storagemock

import (
	"github.com/espal-digital-development/espal-core/storage"
	"sync"
)

var (
	lockStorageMockDelete          sync.RWMutex
	lockStorageMockExists          sync.RWMutex
	lockStorageMockGet             sync.RWMutex
	lockStorageMockIterate         sync.RWMutex
	lockStorageMockLoadAllFromPath sync.RWMutex
	lockStorageMockSet             sync.RWMutex
)

// Ensure, that StorageMock does implement storage.Storage.
// If this is not the case, regenerate this file with moq.
var _ storage.Storage = &StorageMock{}

// StorageMock is a mock implementation of storage.Storage.
//
//     func TestSomethingThatUsesStorage(t *testing.T) {
//
//         // make and configure a mocked storage.Storage
//         mockedStorage := &StorageMock{
//             DeleteFunc: func(key string) error {
// 	               panic("mock out the Delete method")
//             },
//             ExistsFunc: func(key string) bool {
// 	               panic("mock out the Exists method")
//             },
//             GetFunc: func(key string) ([]byte, bool, error) {
// 	               panic("mock out the Get method")
//             },
//             IterateFunc: func(iterator func(key string, value []byte, err error) (keepCycling bool))  {
// 	               panic("mock out the Iterate method")
//             },
//             LoadAllFromPathFunc: func(subjectPath string) error {
// 	               panic("mock out the LoadAllFromPath method")
//             },
//             SetFunc: func(key string, value []byte) error {
// 	               panic("mock out the Set method")
//             },
//         }
//
//         // use mockedStorage in code that requires storage.Storage
//         // and then make assertions.
//
//     }
type StorageMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(key string) error

	// ExistsFunc mocks the Exists method.
	ExistsFunc func(key string) bool

	// GetFunc mocks the Get method.
	GetFunc func(key string) ([]byte, bool, error)

	// IterateFunc mocks the Iterate method.
	IterateFunc func(iterator func(key string, value []byte, err error) (keepCycling bool))

	// LoadAllFromPathFunc mocks the LoadAllFromPath method.
	LoadAllFromPathFunc func(subjectPath string) error

	// SetFunc mocks the Set method.
	SetFunc func(key string, value []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Key is the key argument value.
			Key string
		}
		// Exists holds details about calls to the Exists method.
		Exists []struct {
			// Key is the key argument value.
			Key string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
		// Iterate holds details about calls to the Iterate method.
		Iterate []struct {
			// Iterator is the iterator argument value.
			Iterator func(key string, value []byte, err error) (keepCycling bool)
		}
		// LoadAllFromPath holds details about calls to the LoadAllFromPath method.
		LoadAllFromPath []struct {
			// SubjectPath is the subjectPath argument value.
			SubjectPath string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value []byte
		}
	}
}

// Delete calls DeleteFunc.
func (mock *StorageMock) Delete(key string) error {
	if mock.DeleteFunc == nil {
		panic("StorageMock.DeleteFunc: method is nil but Storage.Delete was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockStorageMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockStorageMockDelete.Unlock()
	return mock.DeleteFunc(key)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedStorage.DeleteCalls())
func (mock *StorageMock) DeleteCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockStorageMockDelete.RLock()
	calls = mock.calls.Delete
	lockStorageMockDelete.RUnlock()
	return calls
}

// Exists calls ExistsFunc.
func (mock *StorageMock) Exists(key string) bool {
	if mock.ExistsFunc == nil {
		panic("StorageMock.ExistsFunc: method is nil but Storage.Exists was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockStorageMockExists.Lock()
	mock.calls.Exists = append(mock.calls.Exists, callInfo)
	lockStorageMockExists.Unlock()
	return mock.ExistsFunc(key)
}

// ExistsCalls gets all the calls that were made to Exists.
// Check the length with:
//     len(mockedStorage.ExistsCalls())
func (mock *StorageMock) ExistsCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockStorageMockExists.RLock()
	calls = mock.calls.Exists
	lockStorageMockExists.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StorageMock) Get(key string) ([]byte, bool, error) {
	if mock.GetFunc == nil {
		panic("StorageMock.GetFunc: method is nil but Storage.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockStorageMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStorageMockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStorage.GetCalls())
func (mock *StorageMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockStorageMockGet.RLock()
	calls = mock.calls.Get
	lockStorageMockGet.RUnlock()
	return calls
}

// Iterate calls IterateFunc.
func (mock *StorageMock) Iterate(iterator func(key string, value []byte, err error) (keepCycling bool)) {
	if mock.IterateFunc == nil {
		panic("StorageMock.IterateFunc: method is nil but Storage.Iterate was just called")
	}
	callInfo := struct {
		Iterator func(key string, value []byte, err error) (keepCycling bool)
	}{
		Iterator: iterator,
	}
	lockStorageMockIterate.Lock()
	mock.calls.Iterate = append(mock.calls.Iterate, callInfo)
	lockStorageMockIterate.Unlock()
	mock.IterateFunc(iterator)
}

// IterateCalls gets all the calls that were made to Iterate.
// Check the length with:
//     len(mockedStorage.IterateCalls())
func (mock *StorageMock) IterateCalls() []struct {
	Iterator func(key string, value []byte, err error) (keepCycling bool)
} {
	var calls []struct {
		Iterator func(key string, value []byte, err error) (keepCycling bool)
	}
	lockStorageMockIterate.RLock()
	calls = mock.calls.Iterate
	lockStorageMockIterate.RUnlock()
	return calls
}

// LoadAllFromPath calls LoadAllFromPathFunc.
func (mock *StorageMock) LoadAllFromPath(subjectPath string) error {
	if mock.LoadAllFromPathFunc == nil {
		panic("StorageMock.LoadAllFromPathFunc: method is nil but Storage.LoadAllFromPath was just called")
	}
	callInfo := struct {
		SubjectPath string
	}{
		SubjectPath: subjectPath,
	}
	lockStorageMockLoadAllFromPath.Lock()
	mock.calls.LoadAllFromPath = append(mock.calls.LoadAllFromPath, callInfo)
	lockStorageMockLoadAllFromPath.Unlock()
	return mock.LoadAllFromPathFunc(subjectPath)
}

// LoadAllFromPathCalls gets all the calls that were made to LoadAllFromPath.
// Check the length with:
//     len(mockedStorage.LoadAllFromPathCalls())
func (mock *StorageMock) LoadAllFromPathCalls() []struct {
	SubjectPath string
} {
	var calls []struct {
		SubjectPath string
	}
	lockStorageMockLoadAllFromPath.RLock()
	calls = mock.calls.LoadAllFromPath
	lockStorageMockLoadAllFromPath.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *StorageMock) Set(key string, value []byte) error {
	if mock.SetFunc == nil {
		panic("StorageMock.SetFunc: method is nil but Storage.Set was just called")
	}
	callInfo := struct {
		Key   string
		Value []byte
	}{
		Key:   key,
		Value: value,
	}
	lockStorageMockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	lockStorageMockSet.Unlock()
	return mock.SetFunc(key, value)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedStorage.SetCalls())
func (mock *StorageMock) SetCalls() []struct {
	Key   string
	Value []byte
} {
	var calls []struct {
		Key   string
		Value []byte
	}
	lockStorageMockSet.RLock()
	calls = mock.calls.Set
	lockStorageMockSet.RUnlock()
	return calls
}

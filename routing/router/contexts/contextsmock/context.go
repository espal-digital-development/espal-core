// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package contextsmock

import (
	"github.com/espal-digital-development/espal-core/adminmenu"
	"github.com/espal-digital-development/espal-core/repositories/themes"
	"github.com/espal-digital-development/espal-core/routing/router/contexts"
	"github.com/espal-digital-development/espal-core/sessions"
	"github.com/espal-digital-development/espal-core/stores/user"
	"io"
	"mime/multipart"
	"sync"
)

// Ensure, that ContextMock does implement contexts.Context.
// If this is not the case, regenerate this file with moq.
var _ contexts.Context = &ContextMock{}

// ContextMock is a mock implementation of contexts.Context.
//
//     func TestSomethingThatUsesContext(t *testing.T) {
//
//         // make and configure a mocked contexts.Context
//         mockedContext := &ContextMock{
//             AcceptsEncodingFunc: func(encoding string) bool {
// 	               panic("mock out the AcceptsEncoding method")
//             },
//             AdminMainMenuFunc: func() []*adminmenu.Block {
// 	               panic("mock out the AdminMainMenu method")
//             },
//             AdminURLFunc: func() string {
// 	               panic("mock out the AdminURL method")
//             },
//             AuthorizeUserForJWTFunc: func(username string, password string) (string, error) {
// 	               panic("mock out the AuthorizeUserForJWT method")
//             },
//             CountryNameFunc: func(countryID uint16) string {
// 	               panic("mock out the CountryName method")
//             },
//             CreatedByFunc: func(entity contexts.Entity) string {
// 	               panic("mock out the CreatedBy method")
//             },
//             FormFileFunc: func(in1 string) (multipart.File, *multipart.FileHeader, error) {
// 	               panic("mock out the FormFile method")
//             },
//             FormValueFunc: func(key string) (string, error) {
// 	               panic("mock out the FormValue method")
//             },
//             FormValuesFunc: func(name string) ([]string, error) {
// 	               panic("mock out the FormValues method")
//             },
//             GetAdminCreateUpdateTitleFunc: func(in1 string, in2 string) string {
// 	               panic("mock out the GetAdminCreateUpdateTitle method")
//             },
//             GetDomainFunc: func() contexts.Domain {
// 	               panic("mock out the GetDomain method")
//             },
//             GetFlashMessageFunc: func() sessions.Message {
// 	               panic("mock out the GetFlashMessage method")
//             },
//             GetHeaderFunc: func(key string) string {
// 	               panic("mock out the GetHeader method")
//             },
//             GetLanguageFunc: func() (contexts.Language, error) {
// 	               panic("mock out the GetLanguage method")
//             },
//             GetRequestMethodFunc: func() string {
// 	               panic("mock out the GetRequestMethod method")
//             },
//             GetSessionValueFunc: func(key uint8) ([]byte, bool, error) {
// 	               panic("mock out the GetSessionValue method")
//             },
//             GetSiteFunc: func() contexts.Site {
// 	               panic("mock out the GetSite method")
//             },
//             GetSlugMappedURLFunc: func() string {
// 	               panic("mock out the GetSlugMappedURL method")
//             },
//             GetUserFunc: func() (*user.User, bool, error) {
// 	               panic("mock out the GetUser method")
//             },
//             HasAdminAccessFunc: func() bool {
// 	               panic("mock out the HasAdminAccess method")
//             },
//             HasFlashMessageFunc: func() bool {
// 	               panic("mock out the HasFlashMessage method")
//             },
//             HasPprofEnabledFunc: func() bool {
// 	               panic("mock out the HasPprofEnabled method")
//             },
//             HasUserRightFunc: func(in1 string) bool {
// 	               panic("mock out the HasUserRight method")
//             },
//             HasUserRightOrForbidFunc: func(userRightName string) bool {
// 	               panic("mock out the HasUserRightOrForbid method")
//             },
//             HostFunc: func() string {
// 	               panic("mock out the Host method")
//             },
//             IsDevelopmentFunc: func() bool {
// 	               panic("mock out the IsDevelopment method")
//             },
//             IsJWTAuthorizedFunc: func() bool {
// 	               panic("mock out the IsJWTAuthorized method")
//             },
//             IsLoggedInFunc: func() bool {
// 	               panic("mock out the IsLoggedIn method")
//             },
//             LanguageNameFunc: func(languageID uint16) string {
// 	               panic("mock out the LanguageName method")
//             },
//             LoginFunc: func(userID string, rememberMe bool) error {
// 	               panic("mock out the Login method")
//             },
//             LogoutFunc: func() error {
// 	               panic("mock out the Logout method")
//             },
//             MethodFunc: func() string {
// 	               panic("mock out the Method method")
//             },
//             MultipartFormFunc: func(maxMemory int64) (*multipart.Form, error) {
// 	               panic("mock out the MultipartForm method")
//             },
//             PathFunc: func() string {
// 	               panic("mock out the Path method")
//             },
//             PprofURLFunc: func() string {
// 	               panic("mock out the PprofURL method")
//             },
//             QueryStringFunc: func() string {
// 	               panic("mock out the QueryString method")
//             },
//             QueryValueFunc: func(in1 string) string {
// 	               panic("mock out the QueryValue method")
//             },
//             RedirectFunc: func(path string, statusCode int)  {
// 	               panic("mock out the Redirect method")
//             },
//             RefererFunc: func() string {
// 	               panic("mock out the Referer method")
//             },
//             RenderBadRequestFunc: func()  {
// 	               panic("mock out the RenderBadRequest method")
//             },
//             RenderInternalServerErrorFunc: func(in1 error)  {
// 	               panic("mock out the RenderInternalServerError method")
//             },
//             RenderNon200Func: func()  {
// 	               panic("mock out the RenderNon200 method")
//             },
//             RenderNon200CustomFunc: func(title string, message string)  {
// 	               panic("mock out the RenderNon200Custom method")
//             },
//             RenderNotFoundFunc: func()  {
// 	               panic("mock out the RenderNotFound method")
//             },
//             RenderThemeFunc: func(code string, data themes.DataStore) error {
// 	               panic("mock out the RenderTheme method")
//             },
//             RenderUnauthorizedFunc: func()  {
// 	               panic("mock out the RenderUnauthorized method")
//             },
//             RequestBodyFunc: func() io.ReadCloser {
// 	               panic("mock out the RequestBody method")
//             },
//             RequestURIFunc: func() string {
// 	               panic("mock out the RequestURI method")
//             },
//             SaveSessionIfNeededFunc: func() error {
// 	               panic("mock out the SaveSessionIfNeeded method")
//             },
//             SetContentTypeFunc: func(in1 string)  {
// 	               panic("mock out the SetContentType method")
//             },
//             SetFlashErrorMessageFunc: func(in1 string) error {
// 	               panic("mock out the SetFlashErrorMessage method")
//             },
//             SetFlashInfoMessageFunc: func(in1 string) error {
// 	               panic("mock out the SetFlashInfoMessage method")
//             },
//             SetFlashSuccessMessageFunc: func(in1 string) error {
// 	               panic("mock out the SetFlashSuccessMessage method")
//             },
//             SetFlashWarningMessageFunc: func(in1 string) error {
// 	               panic("mock out the SetFlashWarningMessage method")
//             },
//             SetHeaderFunc: func(key string, value string)  {
// 	               panic("mock out the SetHeader method")
//             },
//             SetSessionValueFunc: func(key uint8, value []byte) error {
// 	               panic("mock out the SetSessionValue method")
//             },
//             SetSlugMappedURLFunc: func(slugMappedURL string)  {
// 	               panic("mock out the SetSlugMappedURL method")
//             },
//             SetStatusCodeFunc: func(in1 int)  {
// 	               panic("mock out the SetStatusCode method")
//             },
//             SetThemeFunc: func(code string) error {
// 	               panic("mock out the SetTheme method")
//             },
//             StatusCodeFunc: func() int {
// 	               panic("mock out the StatusCode method")
//             },
//             TranslateFunc: func(in1 string) string {
// 	               panic("mock out the Translate method")
//             },
//             TranslatePluralFunc: func(in1 string) string {
// 	               panic("mock out the TranslatePlural method")
//             },
//             UnsetSessionValueFunc: func(key uint8) error {
// 	               panic("mock out the UnsetSessionValue method")
//             },
//             UpdatedByFunc: func(entity contexts.Entity) string {
// 	               panic("mock out the UpdatedBy method")
//             },
//             WriteFunc: func(p []byte) (int, error) {
// 	               panic("mock out the Write method")
//             },
//             WriteStringFunc: func(p string)  {
// 	               panic("mock out the WriteString method")
//             },
//         }
//
//         // use mockedContext in code that requires contexts.Context
//         // and then make assertions.
//
//     }
type ContextMock struct {
	// AcceptsEncodingFunc mocks the AcceptsEncoding method.
	AcceptsEncodingFunc func(encoding string) bool

	// AdminMainMenuFunc mocks the AdminMainMenu method.
	AdminMainMenuFunc func() []*adminmenu.Block

	// AdminURLFunc mocks the AdminURL method.
	AdminURLFunc func() string

	// AuthorizeUserForJWTFunc mocks the AuthorizeUserForJWT method.
	AuthorizeUserForJWTFunc func(username string, password string) (string, error)

	// CountryNameFunc mocks the CountryName method.
	CountryNameFunc func(countryID uint16) string

	// CreatedByFunc mocks the CreatedBy method.
	CreatedByFunc func(entity contexts.Entity) string

	// FormFileFunc mocks the FormFile method.
	FormFileFunc func(in1 string) (multipart.File, *multipart.FileHeader, error)

	// FormValueFunc mocks the FormValue method.
	FormValueFunc func(key string) (string, error)

	// FormValuesFunc mocks the FormValues method.
	FormValuesFunc func(name string) ([]string, error)

	// GetAdminCreateUpdateTitleFunc mocks the GetAdminCreateUpdateTitle method.
	GetAdminCreateUpdateTitleFunc func(in1 string, in2 string) string

	// GetDomainFunc mocks the GetDomain method.
	GetDomainFunc func() contexts.Domain

	// GetFlashMessageFunc mocks the GetFlashMessage method.
	GetFlashMessageFunc func() sessions.Message

	// GetHeaderFunc mocks the GetHeader method.
	GetHeaderFunc func(key string) string

	// GetLanguageFunc mocks the GetLanguage method.
	GetLanguageFunc func() (contexts.Language, error)

	// GetRequestMethodFunc mocks the GetRequestMethod method.
	GetRequestMethodFunc func() string

	// GetSessionValueFunc mocks the GetSessionValue method.
	GetSessionValueFunc func(key uint8) ([]byte, bool, error)

	// GetSiteFunc mocks the GetSite method.
	GetSiteFunc func() contexts.Site

	// GetSlugMappedURLFunc mocks the GetSlugMappedURL method.
	GetSlugMappedURLFunc func() string

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func() (*user.User, bool, error)

	// HasAdminAccessFunc mocks the HasAdminAccess method.
	HasAdminAccessFunc func() bool

	// HasFlashMessageFunc mocks the HasFlashMessage method.
	HasFlashMessageFunc func() bool

	// HasPprofEnabledFunc mocks the HasPprofEnabled method.
	HasPprofEnabledFunc func() bool

	// HasUserRightFunc mocks the HasUserRight method.
	HasUserRightFunc func(in1 string) bool

	// HasUserRightOrForbidFunc mocks the HasUserRightOrForbid method.
	HasUserRightOrForbidFunc func(userRightName string) bool

	// HostFunc mocks the Host method.
	HostFunc func() string

	// IsDevelopmentFunc mocks the IsDevelopment method.
	IsDevelopmentFunc func() bool

	// IsJWTAuthorizedFunc mocks the IsJWTAuthorized method.
	IsJWTAuthorizedFunc func() bool

	// IsLoggedInFunc mocks the IsLoggedIn method.
	IsLoggedInFunc func() bool

	// LanguageNameFunc mocks the LanguageName method.
	LanguageNameFunc func(languageID uint16) string

	// LoginFunc mocks the Login method.
	LoginFunc func(userID string, rememberMe bool) error

	// LogoutFunc mocks the Logout method.
	LogoutFunc func() error

	// MethodFunc mocks the Method method.
	MethodFunc func() string

	// MultipartFormFunc mocks the MultipartForm method.
	MultipartFormFunc func(maxMemory int64) (*multipart.Form, error)

	// PathFunc mocks the Path method.
	PathFunc func() string

	// PprofURLFunc mocks the PprofURL method.
	PprofURLFunc func() string

	// QueryStringFunc mocks the QueryString method.
	QueryStringFunc func() string

	// QueryValueFunc mocks the QueryValue method.
	QueryValueFunc func(in1 string) string

	// RedirectFunc mocks the Redirect method.
	RedirectFunc func(path string, statusCode int)

	// RefererFunc mocks the Referer method.
	RefererFunc func() string

	// RenderBadRequestFunc mocks the RenderBadRequest method.
	RenderBadRequestFunc func()

	// RenderInternalServerErrorFunc mocks the RenderInternalServerError method.
	RenderInternalServerErrorFunc func(in1 error)

	// RenderNon200Func mocks the RenderNon200 method.
	RenderNon200Func func()

	// RenderNon200CustomFunc mocks the RenderNon200Custom method.
	RenderNon200CustomFunc func(title string, message string)

	// RenderNotFoundFunc mocks the RenderNotFound method.
	RenderNotFoundFunc func()

	// RenderThemeFunc mocks the RenderTheme method.
	RenderThemeFunc func(code string, data themes.DataStore) error

	// RenderUnauthorizedFunc mocks the RenderUnauthorized method.
	RenderUnauthorizedFunc func()

	// RequestBodyFunc mocks the RequestBody method.
	RequestBodyFunc func() io.ReadCloser

	// RequestURIFunc mocks the RequestURI method.
	RequestURIFunc func() string

	// SaveSessionIfNeededFunc mocks the SaveSessionIfNeeded method.
	SaveSessionIfNeededFunc func() error

	// SetContentTypeFunc mocks the SetContentType method.
	SetContentTypeFunc func(in1 string)

	// SetFlashErrorMessageFunc mocks the SetFlashErrorMessage method.
	SetFlashErrorMessageFunc func(in1 string) error

	// SetFlashInfoMessageFunc mocks the SetFlashInfoMessage method.
	SetFlashInfoMessageFunc func(in1 string) error

	// SetFlashSuccessMessageFunc mocks the SetFlashSuccessMessage method.
	SetFlashSuccessMessageFunc func(in1 string) error

	// SetFlashWarningMessageFunc mocks the SetFlashWarningMessage method.
	SetFlashWarningMessageFunc func(in1 string) error

	// SetHeaderFunc mocks the SetHeader method.
	SetHeaderFunc func(key string, value string)

	// SetSessionValueFunc mocks the SetSessionValue method.
	SetSessionValueFunc func(key uint8, value []byte) error

	// SetSlugMappedURLFunc mocks the SetSlugMappedURL method.
	SetSlugMappedURLFunc func(slugMappedURL string)

	// SetStatusCodeFunc mocks the SetStatusCode method.
	SetStatusCodeFunc func(in1 int)

	// SetThemeFunc mocks the SetTheme method.
	SetThemeFunc func(code string) error

	// StatusCodeFunc mocks the StatusCode method.
	StatusCodeFunc func() int

	// TranslateFunc mocks the Translate method.
	TranslateFunc func(in1 string) string

	// TranslatePluralFunc mocks the TranslatePlural method.
	TranslatePluralFunc func(in1 string) string

	// UnsetSessionValueFunc mocks the UnsetSessionValue method.
	UnsetSessionValueFunc func(key uint8) error

	// UpdatedByFunc mocks the UpdatedBy method.
	UpdatedByFunc func(entity contexts.Entity) string

	// WriteFunc mocks the Write method.
	WriteFunc func(p []byte) (int, error)

	// WriteStringFunc mocks the WriteString method.
	WriteStringFunc func(p string)

	// calls tracks calls to the methods.
	calls struct {
		// AcceptsEncoding holds details about calls to the AcceptsEncoding method.
		AcceptsEncoding []struct {
			// Encoding is the encoding argument value.
			Encoding string
		}
		// AdminMainMenu holds details about calls to the AdminMainMenu method.
		AdminMainMenu []struct {
		}
		// AdminURL holds details about calls to the AdminURL method.
		AdminURL []struct {
		}
		// AuthorizeUserForJWT holds details about calls to the AuthorizeUserForJWT method.
		AuthorizeUserForJWT []struct {
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
		// CountryName holds details about calls to the CountryName method.
		CountryName []struct {
			// CountryID is the countryID argument value.
			CountryID uint16
		}
		// CreatedBy holds details about calls to the CreatedBy method.
		CreatedBy []struct {
			// Entity is the entity argument value.
			Entity contexts.Entity
		}
		// FormFile holds details about calls to the FormFile method.
		FormFile []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// FormValue holds details about calls to the FormValue method.
		FormValue []struct {
			// Key is the key argument value.
			Key string
		}
		// FormValues holds details about calls to the FormValues method.
		FormValues []struct {
			// Name is the name argument value.
			Name string
		}
		// GetAdminCreateUpdateTitle holds details about calls to the GetAdminCreateUpdateTitle method.
		GetAdminCreateUpdateTitle []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 string
		}
		// GetDomain holds details about calls to the GetDomain method.
		GetDomain []struct {
		}
		// GetFlashMessage holds details about calls to the GetFlashMessage method.
		GetFlashMessage []struct {
		}
		// GetHeader holds details about calls to the GetHeader method.
		GetHeader []struct {
			// Key is the key argument value.
			Key string
		}
		// GetLanguage holds details about calls to the GetLanguage method.
		GetLanguage []struct {
		}
		// GetRequestMethod holds details about calls to the GetRequestMethod method.
		GetRequestMethod []struct {
		}
		// GetSessionValue holds details about calls to the GetSessionValue method.
		GetSessionValue []struct {
			// Key is the key argument value.
			Key uint8
		}
		// GetSite holds details about calls to the GetSite method.
		GetSite []struct {
		}
		// GetSlugMappedURL holds details about calls to the GetSlugMappedURL method.
		GetSlugMappedURL []struct {
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
		}
		// HasAdminAccess holds details about calls to the HasAdminAccess method.
		HasAdminAccess []struct {
		}
		// HasFlashMessage holds details about calls to the HasFlashMessage method.
		HasFlashMessage []struct {
		}
		// HasPprofEnabled holds details about calls to the HasPprofEnabled method.
		HasPprofEnabled []struct {
		}
		// HasUserRight holds details about calls to the HasUserRight method.
		HasUserRight []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// HasUserRightOrForbid holds details about calls to the HasUserRightOrForbid method.
		HasUserRightOrForbid []struct {
			// UserRightName is the userRightName argument value.
			UserRightName string
		}
		// Host holds details about calls to the Host method.
		Host []struct {
		}
		// IsDevelopment holds details about calls to the IsDevelopment method.
		IsDevelopment []struct {
		}
		// IsJWTAuthorized holds details about calls to the IsJWTAuthorized method.
		IsJWTAuthorized []struct {
		}
		// IsLoggedIn holds details about calls to the IsLoggedIn method.
		IsLoggedIn []struct {
		}
		// LanguageName holds details about calls to the LanguageName method.
		LanguageName []struct {
			// LanguageID is the languageID argument value.
			LanguageID uint16
		}
		// Login holds details about calls to the Login method.
		Login []struct {
			// UserID is the userID argument value.
			UserID string
			// RememberMe is the rememberMe argument value.
			RememberMe bool
		}
		// Logout holds details about calls to the Logout method.
		Logout []struct {
		}
		// Method holds details about calls to the Method method.
		Method []struct {
		}
		// MultipartForm holds details about calls to the MultipartForm method.
		MultipartForm []struct {
			// MaxMemory is the maxMemory argument value.
			MaxMemory int64
		}
		// Path holds details about calls to the Path method.
		Path []struct {
		}
		// PprofURL holds details about calls to the PprofURL method.
		PprofURL []struct {
		}
		// QueryString holds details about calls to the QueryString method.
		QueryString []struct {
		}
		// QueryValue holds details about calls to the QueryValue method.
		QueryValue []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// Redirect holds details about calls to the Redirect method.
		Redirect []struct {
			// Path is the path argument value.
			Path string
			// StatusCode is the statusCode argument value.
			StatusCode int
		}
		// Referer holds details about calls to the Referer method.
		Referer []struct {
		}
		// RenderBadRequest holds details about calls to the RenderBadRequest method.
		RenderBadRequest []struct {
		}
		// RenderInternalServerError holds details about calls to the RenderInternalServerError method.
		RenderInternalServerError []struct {
			// In1 is the in1 argument value.
			In1 error
		}
		// RenderNon200 holds details about calls to the RenderNon200 method.
		RenderNon200 []struct {
		}
		// RenderNon200Custom holds details about calls to the RenderNon200Custom method.
		RenderNon200Custom []struct {
			// Title is the title argument value.
			Title string
			// Message is the message argument value.
			Message string
		}
		// RenderNotFound holds details about calls to the RenderNotFound method.
		RenderNotFound []struct {
		}
		// RenderTheme holds details about calls to the RenderTheme method.
		RenderTheme []struct {
			// Code is the code argument value.
			Code string
			// Data is the data argument value.
			Data themes.DataStore
		}
		// RenderUnauthorized holds details about calls to the RenderUnauthorized method.
		RenderUnauthorized []struct {
		}
		// RequestBody holds details about calls to the RequestBody method.
		RequestBody []struct {
		}
		// RequestURI holds details about calls to the RequestURI method.
		RequestURI []struct {
		}
		// SaveSessionIfNeeded holds details about calls to the SaveSessionIfNeeded method.
		SaveSessionIfNeeded []struct {
		}
		// SetContentType holds details about calls to the SetContentType method.
		SetContentType []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetFlashErrorMessage holds details about calls to the SetFlashErrorMessage method.
		SetFlashErrorMessage []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetFlashInfoMessage holds details about calls to the SetFlashInfoMessage method.
		SetFlashInfoMessage []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetFlashSuccessMessage holds details about calls to the SetFlashSuccessMessage method.
		SetFlashSuccessMessage []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetFlashWarningMessage holds details about calls to the SetFlashWarningMessage method.
		SetFlashWarningMessage []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// SetHeader holds details about calls to the SetHeader method.
		SetHeader []struct {
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
		}
		// SetSessionValue holds details about calls to the SetSessionValue method.
		SetSessionValue []struct {
			// Key is the key argument value.
			Key uint8
			// Value is the value argument value.
			Value []byte
		}
		// SetSlugMappedURL holds details about calls to the SetSlugMappedURL method.
		SetSlugMappedURL []struct {
			// SlugMappedURL is the slugMappedURL argument value.
			SlugMappedURL string
		}
		// SetStatusCode holds details about calls to the SetStatusCode method.
		SetStatusCode []struct {
			// In1 is the in1 argument value.
			In1 int
		}
		// SetTheme holds details about calls to the SetTheme method.
		SetTheme []struct {
			// Code is the code argument value.
			Code string
		}
		// StatusCode holds details about calls to the StatusCode method.
		StatusCode []struct {
		}
		// Translate holds details about calls to the Translate method.
		Translate []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// TranslatePlural holds details about calls to the TranslatePlural method.
		TranslatePlural []struct {
			// In1 is the in1 argument value.
			In1 string
		}
		// UnsetSessionValue holds details about calls to the UnsetSessionValue method.
		UnsetSessionValue []struct {
			// Key is the key argument value.
			Key uint8
		}
		// UpdatedBy holds details about calls to the UpdatedBy method.
		UpdatedBy []struct {
			// Entity is the entity argument value.
			Entity contexts.Entity
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// P is the p argument value.
			P []byte
		}
		// WriteString holds details about calls to the WriteString method.
		WriteString []struct {
			// P is the p argument value.
			P string
		}
	}
	lockAcceptsEncoding           sync.RWMutex
	lockAdminMainMenu             sync.RWMutex
	lockAdminURL                  sync.RWMutex
	lockAuthorizeUserForJWT       sync.RWMutex
	lockCountryName               sync.RWMutex
	lockCreatedBy                 sync.RWMutex
	lockFormFile                  sync.RWMutex
	lockFormValue                 sync.RWMutex
	lockFormValues                sync.RWMutex
	lockGetAdminCreateUpdateTitle sync.RWMutex
	lockGetDomain                 sync.RWMutex
	lockGetFlashMessage           sync.RWMutex
	lockGetHeader                 sync.RWMutex
	lockGetLanguage               sync.RWMutex
	lockGetRequestMethod          sync.RWMutex
	lockGetSessionValue           sync.RWMutex
	lockGetSite                   sync.RWMutex
	lockGetSlugMappedURL          sync.RWMutex
	lockGetUser                   sync.RWMutex
	lockHasAdminAccess            sync.RWMutex
	lockHasFlashMessage           sync.RWMutex
	lockHasPprofEnabled           sync.RWMutex
	lockHasUserRight              sync.RWMutex
	lockHasUserRightOrForbid      sync.RWMutex
	lockHost                      sync.RWMutex
	lockIsDevelopment             sync.RWMutex
	lockIsJWTAuthorized           sync.RWMutex
	lockIsLoggedIn                sync.RWMutex
	lockLanguageName              sync.RWMutex
	lockLogin                     sync.RWMutex
	lockLogout                    sync.RWMutex
	lockMethod                    sync.RWMutex
	lockMultipartForm             sync.RWMutex
	lockPath                      sync.RWMutex
	lockPprofURL                  sync.RWMutex
	lockQueryString               sync.RWMutex
	lockQueryValue                sync.RWMutex
	lockRedirect                  sync.RWMutex
	lockReferer                   sync.RWMutex
	lockRenderBadRequest          sync.RWMutex
	lockRenderInternalServerError sync.RWMutex
	lockRenderNon200              sync.RWMutex
	lockRenderNon200Custom        sync.RWMutex
	lockRenderNotFound            sync.RWMutex
	lockRenderTheme               sync.RWMutex
	lockRenderUnauthorized        sync.RWMutex
	lockRequestBody               sync.RWMutex
	lockRequestURI                sync.RWMutex
	lockSaveSessionIfNeeded       sync.RWMutex
	lockSetContentType            sync.RWMutex
	lockSetFlashErrorMessage      sync.RWMutex
	lockSetFlashInfoMessage       sync.RWMutex
	lockSetFlashSuccessMessage    sync.RWMutex
	lockSetFlashWarningMessage    sync.RWMutex
	lockSetHeader                 sync.RWMutex
	lockSetSessionValue           sync.RWMutex
	lockSetSlugMappedURL          sync.RWMutex
	lockSetStatusCode             sync.RWMutex
	lockSetTheme                  sync.RWMutex
	lockStatusCode                sync.RWMutex
	lockTranslate                 sync.RWMutex
	lockTranslatePlural           sync.RWMutex
	lockUnsetSessionValue         sync.RWMutex
	lockUpdatedBy                 sync.RWMutex
	lockWrite                     sync.RWMutex
	lockWriteString               sync.RWMutex
}

// AcceptsEncoding calls AcceptsEncodingFunc.
func (mock *ContextMock) AcceptsEncoding(encoding string) bool {
	if mock.AcceptsEncodingFunc == nil {
		panic("ContextMock.AcceptsEncodingFunc: method is nil but Context.AcceptsEncoding was just called")
	}
	callInfo := struct {
		Encoding string
	}{
		Encoding: encoding,
	}
	mock.lockAcceptsEncoding.Lock()
	mock.calls.AcceptsEncoding = append(mock.calls.AcceptsEncoding, callInfo)
	mock.lockAcceptsEncoding.Unlock()
	return mock.AcceptsEncodingFunc(encoding)
}

// AcceptsEncodingCalls gets all the calls that were made to AcceptsEncoding.
// Check the length with:
//     len(mockedContext.AcceptsEncodingCalls())
func (mock *ContextMock) AcceptsEncodingCalls() []struct {
	Encoding string
} {
	var calls []struct {
		Encoding string
	}
	mock.lockAcceptsEncoding.RLock()
	calls = mock.calls.AcceptsEncoding
	mock.lockAcceptsEncoding.RUnlock()
	return calls
}

// AdminMainMenu calls AdminMainMenuFunc.
func (mock *ContextMock) AdminMainMenu() []*adminmenu.Block {
	if mock.AdminMainMenuFunc == nil {
		panic("ContextMock.AdminMainMenuFunc: method is nil but Context.AdminMainMenu was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAdminMainMenu.Lock()
	mock.calls.AdminMainMenu = append(mock.calls.AdminMainMenu, callInfo)
	mock.lockAdminMainMenu.Unlock()
	return mock.AdminMainMenuFunc()
}

// AdminMainMenuCalls gets all the calls that were made to AdminMainMenu.
// Check the length with:
//     len(mockedContext.AdminMainMenuCalls())
func (mock *ContextMock) AdminMainMenuCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAdminMainMenu.RLock()
	calls = mock.calls.AdminMainMenu
	mock.lockAdminMainMenu.RUnlock()
	return calls
}

// AdminURL calls AdminURLFunc.
func (mock *ContextMock) AdminURL() string {
	if mock.AdminURLFunc == nil {
		panic("ContextMock.AdminURLFunc: method is nil but Context.AdminURL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAdminURL.Lock()
	mock.calls.AdminURL = append(mock.calls.AdminURL, callInfo)
	mock.lockAdminURL.Unlock()
	return mock.AdminURLFunc()
}

// AdminURLCalls gets all the calls that were made to AdminURL.
// Check the length with:
//     len(mockedContext.AdminURLCalls())
func (mock *ContextMock) AdminURLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAdminURL.RLock()
	calls = mock.calls.AdminURL
	mock.lockAdminURL.RUnlock()
	return calls
}

// AuthorizeUserForJWT calls AuthorizeUserForJWTFunc.
func (mock *ContextMock) AuthorizeUserForJWT(username string, password string) (string, error) {
	if mock.AuthorizeUserForJWTFunc == nil {
		panic("ContextMock.AuthorizeUserForJWTFunc: method is nil but Context.AuthorizeUserForJWT was just called")
	}
	callInfo := struct {
		Username string
		Password string
	}{
		Username: username,
		Password: password,
	}
	mock.lockAuthorizeUserForJWT.Lock()
	mock.calls.AuthorizeUserForJWT = append(mock.calls.AuthorizeUserForJWT, callInfo)
	mock.lockAuthorizeUserForJWT.Unlock()
	return mock.AuthorizeUserForJWTFunc(username, password)
}

// AuthorizeUserForJWTCalls gets all the calls that were made to AuthorizeUserForJWT.
// Check the length with:
//     len(mockedContext.AuthorizeUserForJWTCalls())
func (mock *ContextMock) AuthorizeUserForJWTCalls() []struct {
	Username string
	Password string
} {
	var calls []struct {
		Username string
		Password string
	}
	mock.lockAuthorizeUserForJWT.RLock()
	calls = mock.calls.AuthorizeUserForJWT
	mock.lockAuthorizeUserForJWT.RUnlock()
	return calls
}

// CountryName calls CountryNameFunc.
func (mock *ContextMock) CountryName(countryID uint16) string {
	if mock.CountryNameFunc == nil {
		panic("ContextMock.CountryNameFunc: method is nil but Context.CountryName was just called")
	}
	callInfo := struct {
		CountryID uint16
	}{
		CountryID: countryID,
	}
	mock.lockCountryName.Lock()
	mock.calls.CountryName = append(mock.calls.CountryName, callInfo)
	mock.lockCountryName.Unlock()
	return mock.CountryNameFunc(countryID)
}

// CountryNameCalls gets all the calls that were made to CountryName.
// Check the length with:
//     len(mockedContext.CountryNameCalls())
func (mock *ContextMock) CountryNameCalls() []struct {
	CountryID uint16
} {
	var calls []struct {
		CountryID uint16
	}
	mock.lockCountryName.RLock()
	calls = mock.calls.CountryName
	mock.lockCountryName.RUnlock()
	return calls
}

// CreatedBy calls CreatedByFunc.
func (mock *ContextMock) CreatedBy(entity contexts.Entity) string {
	if mock.CreatedByFunc == nil {
		panic("ContextMock.CreatedByFunc: method is nil but Context.CreatedBy was just called")
	}
	callInfo := struct {
		Entity contexts.Entity
	}{
		Entity: entity,
	}
	mock.lockCreatedBy.Lock()
	mock.calls.CreatedBy = append(mock.calls.CreatedBy, callInfo)
	mock.lockCreatedBy.Unlock()
	return mock.CreatedByFunc(entity)
}

// CreatedByCalls gets all the calls that were made to CreatedBy.
// Check the length with:
//     len(mockedContext.CreatedByCalls())
func (mock *ContextMock) CreatedByCalls() []struct {
	Entity contexts.Entity
} {
	var calls []struct {
		Entity contexts.Entity
	}
	mock.lockCreatedBy.RLock()
	calls = mock.calls.CreatedBy
	mock.lockCreatedBy.RUnlock()
	return calls
}

// FormFile calls FormFileFunc.
func (mock *ContextMock) FormFile(in1 string) (multipart.File, *multipart.FileHeader, error) {
	if mock.FormFileFunc == nil {
		panic("ContextMock.FormFileFunc: method is nil but Context.FormFile was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockFormFile.Lock()
	mock.calls.FormFile = append(mock.calls.FormFile, callInfo)
	mock.lockFormFile.Unlock()
	return mock.FormFileFunc(in1)
}

// FormFileCalls gets all the calls that were made to FormFile.
// Check the length with:
//     len(mockedContext.FormFileCalls())
func (mock *ContextMock) FormFileCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockFormFile.RLock()
	calls = mock.calls.FormFile
	mock.lockFormFile.RUnlock()
	return calls
}

// FormValue calls FormValueFunc.
func (mock *ContextMock) FormValue(key string) (string, error) {
	if mock.FormValueFunc == nil {
		panic("ContextMock.FormValueFunc: method is nil but Context.FormValue was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockFormValue.Lock()
	mock.calls.FormValue = append(mock.calls.FormValue, callInfo)
	mock.lockFormValue.Unlock()
	return mock.FormValueFunc(key)
}

// FormValueCalls gets all the calls that were made to FormValue.
// Check the length with:
//     len(mockedContext.FormValueCalls())
func (mock *ContextMock) FormValueCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockFormValue.RLock()
	calls = mock.calls.FormValue
	mock.lockFormValue.RUnlock()
	return calls
}

// FormValues calls FormValuesFunc.
func (mock *ContextMock) FormValues(name string) ([]string, error) {
	if mock.FormValuesFunc == nil {
		panic("ContextMock.FormValuesFunc: method is nil but Context.FormValues was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockFormValues.Lock()
	mock.calls.FormValues = append(mock.calls.FormValues, callInfo)
	mock.lockFormValues.Unlock()
	return mock.FormValuesFunc(name)
}

// FormValuesCalls gets all the calls that were made to FormValues.
// Check the length with:
//     len(mockedContext.FormValuesCalls())
func (mock *ContextMock) FormValuesCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockFormValues.RLock()
	calls = mock.calls.FormValues
	mock.lockFormValues.RUnlock()
	return calls
}

// GetAdminCreateUpdateTitle calls GetAdminCreateUpdateTitleFunc.
func (mock *ContextMock) GetAdminCreateUpdateTitle(in1 string, in2 string) string {
	if mock.GetAdminCreateUpdateTitleFunc == nil {
		panic("ContextMock.GetAdminCreateUpdateTitleFunc: method is nil but Context.GetAdminCreateUpdateTitle was just called")
	}
	callInfo := struct {
		In1 string
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	mock.lockGetAdminCreateUpdateTitle.Lock()
	mock.calls.GetAdminCreateUpdateTitle = append(mock.calls.GetAdminCreateUpdateTitle, callInfo)
	mock.lockGetAdminCreateUpdateTitle.Unlock()
	return mock.GetAdminCreateUpdateTitleFunc(in1, in2)
}

// GetAdminCreateUpdateTitleCalls gets all the calls that were made to GetAdminCreateUpdateTitle.
// Check the length with:
//     len(mockedContext.GetAdminCreateUpdateTitleCalls())
func (mock *ContextMock) GetAdminCreateUpdateTitleCalls() []struct {
	In1 string
	In2 string
} {
	var calls []struct {
		In1 string
		In2 string
	}
	mock.lockGetAdminCreateUpdateTitle.RLock()
	calls = mock.calls.GetAdminCreateUpdateTitle
	mock.lockGetAdminCreateUpdateTitle.RUnlock()
	return calls
}

// GetDomain calls GetDomainFunc.
func (mock *ContextMock) GetDomain() contexts.Domain {
	if mock.GetDomainFunc == nil {
		panic("ContextMock.GetDomainFunc: method is nil but Context.GetDomain was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetDomain.Lock()
	mock.calls.GetDomain = append(mock.calls.GetDomain, callInfo)
	mock.lockGetDomain.Unlock()
	return mock.GetDomainFunc()
}

// GetDomainCalls gets all the calls that were made to GetDomain.
// Check the length with:
//     len(mockedContext.GetDomainCalls())
func (mock *ContextMock) GetDomainCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetDomain.RLock()
	calls = mock.calls.GetDomain
	mock.lockGetDomain.RUnlock()
	return calls
}

// GetFlashMessage calls GetFlashMessageFunc.
func (mock *ContextMock) GetFlashMessage() sessions.Message {
	if mock.GetFlashMessageFunc == nil {
		panic("ContextMock.GetFlashMessageFunc: method is nil but Context.GetFlashMessage was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetFlashMessage.Lock()
	mock.calls.GetFlashMessage = append(mock.calls.GetFlashMessage, callInfo)
	mock.lockGetFlashMessage.Unlock()
	return mock.GetFlashMessageFunc()
}

// GetFlashMessageCalls gets all the calls that were made to GetFlashMessage.
// Check the length with:
//     len(mockedContext.GetFlashMessageCalls())
func (mock *ContextMock) GetFlashMessageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetFlashMessage.RLock()
	calls = mock.calls.GetFlashMessage
	mock.lockGetFlashMessage.RUnlock()
	return calls
}

// GetHeader calls GetHeaderFunc.
func (mock *ContextMock) GetHeader(key string) string {
	if mock.GetHeaderFunc == nil {
		panic("ContextMock.GetHeaderFunc: method is nil but Context.GetHeader was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGetHeader.Lock()
	mock.calls.GetHeader = append(mock.calls.GetHeader, callInfo)
	mock.lockGetHeader.Unlock()
	return mock.GetHeaderFunc(key)
}

// GetHeaderCalls gets all the calls that were made to GetHeader.
// Check the length with:
//     len(mockedContext.GetHeaderCalls())
func (mock *ContextMock) GetHeaderCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGetHeader.RLock()
	calls = mock.calls.GetHeader
	mock.lockGetHeader.RUnlock()
	return calls
}

// GetLanguage calls GetLanguageFunc.
func (mock *ContextMock) GetLanguage() (contexts.Language, error) {
	if mock.GetLanguageFunc == nil {
		panic("ContextMock.GetLanguageFunc: method is nil but Context.GetLanguage was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetLanguage.Lock()
	mock.calls.GetLanguage = append(mock.calls.GetLanguage, callInfo)
	mock.lockGetLanguage.Unlock()
	return mock.GetLanguageFunc()
}

// GetLanguageCalls gets all the calls that were made to GetLanguage.
// Check the length with:
//     len(mockedContext.GetLanguageCalls())
func (mock *ContextMock) GetLanguageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetLanguage.RLock()
	calls = mock.calls.GetLanguage
	mock.lockGetLanguage.RUnlock()
	return calls
}

// GetRequestMethod calls GetRequestMethodFunc.
func (mock *ContextMock) GetRequestMethod() string {
	if mock.GetRequestMethodFunc == nil {
		panic("ContextMock.GetRequestMethodFunc: method is nil but Context.GetRequestMethod was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRequestMethod.Lock()
	mock.calls.GetRequestMethod = append(mock.calls.GetRequestMethod, callInfo)
	mock.lockGetRequestMethod.Unlock()
	return mock.GetRequestMethodFunc()
}

// GetRequestMethodCalls gets all the calls that were made to GetRequestMethod.
// Check the length with:
//     len(mockedContext.GetRequestMethodCalls())
func (mock *ContextMock) GetRequestMethodCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRequestMethod.RLock()
	calls = mock.calls.GetRequestMethod
	mock.lockGetRequestMethod.RUnlock()
	return calls
}

// GetSessionValue calls GetSessionValueFunc.
func (mock *ContextMock) GetSessionValue(key uint8) ([]byte, bool, error) {
	if mock.GetSessionValueFunc == nil {
		panic("ContextMock.GetSessionValueFunc: method is nil but Context.GetSessionValue was just called")
	}
	callInfo := struct {
		Key uint8
	}{
		Key: key,
	}
	mock.lockGetSessionValue.Lock()
	mock.calls.GetSessionValue = append(mock.calls.GetSessionValue, callInfo)
	mock.lockGetSessionValue.Unlock()
	return mock.GetSessionValueFunc(key)
}

// GetSessionValueCalls gets all the calls that were made to GetSessionValue.
// Check the length with:
//     len(mockedContext.GetSessionValueCalls())
func (mock *ContextMock) GetSessionValueCalls() []struct {
	Key uint8
} {
	var calls []struct {
		Key uint8
	}
	mock.lockGetSessionValue.RLock()
	calls = mock.calls.GetSessionValue
	mock.lockGetSessionValue.RUnlock()
	return calls
}

// GetSite calls GetSiteFunc.
func (mock *ContextMock) GetSite() contexts.Site {
	if mock.GetSiteFunc == nil {
		panic("ContextMock.GetSiteFunc: method is nil but Context.GetSite was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSite.Lock()
	mock.calls.GetSite = append(mock.calls.GetSite, callInfo)
	mock.lockGetSite.Unlock()
	return mock.GetSiteFunc()
}

// GetSiteCalls gets all the calls that were made to GetSite.
// Check the length with:
//     len(mockedContext.GetSiteCalls())
func (mock *ContextMock) GetSiteCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSite.RLock()
	calls = mock.calls.GetSite
	mock.lockGetSite.RUnlock()
	return calls
}

// GetSlugMappedURL calls GetSlugMappedURLFunc.
func (mock *ContextMock) GetSlugMappedURL() string {
	if mock.GetSlugMappedURLFunc == nil {
		panic("ContextMock.GetSlugMappedURLFunc: method is nil but Context.GetSlugMappedURL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetSlugMappedURL.Lock()
	mock.calls.GetSlugMappedURL = append(mock.calls.GetSlugMappedURL, callInfo)
	mock.lockGetSlugMappedURL.Unlock()
	return mock.GetSlugMappedURLFunc()
}

// GetSlugMappedURLCalls gets all the calls that were made to GetSlugMappedURL.
// Check the length with:
//     len(mockedContext.GetSlugMappedURLCalls())
func (mock *ContextMock) GetSlugMappedURLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetSlugMappedURL.RLock()
	calls = mock.calls.GetSlugMappedURL
	mock.lockGetSlugMappedURL.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *ContextMock) GetUser() (*user.User, bool, error) {
	if mock.GetUserFunc == nil {
		panic("ContextMock.GetUserFunc: method is nil but Context.GetUser was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc()
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedContext.GetUserCalls())
func (mock *ContextMock) GetUserCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// HasAdminAccess calls HasAdminAccessFunc.
func (mock *ContextMock) HasAdminAccess() bool {
	if mock.HasAdminAccessFunc == nil {
		panic("ContextMock.HasAdminAccessFunc: method is nil but Context.HasAdminAccess was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHasAdminAccess.Lock()
	mock.calls.HasAdminAccess = append(mock.calls.HasAdminAccess, callInfo)
	mock.lockHasAdminAccess.Unlock()
	return mock.HasAdminAccessFunc()
}

// HasAdminAccessCalls gets all the calls that were made to HasAdminAccess.
// Check the length with:
//     len(mockedContext.HasAdminAccessCalls())
func (mock *ContextMock) HasAdminAccessCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHasAdminAccess.RLock()
	calls = mock.calls.HasAdminAccess
	mock.lockHasAdminAccess.RUnlock()
	return calls
}

// HasFlashMessage calls HasFlashMessageFunc.
func (mock *ContextMock) HasFlashMessage() bool {
	if mock.HasFlashMessageFunc == nil {
		panic("ContextMock.HasFlashMessageFunc: method is nil but Context.HasFlashMessage was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHasFlashMessage.Lock()
	mock.calls.HasFlashMessage = append(mock.calls.HasFlashMessage, callInfo)
	mock.lockHasFlashMessage.Unlock()
	return mock.HasFlashMessageFunc()
}

// HasFlashMessageCalls gets all the calls that were made to HasFlashMessage.
// Check the length with:
//     len(mockedContext.HasFlashMessageCalls())
func (mock *ContextMock) HasFlashMessageCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHasFlashMessage.RLock()
	calls = mock.calls.HasFlashMessage
	mock.lockHasFlashMessage.RUnlock()
	return calls
}

// HasPprofEnabled calls HasPprofEnabledFunc.
func (mock *ContextMock) HasPprofEnabled() bool {
	if mock.HasPprofEnabledFunc == nil {
		panic("ContextMock.HasPprofEnabledFunc: method is nil but Context.HasPprofEnabled was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHasPprofEnabled.Lock()
	mock.calls.HasPprofEnabled = append(mock.calls.HasPprofEnabled, callInfo)
	mock.lockHasPprofEnabled.Unlock()
	return mock.HasPprofEnabledFunc()
}

// HasPprofEnabledCalls gets all the calls that were made to HasPprofEnabled.
// Check the length with:
//     len(mockedContext.HasPprofEnabledCalls())
func (mock *ContextMock) HasPprofEnabledCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHasPprofEnabled.RLock()
	calls = mock.calls.HasPprofEnabled
	mock.lockHasPprofEnabled.RUnlock()
	return calls
}

// HasUserRight calls HasUserRightFunc.
func (mock *ContextMock) HasUserRight(in1 string) bool {
	if mock.HasUserRightFunc == nil {
		panic("ContextMock.HasUserRightFunc: method is nil but Context.HasUserRight was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockHasUserRight.Lock()
	mock.calls.HasUserRight = append(mock.calls.HasUserRight, callInfo)
	mock.lockHasUserRight.Unlock()
	return mock.HasUserRightFunc(in1)
}

// HasUserRightCalls gets all the calls that were made to HasUserRight.
// Check the length with:
//     len(mockedContext.HasUserRightCalls())
func (mock *ContextMock) HasUserRightCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockHasUserRight.RLock()
	calls = mock.calls.HasUserRight
	mock.lockHasUserRight.RUnlock()
	return calls
}

// HasUserRightOrForbid calls HasUserRightOrForbidFunc.
func (mock *ContextMock) HasUserRightOrForbid(userRightName string) bool {
	if mock.HasUserRightOrForbidFunc == nil {
		panic("ContextMock.HasUserRightOrForbidFunc: method is nil but Context.HasUserRightOrForbid was just called")
	}
	callInfo := struct {
		UserRightName string
	}{
		UserRightName: userRightName,
	}
	mock.lockHasUserRightOrForbid.Lock()
	mock.calls.HasUserRightOrForbid = append(mock.calls.HasUserRightOrForbid, callInfo)
	mock.lockHasUserRightOrForbid.Unlock()
	return mock.HasUserRightOrForbidFunc(userRightName)
}

// HasUserRightOrForbidCalls gets all the calls that were made to HasUserRightOrForbid.
// Check the length with:
//     len(mockedContext.HasUserRightOrForbidCalls())
func (mock *ContextMock) HasUserRightOrForbidCalls() []struct {
	UserRightName string
} {
	var calls []struct {
		UserRightName string
	}
	mock.lockHasUserRightOrForbid.RLock()
	calls = mock.calls.HasUserRightOrForbid
	mock.lockHasUserRightOrForbid.RUnlock()
	return calls
}

// Host calls HostFunc.
func (mock *ContextMock) Host() string {
	if mock.HostFunc == nil {
		panic("ContextMock.HostFunc: method is nil but Context.Host was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHost.Lock()
	mock.calls.Host = append(mock.calls.Host, callInfo)
	mock.lockHost.Unlock()
	return mock.HostFunc()
}

// HostCalls gets all the calls that were made to Host.
// Check the length with:
//     len(mockedContext.HostCalls())
func (mock *ContextMock) HostCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHost.RLock()
	calls = mock.calls.Host
	mock.lockHost.RUnlock()
	return calls
}

// IsDevelopment calls IsDevelopmentFunc.
func (mock *ContextMock) IsDevelopment() bool {
	if mock.IsDevelopmentFunc == nil {
		panic("ContextMock.IsDevelopmentFunc: method is nil but Context.IsDevelopment was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsDevelopment.Lock()
	mock.calls.IsDevelopment = append(mock.calls.IsDevelopment, callInfo)
	mock.lockIsDevelopment.Unlock()
	return mock.IsDevelopmentFunc()
}

// IsDevelopmentCalls gets all the calls that were made to IsDevelopment.
// Check the length with:
//     len(mockedContext.IsDevelopmentCalls())
func (mock *ContextMock) IsDevelopmentCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsDevelopment.RLock()
	calls = mock.calls.IsDevelopment
	mock.lockIsDevelopment.RUnlock()
	return calls
}

// IsJWTAuthorized calls IsJWTAuthorizedFunc.
func (mock *ContextMock) IsJWTAuthorized() bool {
	if mock.IsJWTAuthorizedFunc == nil {
		panic("ContextMock.IsJWTAuthorizedFunc: method is nil but Context.IsJWTAuthorized was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsJWTAuthorized.Lock()
	mock.calls.IsJWTAuthorized = append(mock.calls.IsJWTAuthorized, callInfo)
	mock.lockIsJWTAuthorized.Unlock()
	return mock.IsJWTAuthorizedFunc()
}

// IsJWTAuthorizedCalls gets all the calls that were made to IsJWTAuthorized.
// Check the length with:
//     len(mockedContext.IsJWTAuthorizedCalls())
func (mock *ContextMock) IsJWTAuthorizedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsJWTAuthorized.RLock()
	calls = mock.calls.IsJWTAuthorized
	mock.lockIsJWTAuthorized.RUnlock()
	return calls
}

// IsLoggedIn calls IsLoggedInFunc.
func (mock *ContextMock) IsLoggedIn() bool {
	if mock.IsLoggedInFunc == nil {
		panic("ContextMock.IsLoggedInFunc: method is nil but Context.IsLoggedIn was just called")
	}
	callInfo := struct {
	}{}
	mock.lockIsLoggedIn.Lock()
	mock.calls.IsLoggedIn = append(mock.calls.IsLoggedIn, callInfo)
	mock.lockIsLoggedIn.Unlock()
	return mock.IsLoggedInFunc()
}

// IsLoggedInCalls gets all the calls that were made to IsLoggedIn.
// Check the length with:
//     len(mockedContext.IsLoggedInCalls())
func (mock *ContextMock) IsLoggedInCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockIsLoggedIn.RLock()
	calls = mock.calls.IsLoggedIn
	mock.lockIsLoggedIn.RUnlock()
	return calls
}

// LanguageName calls LanguageNameFunc.
func (mock *ContextMock) LanguageName(languageID uint16) string {
	if mock.LanguageNameFunc == nil {
		panic("ContextMock.LanguageNameFunc: method is nil but Context.LanguageName was just called")
	}
	callInfo := struct {
		LanguageID uint16
	}{
		LanguageID: languageID,
	}
	mock.lockLanguageName.Lock()
	mock.calls.LanguageName = append(mock.calls.LanguageName, callInfo)
	mock.lockLanguageName.Unlock()
	return mock.LanguageNameFunc(languageID)
}

// LanguageNameCalls gets all the calls that were made to LanguageName.
// Check the length with:
//     len(mockedContext.LanguageNameCalls())
func (mock *ContextMock) LanguageNameCalls() []struct {
	LanguageID uint16
} {
	var calls []struct {
		LanguageID uint16
	}
	mock.lockLanguageName.RLock()
	calls = mock.calls.LanguageName
	mock.lockLanguageName.RUnlock()
	return calls
}

// Login calls LoginFunc.
func (mock *ContextMock) Login(userID string, rememberMe bool) error {
	if mock.LoginFunc == nil {
		panic("ContextMock.LoginFunc: method is nil but Context.Login was just called")
	}
	callInfo := struct {
		UserID     string
		RememberMe bool
	}{
		UserID:     userID,
		RememberMe: rememberMe,
	}
	mock.lockLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	mock.lockLogin.Unlock()
	return mock.LoginFunc(userID, rememberMe)
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//     len(mockedContext.LoginCalls())
func (mock *ContextMock) LoginCalls() []struct {
	UserID     string
	RememberMe bool
} {
	var calls []struct {
		UserID     string
		RememberMe bool
	}
	mock.lockLogin.RLock()
	calls = mock.calls.Login
	mock.lockLogin.RUnlock()
	return calls
}

// Logout calls LogoutFunc.
func (mock *ContextMock) Logout() error {
	if mock.LogoutFunc == nil {
		panic("ContextMock.LogoutFunc: method is nil but Context.Logout was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLogout.Lock()
	mock.calls.Logout = append(mock.calls.Logout, callInfo)
	mock.lockLogout.Unlock()
	return mock.LogoutFunc()
}

// LogoutCalls gets all the calls that were made to Logout.
// Check the length with:
//     len(mockedContext.LogoutCalls())
func (mock *ContextMock) LogoutCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLogout.RLock()
	calls = mock.calls.Logout
	mock.lockLogout.RUnlock()
	return calls
}

// Method calls MethodFunc.
func (mock *ContextMock) Method() string {
	if mock.MethodFunc == nil {
		panic("ContextMock.MethodFunc: method is nil but Context.Method was just called")
	}
	callInfo := struct {
	}{}
	mock.lockMethod.Lock()
	mock.calls.Method = append(mock.calls.Method, callInfo)
	mock.lockMethod.Unlock()
	return mock.MethodFunc()
}

// MethodCalls gets all the calls that were made to Method.
// Check the length with:
//     len(mockedContext.MethodCalls())
func (mock *ContextMock) MethodCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockMethod.RLock()
	calls = mock.calls.Method
	mock.lockMethod.RUnlock()
	return calls
}

// MultipartForm calls MultipartFormFunc.
func (mock *ContextMock) MultipartForm(maxMemory int64) (*multipart.Form, error) {
	if mock.MultipartFormFunc == nil {
		panic("ContextMock.MultipartFormFunc: method is nil but Context.MultipartForm was just called")
	}
	callInfo := struct {
		MaxMemory int64
	}{
		MaxMemory: maxMemory,
	}
	mock.lockMultipartForm.Lock()
	mock.calls.MultipartForm = append(mock.calls.MultipartForm, callInfo)
	mock.lockMultipartForm.Unlock()
	return mock.MultipartFormFunc(maxMemory)
}

// MultipartFormCalls gets all the calls that were made to MultipartForm.
// Check the length with:
//     len(mockedContext.MultipartFormCalls())
func (mock *ContextMock) MultipartFormCalls() []struct {
	MaxMemory int64
} {
	var calls []struct {
		MaxMemory int64
	}
	mock.lockMultipartForm.RLock()
	calls = mock.calls.MultipartForm
	mock.lockMultipartForm.RUnlock()
	return calls
}

// Path calls PathFunc.
func (mock *ContextMock) Path() string {
	if mock.PathFunc == nil {
		panic("ContextMock.PathFunc: method is nil but Context.Path was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPath.Lock()
	mock.calls.Path = append(mock.calls.Path, callInfo)
	mock.lockPath.Unlock()
	return mock.PathFunc()
}

// PathCalls gets all the calls that were made to Path.
// Check the length with:
//     len(mockedContext.PathCalls())
func (mock *ContextMock) PathCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPath.RLock()
	calls = mock.calls.Path
	mock.lockPath.RUnlock()
	return calls
}

// PprofURL calls PprofURLFunc.
func (mock *ContextMock) PprofURL() string {
	if mock.PprofURLFunc == nil {
		panic("ContextMock.PprofURLFunc: method is nil but Context.PprofURL was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPprofURL.Lock()
	mock.calls.PprofURL = append(mock.calls.PprofURL, callInfo)
	mock.lockPprofURL.Unlock()
	return mock.PprofURLFunc()
}

// PprofURLCalls gets all the calls that were made to PprofURL.
// Check the length with:
//     len(mockedContext.PprofURLCalls())
func (mock *ContextMock) PprofURLCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPprofURL.RLock()
	calls = mock.calls.PprofURL
	mock.lockPprofURL.RUnlock()
	return calls
}

// QueryString calls QueryStringFunc.
func (mock *ContextMock) QueryString() string {
	if mock.QueryStringFunc == nil {
		panic("ContextMock.QueryStringFunc: method is nil but Context.QueryString was just called")
	}
	callInfo := struct {
	}{}
	mock.lockQueryString.Lock()
	mock.calls.QueryString = append(mock.calls.QueryString, callInfo)
	mock.lockQueryString.Unlock()
	return mock.QueryStringFunc()
}

// QueryStringCalls gets all the calls that were made to QueryString.
// Check the length with:
//     len(mockedContext.QueryStringCalls())
func (mock *ContextMock) QueryStringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockQueryString.RLock()
	calls = mock.calls.QueryString
	mock.lockQueryString.RUnlock()
	return calls
}

// QueryValue calls QueryValueFunc.
func (mock *ContextMock) QueryValue(in1 string) string {
	if mock.QueryValueFunc == nil {
		panic("ContextMock.QueryValueFunc: method is nil but Context.QueryValue was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockQueryValue.Lock()
	mock.calls.QueryValue = append(mock.calls.QueryValue, callInfo)
	mock.lockQueryValue.Unlock()
	return mock.QueryValueFunc(in1)
}

// QueryValueCalls gets all the calls that were made to QueryValue.
// Check the length with:
//     len(mockedContext.QueryValueCalls())
func (mock *ContextMock) QueryValueCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockQueryValue.RLock()
	calls = mock.calls.QueryValue
	mock.lockQueryValue.RUnlock()
	return calls
}

// Redirect calls RedirectFunc.
func (mock *ContextMock) Redirect(path string, statusCode int) {
	if mock.RedirectFunc == nil {
		panic("ContextMock.RedirectFunc: method is nil but Context.Redirect was just called")
	}
	callInfo := struct {
		Path       string
		StatusCode int
	}{
		Path:       path,
		StatusCode: statusCode,
	}
	mock.lockRedirect.Lock()
	mock.calls.Redirect = append(mock.calls.Redirect, callInfo)
	mock.lockRedirect.Unlock()
	mock.RedirectFunc(path, statusCode)
}

// RedirectCalls gets all the calls that were made to Redirect.
// Check the length with:
//     len(mockedContext.RedirectCalls())
func (mock *ContextMock) RedirectCalls() []struct {
	Path       string
	StatusCode int
} {
	var calls []struct {
		Path       string
		StatusCode int
	}
	mock.lockRedirect.RLock()
	calls = mock.calls.Redirect
	mock.lockRedirect.RUnlock()
	return calls
}

// Referer calls RefererFunc.
func (mock *ContextMock) Referer() string {
	if mock.RefererFunc == nil {
		panic("ContextMock.RefererFunc: method is nil but Context.Referer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockReferer.Lock()
	mock.calls.Referer = append(mock.calls.Referer, callInfo)
	mock.lockReferer.Unlock()
	return mock.RefererFunc()
}

// RefererCalls gets all the calls that were made to Referer.
// Check the length with:
//     len(mockedContext.RefererCalls())
func (mock *ContextMock) RefererCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockReferer.RLock()
	calls = mock.calls.Referer
	mock.lockReferer.RUnlock()
	return calls
}

// RenderBadRequest calls RenderBadRequestFunc.
func (mock *ContextMock) RenderBadRequest() {
	if mock.RenderBadRequestFunc == nil {
		panic("ContextMock.RenderBadRequestFunc: method is nil but Context.RenderBadRequest was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRenderBadRequest.Lock()
	mock.calls.RenderBadRequest = append(mock.calls.RenderBadRequest, callInfo)
	mock.lockRenderBadRequest.Unlock()
	mock.RenderBadRequestFunc()
}

// RenderBadRequestCalls gets all the calls that were made to RenderBadRequest.
// Check the length with:
//     len(mockedContext.RenderBadRequestCalls())
func (mock *ContextMock) RenderBadRequestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRenderBadRequest.RLock()
	calls = mock.calls.RenderBadRequest
	mock.lockRenderBadRequest.RUnlock()
	return calls
}

// RenderInternalServerError calls RenderInternalServerErrorFunc.
func (mock *ContextMock) RenderInternalServerError(in1 error) {
	if mock.RenderInternalServerErrorFunc == nil {
		panic("ContextMock.RenderInternalServerErrorFunc: method is nil but Context.RenderInternalServerError was just called")
	}
	callInfo := struct {
		In1 error
	}{
		In1: in1,
	}
	mock.lockRenderInternalServerError.Lock()
	mock.calls.RenderInternalServerError = append(mock.calls.RenderInternalServerError, callInfo)
	mock.lockRenderInternalServerError.Unlock()
	mock.RenderInternalServerErrorFunc(in1)
}

// RenderInternalServerErrorCalls gets all the calls that were made to RenderInternalServerError.
// Check the length with:
//     len(mockedContext.RenderInternalServerErrorCalls())
func (mock *ContextMock) RenderInternalServerErrorCalls() []struct {
	In1 error
} {
	var calls []struct {
		In1 error
	}
	mock.lockRenderInternalServerError.RLock()
	calls = mock.calls.RenderInternalServerError
	mock.lockRenderInternalServerError.RUnlock()
	return calls
}

// RenderNon200 calls RenderNon200Func.
func (mock *ContextMock) RenderNon200() {
	if mock.RenderNon200Func == nil {
		panic("ContextMock.RenderNon200Func: method is nil but Context.RenderNon200 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRenderNon200.Lock()
	mock.calls.RenderNon200 = append(mock.calls.RenderNon200, callInfo)
	mock.lockRenderNon200.Unlock()
	mock.RenderNon200Func()
}

// RenderNon200Calls gets all the calls that were made to RenderNon200.
// Check the length with:
//     len(mockedContext.RenderNon200Calls())
func (mock *ContextMock) RenderNon200Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockRenderNon200.RLock()
	calls = mock.calls.RenderNon200
	mock.lockRenderNon200.RUnlock()
	return calls
}

// RenderNon200Custom calls RenderNon200CustomFunc.
func (mock *ContextMock) RenderNon200Custom(title string, message string) {
	if mock.RenderNon200CustomFunc == nil {
		panic("ContextMock.RenderNon200CustomFunc: method is nil but Context.RenderNon200Custom was just called")
	}
	callInfo := struct {
		Title   string
		Message string
	}{
		Title:   title,
		Message: message,
	}
	mock.lockRenderNon200Custom.Lock()
	mock.calls.RenderNon200Custom = append(mock.calls.RenderNon200Custom, callInfo)
	mock.lockRenderNon200Custom.Unlock()
	mock.RenderNon200CustomFunc(title, message)
}

// RenderNon200CustomCalls gets all the calls that were made to RenderNon200Custom.
// Check the length with:
//     len(mockedContext.RenderNon200CustomCalls())
func (mock *ContextMock) RenderNon200CustomCalls() []struct {
	Title   string
	Message string
} {
	var calls []struct {
		Title   string
		Message string
	}
	mock.lockRenderNon200Custom.RLock()
	calls = mock.calls.RenderNon200Custom
	mock.lockRenderNon200Custom.RUnlock()
	return calls
}

// RenderNotFound calls RenderNotFoundFunc.
func (mock *ContextMock) RenderNotFound() {
	if mock.RenderNotFoundFunc == nil {
		panic("ContextMock.RenderNotFoundFunc: method is nil but Context.RenderNotFound was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRenderNotFound.Lock()
	mock.calls.RenderNotFound = append(mock.calls.RenderNotFound, callInfo)
	mock.lockRenderNotFound.Unlock()
	mock.RenderNotFoundFunc()
}

// RenderNotFoundCalls gets all the calls that were made to RenderNotFound.
// Check the length with:
//     len(mockedContext.RenderNotFoundCalls())
func (mock *ContextMock) RenderNotFoundCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRenderNotFound.RLock()
	calls = mock.calls.RenderNotFound
	mock.lockRenderNotFound.RUnlock()
	return calls
}

// RenderTheme calls RenderThemeFunc.
func (mock *ContextMock) RenderTheme(code string, data themes.DataStore) error {
	if mock.RenderThemeFunc == nil {
		panic("ContextMock.RenderThemeFunc: method is nil but Context.RenderTheme was just called")
	}
	callInfo := struct {
		Code string
		Data themes.DataStore
	}{
		Code: code,
		Data: data,
	}
	mock.lockRenderTheme.Lock()
	mock.calls.RenderTheme = append(mock.calls.RenderTheme, callInfo)
	mock.lockRenderTheme.Unlock()
	return mock.RenderThemeFunc(code, data)
}

// RenderThemeCalls gets all the calls that were made to RenderTheme.
// Check the length with:
//     len(mockedContext.RenderThemeCalls())
func (mock *ContextMock) RenderThemeCalls() []struct {
	Code string
	Data themes.DataStore
} {
	var calls []struct {
		Code string
		Data themes.DataStore
	}
	mock.lockRenderTheme.RLock()
	calls = mock.calls.RenderTheme
	mock.lockRenderTheme.RUnlock()
	return calls
}

// RenderUnauthorized calls RenderUnauthorizedFunc.
func (mock *ContextMock) RenderUnauthorized() {
	if mock.RenderUnauthorizedFunc == nil {
		panic("ContextMock.RenderUnauthorizedFunc: method is nil but Context.RenderUnauthorized was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRenderUnauthorized.Lock()
	mock.calls.RenderUnauthorized = append(mock.calls.RenderUnauthorized, callInfo)
	mock.lockRenderUnauthorized.Unlock()
	mock.RenderUnauthorizedFunc()
}

// RenderUnauthorizedCalls gets all the calls that were made to RenderUnauthorized.
// Check the length with:
//     len(mockedContext.RenderUnauthorizedCalls())
func (mock *ContextMock) RenderUnauthorizedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRenderUnauthorized.RLock()
	calls = mock.calls.RenderUnauthorized
	mock.lockRenderUnauthorized.RUnlock()
	return calls
}

// RequestBody calls RequestBodyFunc.
func (mock *ContextMock) RequestBody() io.ReadCloser {
	if mock.RequestBodyFunc == nil {
		panic("ContextMock.RequestBodyFunc: method is nil but Context.RequestBody was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRequestBody.Lock()
	mock.calls.RequestBody = append(mock.calls.RequestBody, callInfo)
	mock.lockRequestBody.Unlock()
	return mock.RequestBodyFunc()
}

// RequestBodyCalls gets all the calls that were made to RequestBody.
// Check the length with:
//     len(mockedContext.RequestBodyCalls())
func (mock *ContextMock) RequestBodyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRequestBody.RLock()
	calls = mock.calls.RequestBody
	mock.lockRequestBody.RUnlock()
	return calls
}

// RequestURI calls RequestURIFunc.
func (mock *ContextMock) RequestURI() string {
	if mock.RequestURIFunc == nil {
		panic("ContextMock.RequestURIFunc: method is nil but Context.RequestURI was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRequestURI.Lock()
	mock.calls.RequestURI = append(mock.calls.RequestURI, callInfo)
	mock.lockRequestURI.Unlock()
	return mock.RequestURIFunc()
}

// RequestURICalls gets all the calls that were made to RequestURI.
// Check the length with:
//     len(mockedContext.RequestURICalls())
func (mock *ContextMock) RequestURICalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRequestURI.RLock()
	calls = mock.calls.RequestURI
	mock.lockRequestURI.RUnlock()
	return calls
}

// SaveSessionIfNeeded calls SaveSessionIfNeededFunc.
func (mock *ContextMock) SaveSessionIfNeeded() error {
	if mock.SaveSessionIfNeededFunc == nil {
		panic("ContextMock.SaveSessionIfNeededFunc: method is nil but Context.SaveSessionIfNeeded was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSaveSessionIfNeeded.Lock()
	mock.calls.SaveSessionIfNeeded = append(mock.calls.SaveSessionIfNeeded, callInfo)
	mock.lockSaveSessionIfNeeded.Unlock()
	return mock.SaveSessionIfNeededFunc()
}

// SaveSessionIfNeededCalls gets all the calls that were made to SaveSessionIfNeeded.
// Check the length with:
//     len(mockedContext.SaveSessionIfNeededCalls())
func (mock *ContextMock) SaveSessionIfNeededCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSaveSessionIfNeeded.RLock()
	calls = mock.calls.SaveSessionIfNeeded
	mock.lockSaveSessionIfNeeded.RUnlock()
	return calls
}

// SetContentType calls SetContentTypeFunc.
func (mock *ContextMock) SetContentType(in1 string) {
	if mock.SetContentTypeFunc == nil {
		panic("ContextMock.SetContentTypeFunc: method is nil but Context.SetContentType was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetContentType.Lock()
	mock.calls.SetContentType = append(mock.calls.SetContentType, callInfo)
	mock.lockSetContentType.Unlock()
	mock.SetContentTypeFunc(in1)
}

// SetContentTypeCalls gets all the calls that were made to SetContentType.
// Check the length with:
//     len(mockedContext.SetContentTypeCalls())
func (mock *ContextMock) SetContentTypeCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetContentType.RLock()
	calls = mock.calls.SetContentType
	mock.lockSetContentType.RUnlock()
	return calls
}

// SetFlashErrorMessage calls SetFlashErrorMessageFunc.
func (mock *ContextMock) SetFlashErrorMessage(in1 string) error {
	if mock.SetFlashErrorMessageFunc == nil {
		panic("ContextMock.SetFlashErrorMessageFunc: method is nil but Context.SetFlashErrorMessage was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetFlashErrorMessage.Lock()
	mock.calls.SetFlashErrorMessage = append(mock.calls.SetFlashErrorMessage, callInfo)
	mock.lockSetFlashErrorMessage.Unlock()
	return mock.SetFlashErrorMessageFunc(in1)
}

// SetFlashErrorMessageCalls gets all the calls that were made to SetFlashErrorMessage.
// Check the length with:
//     len(mockedContext.SetFlashErrorMessageCalls())
func (mock *ContextMock) SetFlashErrorMessageCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetFlashErrorMessage.RLock()
	calls = mock.calls.SetFlashErrorMessage
	mock.lockSetFlashErrorMessage.RUnlock()
	return calls
}

// SetFlashInfoMessage calls SetFlashInfoMessageFunc.
func (mock *ContextMock) SetFlashInfoMessage(in1 string) error {
	if mock.SetFlashInfoMessageFunc == nil {
		panic("ContextMock.SetFlashInfoMessageFunc: method is nil but Context.SetFlashInfoMessage was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetFlashInfoMessage.Lock()
	mock.calls.SetFlashInfoMessage = append(mock.calls.SetFlashInfoMessage, callInfo)
	mock.lockSetFlashInfoMessage.Unlock()
	return mock.SetFlashInfoMessageFunc(in1)
}

// SetFlashInfoMessageCalls gets all the calls that were made to SetFlashInfoMessage.
// Check the length with:
//     len(mockedContext.SetFlashInfoMessageCalls())
func (mock *ContextMock) SetFlashInfoMessageCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetFlashInfoMessage.RLock()
	calls = mock.calls.SetFlashInfoMessage
	mock.lockSetFlashInfoMessage.RUnlock()
	return calls
}

// SetFlashSuccessMessage calls SetFlashSuccessMessageFunc.
func (mock *ContextMock) SetFlashSuccessMessage(in1 string) error {
	if mock.SetFlashSuccessMessageFunc == nil {
		panic("ContextMock.SetFlashSuccessMessageFunc: method is nil but Context.SetFlashSuccessMessage was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetFlashSuccessMessage.Lock()
	mock.calls.SetFlashSuccessMessage = append(mock.calls.SetFlashSuccessMessage, callInfo)
	mock.lockSetFlashSuccessMessage.Unlock()
	return mock.SetFlashSuccessMessageFunc(in1)
}

// SetFlashSuccessMessageCalls gets all the calls that were made to SetFlashSuccessMessage.
// Check the length with:
//     len(mockedContext.SetFlashSuccessMessageCalls())
func (mock *ContextMock) SetFlashSuccessMessageCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetFlashSuccessMessage.RLock()
	calls = mock.calls.SetFlashSuccessMessage
	mock.lockSetFlashSuccessMessage.RUnlock()
	return calls
}

// SetFlashWarningMessage calls SetFlashWarningMessageFunc.
func (mock *ContextMock) SetFlashWarningMessage(in1 string) error {
	if mock.SetFlashWarningMessageFunc == nil {
		panic("ContextMock.SetFlashWarningMessageFunc: method is nil but Context.SetFlashWarningMessage was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockSetFlashWarningMessage.Lock()
	mock.calls.SetFlashWarningMessage = append(mock.calls.SetFlashWarningMessage, callInfo)
	mock.lockSetFlashWarningMessage.Unlock()
	return mock.SetFlashWarningMessageFunc(in1)
}

// SetFlashWarningMessageCalls gets all the calls that were made to SetFlashWarningMessage.
// Check the length with:
//     len(mockedContext.SetFlashWarningMessageCalls())
func (mock *ContextMock) SetFlashWarningMessageCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockSetFlashWarningMessage.RLock()
	calls = mock.calls.SetFlashWarningMessage
	mock.lockSetFlashWarningMessage.RUnlock()
	return calls
}

// SetHeader calls SetHeaderFunc.
func (mock *ContextMock) SetHeader(key string, value string) {
	if mock.SetHeaderFunc == nil {
		panic("ContextMock.SetHeaderFunc: method is nil but Context.SetHeader was just called")
	}
	callInfo := struct {
		Key   string
		Value string
	}{
		Key:   key,
		Value: value,
	}
	mock.lockSetHeader.Lock()
	mock.calls.SetHeader = append(mock.calls.SetHeader, callInfo)
	mock.lockSetHeader.Unlock()
	mock.SetHeaderFunc(key, value)
}

// SetHeaderCalls gets all the calls that were made to SetHeader.
// Check the length with:
//     len(mockedContext.SetHeaderCalls())
func (mock *ContextMock) SetHeaderCalls() []struct {
	Key   string
	Value string
} {
	var calls []struct {
		Key   string
		Value string
	}
	mock.lockSetHeader.RLock()
	calls = mock.calls.SetHeader
	mock.lockSetHeader.RUnlock()
	return calls
}

// SetSessionValue calls SetSessionValueFunc.
func (mock *ContextMock) SetSessionValue(key uint8, value []byte) error {
	if mock.SetSessionValueFunc == nil {
		panic("ContextMock.SetSessionValueFunc: method is nil but Context.SetSessionValue was just called")
	}
	callInfo := struct {
		Key   uint8
		Value []byte
	}{
		Key:   key,
		Value: value,
	}
	mock.lockSetSessionValue.Lock()
	mock.calls.SetSessionValue = append(mock.calls.SetSessionValue, callInfo)
	mock.lockSetSessionValue.Unlock()
	return mock.SetSessionValueFunc(key, value)
}

// SetSessionValueCalls gets all the calls that were made to SetSessionValue.
// Check the length with:
//     len(mockedContext.SetSessionValueCalls())
func (mock *ContextMock) SetSessionValueCalls() []struct {
	Key   uint8
	Value []byte
} {
	var calls []struct {
		Key   uint8
		Value []byte
	}
	mock.lockSetSessionValue.RLock()
	calls = mock.calls.SetSessionValue
	mock.lockSetSessionValue.RUnlock()
	return calls
}

// SetSlugMappedURL calls SetSlugMappedURLFunc.
func (mock *ContextMock) SetSlugMappedURL(slugMappedURL string) {
	if mock.SetSlugMappedURLFunc == nil {
		panic("ContextMock.SetSlugMappedURLFunc: method is nil but Context.SetSlugMappedURL was just called")
	}
	callInfo := struct {
		SlugMappedURL string
	}{
		SlugMappedURL: slugMappedURL,
	}
	mock.lockSetSlugMappedURL.Lock()
	mock.calls.SetSlugMappedURL = append(mock.calls.SetSlugMappedURL, callInfo)
	mock.lockSetSlugMappedURL.Unlock()
	mock.SetSlugMappedURLFunc(slugMappedURL)
}

// SetSlugMappedURLCalls gets all the calls that were made to SetSlugMappedURL.
// Check the length with:
//     len(mockedContext.SetSlugMappedURLCalls())
func (mock *ContextMock) SetSlugMappedURLCalls() []struct {
	SlugMappedURL string
} {
	var calls []struct {
		SlugMappedURL string
	}
	mock.lockSetSlugMappedURL.RLock()
	calls = mock.calls.SetSlugMappedURL
	mock.lockSetSlugMappedURL.RUnlock()
	return calls
}

// SetStatusCode calls SetStatusCodeFunc.
func (mock *ContextMock) SetStatusCode(in1 int) {
	if mock.SetStatusCodeFunc == nil {
		panic("ContextMock.SetStatusCodeFunc: method is nil but Context.SetStatusCode was just called")
	}
	callInfo := struct {
		In1 int
	}{
		In1: in1,
	}
	mock.lockSetStatusCode.Lock()
	mock.calls.SetStatusCode = append(mock.calls.SetStatusCode, callInfo)
	mock.lockSetStatusCode.Unlock()
	mock.SetStatusCodeFunc(in1)
}

// SetStatusCodeCalls gets all the calls that were made to SetStatusCode.
// Check the length with:
//     len(mockedContext.SetStatusCodeCalls())
func (mock *ContextMock) SetStatusCodeCalls() []struct {
	In1 int
} {
	var calls []struct {
		In1 int
	}
	mock.lockSetStatusCode.RLock()
	calls = mock.calls.SetStatusCode
	mock.lockSetStatusCode.RUnlock()
	return calls
}

// SetTheme calls SetThemeFunc.
func (mock *ContextMock) SetTheme(code string) error {
	if mock.SetThemeFunc == nil {
		panic("ContextMock.SetThemeFunc: method is nil but Context.SetTheme was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	mock.lockSetTheme.Lock()
	mock.calls.SetTheme = append(mock.calls.SetTheme, callInfo)
	mock.lockSetTheme.Unlock()
	return mock.SetThemeFunc(code)
}

// SetThemeCalls gets all the calls that were made to SetTheme.
// Check the length with:
//     len(mockedContext.SetThemeCalls())
func (mock *ContextMock) SetThemeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	mock.lockSetTheme.RLock()
	calls = mock.calls.SetTheme
	mock.lockSetTheme.RUnlock()
	return calls
}

// StatusCode calls StatusCodeFunc.
func (mock *ContextMock) StatusCode() int {
	if mock.StatusCodeFunc == nil {
		panic("ContextMock.StatusCodeFunc: method is nil but Context.StatusCode was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStatusCode.Lock()
	mock.calls.StatusCode = append(mock.calls.StatusCode, callInfo)
	mock.lockStatusCode.Unlock()
	return mock.StatusCodeFunc()
}

// StatusCodeCalls gets all the calls that were made to StatusCode.
// Check the length with:
//     len(mockedContext.StatusCodeCalls())
func (mock *ContextMock) StatusCodeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStatusCode.RLock()
	calls = mock.calls.StatusCode
	mock.lockStatusCode.RUnlock()
	return calls
}

// Translate calls TranslateFunc.
func (mock *ContextMock) Translate(in1 string) string {
	if mock.TranslateFunc == nil {
		panic("ContextMock.TranslateFunc: method is nil but Context.Translate was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockTranslate.Lock()
	mock.calls.Translate = append(mock.calls.Translate, callInfo)
	mock.lockTranslate.Unlock()
	return mock.TranslateFunc(in1)
}

// TranslateCalls gets all the calls that were made to Translate.
// Check the length with:
//     len(mockedContext.TranslateCalls())
func (mock *ContextMock) TranslateCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockTranslate.RLock()
	calls = mock.calls.Translate
	mock.lockTranslate.RUnlock()
	return calls
}

// TranslatePlural calls TranslatePluralFunc.
func (mock *ContextMock) TranslatePlural(in1 string) string {
	if mock.TranslatePluralFunc == nil {
		panic("ContextMock.TranslatePluralFunc: method is nil but Context.TranslatePlural was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	mock.lockTranslatePlural.Lock()
	mock.calls.TranslatePlural = append(mock.calls.TranslatePlural, callInfo)
	mock.lockTranslatePlural.Unlock()
	return mock.TranslatePluralFunc(in1)
}

// TranslatePluralCalls gets all the calls that were made to TranslatePlural.
// Check the length with:
//     len(mockedContext.TranslatePluralCalls())
func (mock *ContextMock) TranslatePluralCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	mock.lockTranslatePlural.RLock()
	calls = mock.calls.TranslatePlural
	mock.lockTranslatePlural.RUnlock()
	return calls
}

// UnsetSessionValue calls UnsetSessionValueFunc.
func (mock *ContextMock) UnsetSessionValue(key uint8) error {
	if mock.UnsetSessionValueFunc == nil {
		panic("ContextMock.UnsetSessionValueFunc: method is nil but Context.UnsetSessionValue was just called")
	}
	callInfo := struct {
		Key uint8
	}{
		Key: key,
	}
	mock.lockUnsetSessionValue.Lock()
	mock.calls.UnsetSessionValue = append(mock.calls.UnsetSessionValue, callInfo)
	mock.lockUnsetSessionValue.Unlock()
	return mock.UnsetSessionValueFunc(key)
}

// UnsetSessionValueCalls gets all the calls that were made to UnsetSessionValue.
// Check the length with:
//     len(mockedContext.UnsetSessionValueCalls())
func (mock *ContextMock) UnsetSessionValueCalls() []struct {
	Key uint8
} {
	var calls []struct {
		Key uint8
	}
	mock.lockUnsetSessionValue.RLock()
	calls = mock.calls.UnsetSessionValue
	mock.lockUnsetSessionValue.RUnlock()
	return calls
}

// UpdatedBy calls UpdatedByFunc.
func (mock *ContextMock) UpdatedBy(entity contexts.Entity) string {
	if mock.UpdatedByFunc == nil {
		panic("ContextMock.UpdatedByFunc: method is nil but Context.UpdatedBy was just called")
	}
	callInfo := struct {
		Entity contexts.Entity
	}{
		Entity: entity,
	}
	mock.lockUpdatedBy.Lock()
	mock.calls.UpdatedBy = append(mock.calls.UpdatedBy, callInfo)
	mock.lockUpdatedBy.Unlock()
	return mock.UpdatedByFunc(entity)
}

// UpdatedByCalls gets all the calls that were made to UpdatedBy.
// Check the length with:
//     len(mockedContext.UpdatedByCalls())
func (mock *ContextMock) UpdatedByCalls() []struct {
	Entity contexts.Entity
} {
	var calls []struct {
		Entity contexts.Entity
	}
	mock.lockUpdatedBy.RLock()
	calls = mock.calls.UpdatedBy
	mock.lockUpdatedBy.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *ContextMock) Write(p []byte) (int, error) {
	if mock.WriteFunc == nil {
		panic("ContextMock.WriteFunc: method is nil but Context.Write was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(p)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedContext.WriteCalls())
func (mock *ContextMock) WriteCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}

// WriteString calls WriteStringFunc.
func (mock *ContextMock) WriteString(p string) {
	if mock.WriteStringFunc == nil {
		panic("ContextMock.WriteStringFunc: method is nil but Context.WriteString was just called")
	}
	callInfo := struct {
		P string
	}{
		P: p,
	}
	mock.lockWriteString.Lock()
	mock.calls.WriteString = append(mock.calls.WriteString, callInfo)
	mock.lockWriteString.Unlock()
	mock.WriteStringFunc(p)
}

// WriteStringCalls gets all the calls that were made to WriteString.
// Check the length with:
//     len(mockedContext.WriteStringCalls())
func (mock *ContextMock) WriteStringCalls() []struct {
	P string
} {
	var calls []struct {
		P string
	}
	mock.lockWriteString.RLock()
	calls = mock.calls.WriteString
	mock.lockWriteString.RUnlock()
	return calls
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package tag_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/tag"
)

func TestTagTable(t *testing.T) {
	tag := tag.NewTagEntity()
	if tag.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestTagTableAlias(t *testing.T) {
	tag := tag.NewTagEntity()
	if tag.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestTagIsUpdated(t *testing.T) {
	tag := tag.NewTagEntity()
	tag.IsUpdated()
}

func TestTagID(t *testing.T) {
	tag := tag.NewTagEntity()
	tag.ID()
}

func TestTagCreatedByID(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := "testValue"
	tag.SetCreatedByID(testValue)
	if testValue != tag.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedByID(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := "testValue"
	tag.SetUpdatedByID(&testValue)
	if &testValue != tag.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagCreatedAt(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := time.Now()
	tag.SetCreatedAt(testValue)
	if testValue != tag.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedAt(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := time.Now()
	tag.SetUpdatedAt(&testValue)
	if &testValue != tag.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagCreatedByFirstName(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := "testValue"
	tag.SetCreatedByFirstName(&testValue)
	if &testValue != tag.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagCreatedBySurname(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := "testValue"
	tag.SetCreatedBySurname(&testValue)
	if &testValue != tag.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedByFirstName(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := "testValue"
	tag.SetUpdatedByFirstName(&testValue)
	if &testValue != tag.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedBySurname(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := "testValue"
	tag.SetUpdatedBySurname(&testValue)
	if &testValue != tag.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagActive(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := true
	tag.SetActive(testValue)
	if testValue != tag.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagSorting(t *testing.T) {
	tag := tag.NewTagEntity()
	testValue := uint(1e9)
	tag.SetSorting(testValue)
	if testValue != tag.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

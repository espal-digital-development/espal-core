// Code generated by espal-store-synthesizer. DO NOT EDIT.
package tag_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/tag"
)

func TestTagTable(t *testing.T) {
	tt := tag.NewTagEntity()
	if tt.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestTagTableAlias(t *testing.T) {
	tt := tag.NewTagEntity()
	if tt.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestTagIsUpdated(t *testing.T) {
	tt := tag.NewTagEntity()
	tt.IsUpdated()
}

func TestTagID(t *testing.T) {
	tt := tag.NewTagEntity()
	tt.ID()
}

func TestTagCreatedByID(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := "testValue"
	tt.SetCreatedByID(testValue)
	if testValue != tt.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedByID(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := "testValue"
	tt.SetUpdatedByID(&testValue)
	if &testValue != tt.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagCreatedAt(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := time.Now()
	tt.SetCreatedAt(testValue)
	if testValue != tt.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedAt(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := time.Now()
	tt.SetUpdatedAt(&testValue)
	if &testValue != tt.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagCreatedByFirstName(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := "testValue"
	tt.SetCreatedByFirstName(&testValue)
	if &testValue != tt.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagCreatedBySurname(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := "testValue"
	tt.SetCreatedBySurname(&testValue)
	if &testValue != tt.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedByFirstName(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := "testValue"
	tt.SetUpdatedByFirstName(&testValue)
	if &testValue != tt.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagUpdatedBySurname(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := "testValue"
	tt.SetUpdatedBySurname(&testValue)
	if &testValue != tt.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagActive(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := true
	tt.SetActive(testValue)
	if testValue != tt.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTagSorting(t *testing.T) {
	tt := tag.NewTagEntity()
	testValue := uint(1e9)
	tt.SetSorting(testValue)
	if testValue != tt.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

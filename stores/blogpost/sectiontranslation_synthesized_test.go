// Code generated by espal-store-synthesizer. DO NOT EDIT.
package blogpost_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/blogpost"
)

func TestSectionTranslationTable(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	if sectionTranslation.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSectionTranslationTableAlias(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	if sectionTranslation.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSectionTranslationIsUpdated(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	sectionTranslation.IsUpdated()
}

func TestSectionTranslationID(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	sectionTranslation.ID()
}

func TestSectionTranslationCreatedByID(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetCreatedByID(testValue)
	if testValue != sectionTranslation.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationUpdatedByID(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetUpdatedByID(&testValue)
	if &testValue != sectionTranslation.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationCreatedAt(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := time.Now()
	sectionTranslation.SetCreatedAt(testValue)
	if testValue != sectionTranslation.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationUpdatedAt(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := time.Now()
	sectionTranslation.SetUpdatedAt(&testValue)
	if &testValue != sectionTranslation.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationCreatedByFirstName(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetCreatedByFirstName(&testValue)
	if &testValue != sectionTranslation.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationCreatedBySurname(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetCreatedBySurname(&testValue)
	if &testValue != sectionTranslation.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationUpdatedByFirstName(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetUpdatedByFirstName(&testValue)
	if &testValue != sectionTranslation.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationUpdatedBySurname(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetUpdatedBySurname(&testValue)
	if &testValue != sectionTranslation.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationLanguage(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := uint16(65000)
	sectionTranslation.SetLanguage(testValue)
	if testValue != sectionTranslation.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationField(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := uint16(65000)
	sectionTranslation.SetField(testValue)
	if testValue != sectionTranslation.Field() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationValue(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetValue(testValue)
	if testValue != sectionTranslation.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionTranslationSectionID(t *testing.T) {
	sectionTranslation := blogpost.NewSectionTranslationEntity()
	testValue := "testValue"
	sectionTranslation.SetSectionID(testValue)
	if testValue != sectionTranslation.SectionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

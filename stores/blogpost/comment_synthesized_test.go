// Code generated by espal-store-synthesizer. DO NOT EDIT.
package blogpost_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/blogpost"
)

func TestCommentTable(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	if comment.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestCommentTableAlias(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	if comment.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestCommentIsUpdated(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	comment.IsUpdated()
}

func TestCommentID(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	comment.ID()
}

func TestCommentCreatedByID(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetCreatedByID(testValue)
	if testValue != comment.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentUpdatedByID(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetUpdatedByID(&testValue)
	if &testValue != comment.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentCreatedAt(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := time.Now()
	comment.SetCreatedAt(testValue)
	if testValue != comment.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentUpdatedAt(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := time.Now()
	comment.SetUpdatedAt(&testValue)
	if &testValue != comment.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentCreatedByFirstName(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetCreatedByFirstName(&testValue)
	if &testValue != comment.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentCreatedBySurname(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetCreatedBySurname(&testValue)
	if &testValue != comment.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentUpdatedByFirstName(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetUpdatedByFirstName(&testValue)
	if &testValue != comment.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentUpdatedBySurname(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetUpdatedBySurname(&testValue)
	if &testValue != comment.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentBlogPostID(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetBlogPostID(testValue)
	if testValue != comment.BlogPostID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentTitle(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetTitle(&testValue)
	if &testValue != comment.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCommentMessage(t *testing.T) {
	comment := blogpost.NewCommentEntity()
	testValue := "testValue"
	comment.SetMessage(testValue)
	if testValue != comment.Message() {
		t.Fatal("Getter did not return the Set value")
	}
}

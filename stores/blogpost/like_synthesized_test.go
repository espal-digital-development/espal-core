// Code generated by espal-store-synthesizer. DO NOT EDIT.
package blogpost_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/blogpost"
)

func TestLikeTable(t *testing.T) {
	like := blogpost.NewLikeEntity()
	if like.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestLikeTableAlias(t *testing.T) {
	like := blogpost.NewLikeEntity()
	if like.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestLikeIsUpdated(t *testing.T) {
	like := blogpost.NewLikeEntity()
	like.IsUpdated()
}

func TestLikeID(t *testing.T) {
	like := blogpost.NewLikeEntity()
	like.ID()
}

func TestLikeCreatedByID(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetCreatedByID(testValue)
	if testValue != like.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeUpdatedByID(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetUpdatedByID(&testValue)
	if &testValue != like.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeCreatedAt(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := time.Now()
	like.SetCreatedAt(testValue)
	if testValue != like.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeUpdatedAt(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := time.Now()
	like.SetUpdatedAt(&testValue)
	if &testValue != like.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeCreatedByFirstName(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetCreatedByFirstName(&testValue)
	if &testValue != like.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeCreatedBySurname(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetCreatedBySurname(&testValue)
	if &testValue != like.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeUpdatedByFirstName(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetUpdatedByFirstName(&testValue)
	if &testValue != like.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeUpdatedBySurname(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetUpdatedBySurname(&testValue)
	if &testValue != like.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLikeBlogPostID(t *testing.T) {
	like := blogpost.NewLikeEntity()
	testValue := "testValue"
	like.SetBlogPostID(testValue)
	if testValue != like.BlogPostID() {
		t.Fatal("Getter did not return the Set value")
	}
}

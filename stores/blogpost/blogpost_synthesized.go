// Code generated by espal-store-synthesizer. DO NOT EDIT.
package blogpost

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ BlogPostEntity = &BlogPost{}

type BlogPostEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	SectionID() *string
	SetSectionID(sectionID *string)
	ApprovedByID() *string
	SetApprovedByID(approvedByID *string)
	ApprovedDate() *time.Time
	SetApprovedDate(approvedDate *time.Time)
	PublishDate() *time.Time
	SetPublishDate(publishDate *time.Time)
	ExpirationDate() *time.Time
	SetExpirationDate(expirationDate *time.Time)
	Comments() *string
	SetComments(comments *string)
}

// TableName returns the table name that belongs to the current model.
func (b *BlogPost) TableName() string {
	return "BlogPost"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (b *BlogPost) TableAlias() string {
	return "bpe"
}

// ID returns id.
func (b *BlogPost) ID() string {
	return b.id
}

// CreatedByID returns createdByID.
func (b *BlogPost) CreatedByID() string {
	return b.createdByID
}

// SetCreatedByID sets the createdByID.
func (b *BlogPost) SetCreatedByID(createdByID string) {
	b.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (b *BlogPost) UpdatedByID() *string {
	return b.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (b *BlogPost) SetUpdatedByID(updatedByID *string) {
	b.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (b *BlogPost) CreatedAt() time.Time {
	return b.createdAt
}

// SetCreatedAt sets the createdAt.
func (b *BlogPost) SetCreatedAt(createdAt time.Time) {
	b.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (b *BlogPost) UpdatedAt() *time.Time {
	return b.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (b *BlogPost) SetUpdatedAt(updatedAt *time.Time) {
	b.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (b *BlogPost) CreatedByFirstName() *string {
	return b.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (b *BlogPost) SetCreatedByFirstName(createdByFirstName *string) {
	b.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (b *BlogPost) CreatedBySurname() *string {
	return b.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (b *BlogPost) SetCreatedBySurname(createdBySurname *string) {
	b.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (b *BlogPost) UpdatedByFirstName() *string {
	return b.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (b *BlogPost) SetUpdatedByFirstName(updatedByFirstName *string) {
	b.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (b *BlogPost) UpdatedBySurname() *string {
	return b.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (b *BlogPost) SetUpdatedBySurname(updatedBySurname *string) {
	b.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (b *BlogPost) IsUpdated() bool {
	return b.updatedByID != nil
}

// Active returns active.
func (b *BlogPost) Active() bool {
	return b.active
}

// SetActive sets the active.
func (b *BlogPost) SetActive(active bool) {
	b.active = active
}

// Sorting returns sorting.
func (b *BlogPost) Sorting() uint {
	return b.sorting
}

// SetSorting sets the sorting.
func (b *BlogPost) SetSorting(sorting uint) {
	b.sorting = sorting
}

// SectionID returns sectionID.
func (b *BlogPost) SectionID() *string {
	return b.sectionID
}

// SetSectionID sets the sectionID.
func (b *BlogPost) SetSectionID(sectionID *string) {
	b.sectionID = sectionID
}

// ApprovedByID returns approvedByID.
func (b *BlogPost) ApprovedByID() *string {
	return b.approvedByID
}

// SetApprovedByID sets the approvedByID.
func (b *BlogPost) SetApprovedByID(approvedByID *string) {
	b.approvedByID = approvedByID
}

// ApprovedDate returns approvedDate.
func (b *BlogPost) ApprovedDate() *time.Time {
	return b.approvedDate
}

// SetApprovedDate sets the approvedDate.
func (b *BlogPost) SetApprovedDate(approvedDate *time.Time) {
	b.approvedDate = approvedDate
}

// PublishDate returns publishDate.
func (b *BlogPost) PublishDate() *time.Time {
	return b.publishDate
}

// SetPublishDate sets the publishDate.
func (b *BlogPost) SetPublishDate(publishDate *time.Time) {
	b.publishDate = publishDate
}

// ExpirationDate returns expirationDate.
func (b *BlogPost) ExpirationDate() *time.Time {
	return b.expirationDate
}

// SetExpirationDate sets the expirationDate.
func (b *BlogPost) SetExpirationDate(expirationDate *time.Time) {
	b.expirationDate = expirationDate
}

// Comments returns comments.
func (b *BlogPost) Comments() *string {
	return b.comments
}

// SetComments sets the comments.
func (b *BlogPost) SetComments(comments *string) {
	b.comments = comments
}

func newBlogPost() *BlogPost {
	return &BlogPost{}
}

// New returns a new instance of BlogPostEntity.
func NewBlogPostEntity() BlogPostEntity {
	return newBlogPost()
}

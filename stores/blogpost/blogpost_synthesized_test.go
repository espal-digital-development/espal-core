// Code generated by espal-store-synthesizer. DO NOT EDIT.
package blogpost_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/blogpost"
)

func TestBlogPostTable(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	if b.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBlogPostTableAlias(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	if b.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBlogPostIsUpdated(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	b.IsUpdated()
}

func TestBlogPostID(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	b.ID()
}

func TestBlogPostCreatedByID(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetCreatedByID(testValue)
	if testValue != b.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedByID(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetUpdatedByID(&testValue)
	if &testValue != b.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostCreatedAt(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	b.SetCreatedAt(testValue)
	if testValue != b.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedAt(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	b.SetUpdatedAt(&testValue)
	if &testValue != b.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostCreatedByFirstName(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetCreatedByFirstName(&testValue)
	if &testValue != b.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostCreatedBySurname(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetCreatedBySurname(&testValue)
	if &testValue != b.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedByFirstName(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetUpdatedByFirstName(&testValue)
	if &testValue != b.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedBySurname(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetUpdatedBySurname(&testValue)
	if &testValue != b.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostActive(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := true
	b.SetActive(testValue)
	if testValue != b.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostSorting(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := uint(1e9)
	b.SetSorting(testValue)
	if testValue != b.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostSectionID(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetSectionID(&testValue)
	if &testValue != b.SectionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostApprovedByID(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetApprovedByID(&testValue)
	if &testValue != b.ApprovedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostApprovedDate(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	b.SetApprovedDate(&testValue)
	if &testValue != b.ApprovedDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostPublishDate(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	b.SetPublishDate(&testValue)
	if &testValue != b.PublishDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostExpirationDate(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	b.SetExpirationDate(&testValue)
	if &testValue != b.ExpirationDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostComments(t *testing.T) {
	b := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	b.SetComments(&testValue)
	if &testValue != b.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

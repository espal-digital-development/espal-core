// Code generated by espal-store-synthesizer. DO NOT EDIT.
package blogpost_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/blogpost"
)

func TestBlogPostTable(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	if blogPost.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBlogPostTableAlias(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	if blogPost.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBlogPostIsUpdated(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	blogPost.IsUpdated()
}

func TestBlogPostID(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	blogPost.ID()
}

func TestBlogPostCreatedByID(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetCreatedByID(testValue)
	if testValue != blogPost.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedByID(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetUpdatedByID(&testValue)
	if &testValue != blogPost.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostCreatedAt(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	blogPost.SetCreatedAt(testValue)
	if testValue != blogPost.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedAt(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	blogPost.SetUpdatedAt(&testValue)
	if &testValue != blogPost.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostCreatedByFirstName(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetCreatedByFirstName(&testValue)
	if &testValue != blogPost.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostCreatedBySurname(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetCreatedBySurname(&testValue)
	if &testValue != blogPost.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedByFirstName(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetUpdatedByFirstName(&testValue)
	if &testValue != blogPost.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostUpdatedBySurname(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetUpdatedBySurname(&testValue)
	if &testValue != blogPost.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostActive(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := true
	blogPost.SetActive(testValue)
	if testValue != blogPost.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostSorting(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := uint(1e9)
	blogPost.SetSorting(testValue)
	if testValue != blogPost.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostSectionID(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetSectionID(&testValue)
	if &testValue != blogPost.SectionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostApprovedByID(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetApprovedByID(&testValue)
	if &testValue != blogPost.ApprovedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostApprovedDate(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	blogPost.SetApprovedDate(&testValue)
	if &testValue != blogPost.ApprovedDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostPublishDate(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	blogPost.SetPublishDate(&testValue)
	if &testValue != blogPost.PublishDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostExpirationDate(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := time.Now()
	blogPost.SetExpirationDate(&testValue)
	if &testValue != blogPost.ExpirationDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBlogPostComments(t *testing.T) {
	blogPost := blogpost.NewBlogPostEntity()
	testValue := "testValue"
	blogPost.SetComments(&testValue)
	if &testValue != blogPost.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

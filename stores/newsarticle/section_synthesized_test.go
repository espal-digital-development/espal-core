// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsarticle_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/newsarticle"
)

func TestSectionTable(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	if section.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSectionTableAlias(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	if section.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSectionIsUpdated(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	section.IsUpdated()
}

func TestSectionID(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	section.ID()
}

func TestSectionCreatedByID(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetCreatedByID(testValue)
	if testValue != section.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionUpdatedByID(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetUpdatedByID(&testValue)
	if &testValue != section.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionCreatedAt(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := time.Now()
	section.SetCreatedAt(testValue)
	if testValue != section.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionUpdatedAt(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := time.Now()
	section.SetUpdatedAt(&testValue)
	if &testValue != section.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionCreatedByFirstName(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetCreatedByFirstName(&testValue)
	if &testValue != section.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionCreatedBySurname(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetCreatedBySurname(&testValue)
	if &testValue != section.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionUpdatedByFirstName(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetUpdatedByFirstName(&testValue)
	if &testValue != section.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionUpdatedBySurname(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetUpdatedBySurname(&testValue)
	if &testValue != section.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionActive(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := true
	section.SetActive(testValue)
	if testValue != section.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionSorting(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := uint(1e9)
	section.SetSorting(testValue)
	if testValue != section.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSectionParentID(t *testing.T) {
	section := newsarticle.NewSectionEntity()
	testValue := "testValue"
	section.SetParentID(&testValue)
	if &testValue != section.ParentID() {
		t.Fatal("Getter did not return the Set value")
	}
}

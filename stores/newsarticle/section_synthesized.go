// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsarticle

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ SectionEntity = &Section{}

type SectionEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	ParentID() *string
	SetParentID(parentID *string)
}

// ID returns id.
func (section *Section) ID() string {
	return section.id
}

// CreatedByID returns createdByID.
func (section *Section) CreatedByID() string {
	return section.createdByID
}

// SetCreatedByID sets the createdByID.
func (section *Section) SetCreatedByID(createdByID string) {
	section.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (section *Section) UpdatedByID() *string {
	return section.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (section *Section) SetUpdatedByID(updatedByID *string) {
	section.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (section *Section) CreatedAt() time.Time {
	return section.createdAt
}

// SetCreatedAt sets the createdAt.
func (section *Section) SetCreatedAt(createdAt time.Time) {
	section.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (section *Section) UpdatedAt() *time.Time {
	return section.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (section *Section) SetUpdatedAt(updatedAt *time.Time) {
	section.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (section *Section) CreatedByFirstName() *string {
	return section.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (section *Section) SetCreatedByFirstName(createdByFirstName *string) {
	section.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (section *Section) CreatedBySurname() *string {
	return section.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (section *Section) SetCreatedBySurname(createdBySurname *string) {
	section.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (section *Section) UpdatedByFirstName() *string {
	return section.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (section *Section) SetUpdatedByFirstName(updatedByFirstName *string) {
	section.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (section *Section) UpdatedBySurname() *string {
	return section.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (section *Section) SetUpdatedBySurname(updatedBySurname *string) {
	section.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (section *Section) IsUpdated() bool {
	return section.updatedByID != nil
}

// Active returns active.
func (section *Section) Active() bool {
	return section.active
}

// SetActive sets the active.
func (section *Section) SetActive(active bool) {
	section.active = active
}

// Sorting returns sorting.
func (section *Section) Sorting() uint {
	return section.sorting
}

// SetSorting sets the sorting.
func (section *Section) SetSorting(sorting uint) {
	section.sorting = sorting
}

// ParentID returns parentID.
func (section *Section) ParentID() *string {
	return section.parentID
}

// SetParentID sets the parentID.
func (section *Section) SetParentID(parentID *string) {
	section.parentID = parentID
}

func newSection() *Section {
	return &Section{}
}

// New returns a new instance of SectionEntity.
func NewSectionEntity() SectionEntity {
	return newSection()
}

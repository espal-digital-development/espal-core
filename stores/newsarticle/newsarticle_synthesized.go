// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsarticle

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ NewsArticleEntity = &NewsArticle{}

type NewsArticleEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	SectionID() *string
	SetSectionID(sectionID *string)
	ApprovedByID() *string
	SetApprovedByID(approvedByID *string)
	ApprovedDate() *time.Time
	SetApprovedDate(approvedDate *time.Time)
	PublishDate() *time.Time
	SetPublishDate(publishDate *time.Time)
	ExpirationDate() *time.Time
	SetExpirationDate(expirationDate *time.Time)
	Comments() *string
	SetComments(comments *string)
}

// ID returns id.
func (newsArticle *NewsArticle) ID() string {
	return newsArticle.id
}

// CreatedByID returns createdByID.
func (newsArticle *NewsArticle) CreatedByID() string {
	return newsArticle.createdByID
}

// SetCreatedByID sets the createdByID.
func (newsArticle *NewsArticle) SetCreatedByID(createdByID string) {
	newsArticle.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (newsArticle *NewsArticle) UpdatedByID() *string {
	return newsArticle.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (newsArticle *NewsArticle) SetUpdatedByID(updatedByID *string) {
	newsArticle.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (newsArticle *NewsArticle) CreatedAt() time.Time {
	return newsArticle.createdAt
}

// SetCreatedAt sets the createdAt.
func (newsArticle *NewsArticle) SetCreatedAt(createdAt time.Time) {
	newsArticle.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (newsArticle *NewsArticle) UpdatedAt() *time.Time {
	return newsArticle.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (newsArticle *NewsArticle) SetUpdatedAt(updatedAt *time.Time) {
	newsArticle.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (newsArticle *NewsArticle) CreatedByFirstName() *string {
	return newsArticle.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (newsArticle *NewsArticle) SetCreatedByFirstName(createdByFirstName *string) {
	newsArticle.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (newsArticle *NewsArticle) CreatedBySurname() *string {
	return newsArticle.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (newsArticle *NewsArticle) SetCreatedBySurname(createdBySurname *string) {
	newsArticle.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (newsArticle *NewsArticle) UpdatedByFirstName() *string {
	return newsArticle.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (newsArticle *NewsArticle) SetUpdatedByFirstName(updatedByFirstName *string) {
	newsArticle.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (newsArticle *NewsArticle) UpdatedBySurname() *string {
	return newsArticle.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (newsArticle *NewsArticle) SetUpdatedBySurname(updatedBySurname *string) {
	newsArticle.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (newsArticle *NewsArticle) IsUpdated() bool {
	return newsArticle.updatedByID != nil
}

// Active returns active.
func (newsArticle *NewsArticle) Active() bool {
	return newsArticle.active
}

// SetActive sets the active.
func (newsArticle *NewsArticle) SetActive(active bool) {
	newsArticle.active = active
}

// Sorting returns sorting.
func (newsArticle *NewsArticle) Sorting() uint {
	return newsArticle.sorting
}

// SetSorting sets the sorting.
func (newsArticle *NewsArticle) SetSorting(sorting uint) {
	newsArticle.sorting = sorting
}

// SectionID returns sectionID.
func (newsArticle *NewsArticle) SectionID() *string {
	return newsArticle.sectionID
}

// SetSectionID sets the sectionID.
func (newsArticle *NewsArticle) SetSectionID(sectionID *string) {
	newsArticle.sectionID = sectionID
}

// ApprovedByID returns approvedByID.
func (newsArticle *NewsArticle) ApprovedByID() *string {
	return newsArticle.approvedByID
}

// SetApprovedByID sets the approvedByID.
func (newsArticle *NewsArticle) SetApprovedByID(approvedByID *string) {
	newsArticle.approvedByID = approvedByID
}

// ApprovedDate returns approvedDate.
func (newsArticle *NewsArticle) ApprovedDate() *time.Time {
	return newsArticle.approvedDate
}

// SetApprovedDate sets the approvedDate.
func (newsArticle *NewsArticle) SetApprovedDate(approvedDate *time.Time) {
	newsArticle.approvedDate = approvedDate
}

// PublishDate returns publishDate.
func (newsArticle *NewsArticle) PublishDate() *time.Time {
	return newsArticle.publishDate
}

// SetPublishDate sets the publishDate.
func (newsArticle *NewsArticle) SetPublishDate(publishDate *time.Time) {
	newsArticle.publishDate = publishDate
}

// ExpirationDate returns expirationDate.
func (newsArticle *NewsArticle) ExpirationDate() *time.Time {
	return newsArticle.expirationDate
}

// SetExpirationDate sets the expirationDate.
func (newsArticle *NewsArticle) SetExpirationDate(expirationDate *time.Time) {
	newsArticle.expirationDate = expirationDate
}

// Comments returns comments.
func (newsArticle *NewsArticle) Comments() *string {
	return newsArticle.comments
}

// SetComments sets the comments.
func (newsArticle *NewsArticle) SetComments(comments *string) {
	newsArticle.comments = comments
}

func newNewsArticle() *NewsArticle {
	return &NewsArticle{}
}

// New returns a new instance of NewsArticleEntity.
func NewNewsArticleEntity() NewsArticleEntity {
	return newNewsArticle()
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsarticle_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/newsarticle"
)

func TestNewsArticleTable(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	if newsArticle.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestNewsArticleTableAlias(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	if newsArticle.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestNewsArticleIsUpdated(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	newsArticle.IsUpdated()
}

func TestNewsArticleID(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	newsArticle.ID()
}

func TestNewsArticleCreatedByID(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetCreatedByID(testValue)
	if testValue != newsArticle.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleUpdatedByID(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetUpdatedByID(&testValue)
	if &testValue != newsArticle.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleCreatedAt(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := time.Now()
	newsArticle.SetCreatedAt(testValue)
	if testValue != newsArticle.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleUpdatedAt(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := time.Now()
	newsArticle.SetUpdatedAt(&testValue)
	if &testValue != newsArticle.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleCreatedByFirstName(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetCreatedByFirstName(&testValue)
	if &testValue != newsArticle.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleCreatedBySurname(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetCreatedBySurname(&testValue)
	if &testValue != newsArticle.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleUpdatedByFirstName(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetUpdatedByFirstName(&testValue)
	if &testValue != newsArticle.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleUpdatedBySurname(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetUpdatedBySurname(&testValue)
	if &testValue != newsArticle.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleActive(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := true
	newsArticle.SetActive(testValue)
	if testValue != newsArticle.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleSorting(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := uint(1e9)
	newsArticle.SetSorting(testValue)
	if testValue != newsArticle.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleSectionID(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetSectionID(&testValue)
	if &testValue != newsArticle.SectionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleApprovedByID(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetApprovedByID(&testValue)
	if &testValue != newsArticle.ApprovedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleApprovedDate(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := time.Now()
	newsArticle.SetApprovedDate(&testValue)
	if &testValue != newsArticle.ApprovedDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticlePublishDate(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := time.Now()
	newsArticle.SetPublishDate(&testValue)
	if &testValue != newsArticle.PublishDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleExpirationDate(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := time.Now()
	newsArticle.SetExpirationDate(&testValue)
	if &testValue != newsArticle.ExpirationDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNewsArticleComments(t *testing.T) {
	newsArticle := newsarticle.NewNewsArticleEntity()
	testValue := "testValue"
	newsArticle.SetComments(&testValue)
	if &testValue != newsArticle.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

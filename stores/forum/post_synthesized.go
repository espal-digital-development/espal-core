// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PostEntity = &Post{}

type PostEntity interface {
	database.Model
	ForumID() string
	SetForumID(forumID string)
	ResponseToID() *string
	SetResponseToID(responseToID *string)
	Sticky() bool
	SetSticky(sticky bool)
	Title() *string
	SetTitle(title *string)
	Message() string
	SetMessage(message string)
	TimesEdited() *uint
	SetTimesEdited(timesEdited *uint)
	Name() string
	SetName(name string)
}

// ID returns id.
func (p *Post) ID() string {
	return p.id
}

// CreatedByID returns createdByID.
func (p *Post) CreatedByID() string {
	return p.createdByID
}

// SetCreatedByID sets the createdByID.
func (p *Post) SetCreatedByID(createdByID string) {
	p.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (p *Post) UpdatedByID() *string {
	return p.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (p *Post) SetUpdatedByID(updatedByID *string) {
	p.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (p *Post) CreatedAt() time.Time {
	return p.createdAt
}

// SetCreatedAt sets the createdAt.
func (p *Post) SetCreatedAt(createdAt time.Time) {
	p.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (p *Post) UpdatedAt() *time.Time {
	return p.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (p *Post) SetUpdatedAt(updatedAt *time.Time) {
	p.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (p *Post) CreatedByFirstName() *string {
	return p.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (p *Post) SetCreatedByFirstName(createdByFirstName *string) {
	p.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (p *Post) CreatedBySurname() *string {
	return p.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (p *Post) SetCreatedBySurname(createdBySurname *string) {
	p.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (p *Post) UpdatedByFirstName() *string {
	return p.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (p *Post) SetUpdatedByFirstName(updatedByFirstName *string) {
	p.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (p *Post) UpdatedBySurname() *string {
	return p.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (p *Post) SetUpdatedBySurname(updatedBySurname *string) {
	p.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (p *Post) IsUpdated() bool {
	return p.updatedByID != nil
}

// ForumID returns forumID.
func (p *Post) ForumID() string {
	return p.forumID
}

// SetForumID sets the forumID.
func (p *Post) SetForumID(forumID string) {
	p.forumID = forumID
}

// ResponseToID returns responseToID.
func (p *Post) ResponseToID() *string {
	return p.responseToID
}

// SetResponseToID sets the responseToID.
func (p *Post) SetResponseToID(responseToID *string) {
	p.responseToID = responseToID
}

// Sticky returns sticky.
func (p *Post) Sticky() bool {
	return p.sticky
}

// SetSticky sets the sticky.
func (p *Post) SetSticky(sticky bool) {
	p.sticky = sticky
}

// Title returns title.
func (p *Post) Title() *string {
	return p.title
}

// SetTitle sets the title.
func (p *Post) SetTitle(title *string) {
	p.title = title
}

// Message returns message.
func (p *Post) Message() string {
	return p.message
}

// SetMessage sets the message.
func (p *Post) SetMessage(message string) {
	p.message = message
}

// TimesEdited returns timesEdited.
func (p *Post) TimesEdited() *uint {
	return p.timesEdited
}

// SetTimesEdited sets the timesEdited.
func (p *Post) SetTimesEdited(timesEdited *uint) {
	p.timesEdited = timesEdited
}

// Name returns name.
func (p *Post) Name() string {
	return p.name
}

// SetName sets the name.
func (p *Post) SetName(name string) {
	p.name = name
}

func newPost() *Post {
	return &Post{}
}

// New returns a new instance of PostEntity.
func NewPostEntity() PostEntity {
	return newPost()
}

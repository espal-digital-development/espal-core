// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/forum"
)

func TestForumTable(t *testing.T) {
	forum := forum.NewForumEntity()
	if forum.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestForumTableAlias(t *testing.T) {
	forum := forum.NewForumEntity()
	if forum.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestForumIsUpdated(t *testing.T) {
	forum := forum.NewForumEntity()
	forum.IsUpdated()
}

func TestForumID(t *testing.T) {
	forum := forum.NewForumEntity()
	forum.ID()
}

func TestForumCreatedByID(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetCreatedByID(testValue)
	if testValue != forum.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumUpdatedByID(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetUpdatedByID(&testValue)
	if &testValue != forum.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumCreatedAt(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := time.Now()
	forum.SetCreatedAt(testValue)
	if testValue != forum.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumUpdatedAt(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := time.Now()
	forum.SetUpdatedAt(&testValue)
	if &testValue != forum.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumCreatedByFirstName(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetCreatedByFirstName(&testValue)
	if &testValue != forum.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumCreatedBySurname(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetCreatedBySurname(&testValue)
	if &testValue != forum.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumUpdatedByFirstName(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetUpdatedByFirstName(&testValue)
	if &testValue != forum.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumUpdatedBySurname(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetUpdatedBySurname(&testValue)
	if &testValue != forum.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumActive(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := true
	forum.SetActive(testValue)
	if testValue != forum.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumSorting(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := uint(1e9)
	forum.SetSorting(testValue)
	if testValue != forum.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumParentID(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetParentID(&testValue)
	if &testValue != forum.ParentID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumName(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := "testValue"
	forum.SetName(testValue)
	if testValue != forum.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumTopicsCount(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := uint(1e9)
	forum.SetTopicsCount(testValue)
	if testValue != forum.TopicsCount() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestForumPostsCount(t *testing.T) {
	forum := forum.NewForumEntity()
	testValue := uint(1e9)
	forum.SetPostsCount(testValue)
	if testValue != forum.PostsCount() {
		t.Fatal("Getter did not return the Set value")
	}
}

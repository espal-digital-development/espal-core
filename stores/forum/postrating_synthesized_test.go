// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/forum"
)

func TestPostRatingTable(t *testing.T) {
	p := forum.NewPostRatingEntity()
	if p.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPostRatingTableAlias(t *testing.T) {
	p := forum.NewPostRatingEntity()
	if p.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPostRatingIsUpdated(t *testing.T) {
	p := forum.NewPostRatingEntity()
	p.IsUpdated()
}

func TestPostRatingID(t *testing.T) {
	p := forum.NewPostRatingEntity()
	p.ID()
}

func TestPostRatingCreatedByID(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetCreatedByID(testValue)
	if testValue != p.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingUpdatedByID(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetUpdatedByID(&testValue)
	if &testValue != p.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingCreatedAt(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := time.Now()
	p.SetCreatedAt(testValue)
	if testValue != p.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingUpdatedAt(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := time.Now()
	p.SetUpdatedAt(&testValue)
	if &testValue != p.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingCreatedByFirstName(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetCreatedByFirstName(&testValue)
	if &testValue != p.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingCreatedBySurname(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetCreatedBySurname(&testValue)
	if &testValue != p.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingUpdatedByFirstName(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetUpdatedByFirstName(&testValue)
	if &testValue != p.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingUpdatedBySurname(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetUpdatedBySurname(&testValue)
	if &testValue != p.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingPostID(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := "testValue"
	p.SetPostID(&testValue)
	if &testValue != p.PostID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostRatingScore(t *testing.T) {
	p := forum.NewPostRatingEntity()
	testValue := 6.28
	p.SetScore(testValue)
	if testValue != p.Score() {
		t.Fatal("Getter did not return the Set value")
	}
}

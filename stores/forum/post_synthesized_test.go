// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/forum"
)

func TestPostTable(t *testing.T) {
	post := forum.NewPostEntity()
	if post.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPostTableAlias(t *testing.T) {
	post := forum.NewPostEntity()
	if post.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPostIsUpdated(t *testing.T) {
	post := forum.NewPostEntity()
	post.IsUpdated()
}

func TestPostID(t *testing.T) {
	post := forum.NewPostEntity()
	post.ID()
}

func TestPostCreatedByID(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetCreatedByID(testValue)
	if testValue != post.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostUpdatedByID(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetUpdatedByID(&testValue)
	if &testValue != post.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostCreatedAt(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := time.Now()
	post.SetCreatedAt(testValue)
	if testValue != post.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostUpdatedAt(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := time.Now()
	post.SetUpdatedAt(&testValue)
	if &testValue != post.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostCreatedByFirstName(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetCreatedByFirstName(&testValue)
	if &testValue != post.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostCreatedBySurname(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetCreatedBySurname(&testValue)
	if &testValue != post.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostUpdatedByFirstName(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetUpdatedByFirstName(&testValue)
	if &testValue != post.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostUpdatedBySurname(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetUpdatedBySurname(&testValue)
	if &testValue != post.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostForumID(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetForumID(testValue)
	if testValue != post.ForumID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostResponseToID(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetResponseToID(&testValue)
	if &testValue != post.ResponseToID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostSticky(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := true
	post.SetSticky(testValue)
	if testValue != post.Sticky() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostTitle(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetTitle(&testValue)
	if &testValue != post.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostMessage(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetMessage(testValue)
	if testValue != post.Message() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostTimesEdited(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := uint(1e9)
	post.SetTimesEdited(&testValue)
	if &testValue != post.TimesEdited() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPostName(t *testing.T) {
	post := forum.NewPostEntity()
	testValue := "testValue"
	post.SetName(testValue)
	if testValue != post.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/forum"
)

func TestPermissionTable(t *testing.T) {
	permission := forum.NewPermissionEntity()
	if permission.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPermissionTableAlias(t *testing.T) {
	permission := forum.NewPermissionEntity()
	if permission.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPermissionIsUpdated(t *testing.T) {
	permission := forum.NewPermissionEntity()
	permission.IsUpdated()
}

func TestPermissionID(t *testing.T) {
	permission := forum.NewPermissionEntity()
	permission.ID()
}

func TestPermissionCreatedByID(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetCreatedByID(testValue)
	if testValue != permission.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionUpdatedByID(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetUpdatedByID(&testValue)
	if &testValue != permission.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionCreatedAt(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := time.Now()
	permission.SetCreatedAt(testValue)
	if testValue != permission.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionUpdatedAt(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := time.Now()
	permission.SetUpdatedAt(&testValue)
	if &testValue != permission.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionCreatedByFirstName(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetCreatedByFirstName(&testValue)
	if &testValue != permission.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionCreatedBySurname(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetCreatedBySurname(&testValue)
	if &testValue != permission.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionUpdatedByFirstName(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetUpdatedByFirstName(&testValue)
	if &testValue != permission.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionUpdatedBySurname(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetUpdatedBySurname(&testValue)
	if &testValue != permission.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionForumID(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetForumID(&testValue)
	if &testValue != permission.ForumID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionUserID(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := "testValue"
	permission.SetUserID(&testValue)
	if &testValue != permission.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPermissionPermission(t *testing.T) {
	permission := forum.NewPermissionEntity()
	testValue := uint8(255)
	permission.SetPermission(testValue)
	if testValue != permission.Permission() {
		t.Fatal("Getter did not return the Set value")
	}
}

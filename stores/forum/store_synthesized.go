// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &ForumsStore{}

// Store represents a data interaction object.
type Store interface {
	GetOneByID(forumID string, language Language) (*Forum, bool, error)
	GetOnePostByID(postID string) (*Post, bool, error)
	GetTopLevel(language Language) ([]*Forum, bool, error)
	GetForParent(parentID string, language Language) (result []*Forum, ok bool, err error)
	GetPosts(forumID string) (posts []*Post, ok bool, err error)
	GetPostReplies(postID string) (replies []*Post, ok bool, err error)
	GetForumIDForPostID(postID string) (string, bool, error)
	DeleteOneForumPostByID(id string) error
}

func (forumsStore *ForumsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Forum, ok bool, err error) {
	rows, err := forumsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Forum, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		forum := newForum()
		fields := []interface{}{&forum.id, &forum.createdByID, &forum.updatedByID, &forum.createdAt, &forum.updatedAt, &forum.active, &forum.sorting, &forum.parentID, &forum.name, &forum.topicsCount, &forum.postsCount}
		if withCreators {
			fields = append(fields, &forum.createdByFirstName, &forum.createdBySurname, &forum.updatedByFirstName, &forum.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, forum)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of ForumsStore.
func New(selecterDatabase database.Database, deletorDatabase database.Database) (*ForumsStore, error) {
	forumsStore := &ForumsStore{
		selecterDatabase: selecterDatabase,
		deletorDatabase:  deletorDatabase,
	}
	return forumsStore, nil
}

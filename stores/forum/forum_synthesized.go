// Code generated by espal-store-synthesizer. DO NOT EDIT.
package forum

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ ForumEntity = &Forum{}

type ForumEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	ParentID() *string
	SetParentID(parentID *string)
	Name() string
	SetName(name string)
	TopicsCount() uint
	SetTopicsCount(topicsCount uint)
	PostsCount() uint
	SetPostsCount(postsCount uint)
	TopicsCountAsString() string
	PostsCountAsString() string
}

// TableName returns the table name that belongs to the current model.
func (forum *Forum) TableName() string {
	return "Forum"
}

// ID returns id.
func (forum *Forum) ID() string {
	return forum.id
}

// CreatedByID returns createdByID.
func (forum *Forum) CreatedByID() string {
	return forum.createdByID
}

// SetCreatedByID sets the createdByID.
func (forum *Forum) SetCreatedByID(createdByID string) {
	forum.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (forum *Forum) UpdatedByID() *string {
	return forum.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (forum *Forum) SetUpdatedByID(updatedByID *string) {
	forum.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (forum *Forum) CreatedAt() time.Time {
	return forum.createdAt
}

// SetCreatedAt sets the createdAt.
func (forum *Forum) SetCreatedAt(createdAt time.Time) {
	forum.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (forum *Forum) UpdatedAt() *time.Time {
	return forum.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (forum *Forum) SetUpdatedAt(updatedAt *time.Time) {
	forum.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (forum *Forum) CreatedByFirstName() *string {
	return forum.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (forum *Forum) SetCreatedByFirstName(createdByFirstName *string) {
	forum.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (forum *Forum) CreatedBySurname() *string {
	return forum.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (forum *Forum) SetCreatedBySurname(createdBySurname *string) {
	forum.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (forum *Forum) UpdatedByFirstName() *string {
	return forum.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (forum *Forum) SetUpdatedByFirstName(updatedByFirstName *string) {
	forum.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (forum *Forum) UpdatedBySurname() *string {
	return forum.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (forum *Forum) SetUpdatedBySurname(updatedBySurname *string) {
	forum.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (forum *Forum) IsUpdated() bool {
	return forum.updatedByID != nil
}

// Active returns active.
func (forum *Forum) Active() bool {
	return forum.active
}

// SetActive sets the active.
func (forum *Forum) SetActive(active bool) {
	forum.active = active
}

// Sorting returns sorting.
func (forum *Forum) Sorting() uint {
	return forum.sorting
}

// SetSorting sets the sorting.
func (forum *Forum) SetSorting(sorting uint) {
	forum.sorting = sorting
}

// ParentID returns parentID.
func (forum *Forum) ParentID() *string {
	return forum.parentID
}

// SetParentID sets the parentID.
func (forum *Forum) SetParentID(parentID *string) {
	forum.parentID = parentID
}

// Name returns name.
func (forum *Forum) Name() string {
	return forum.name
}

// SetName sets the name.
func (forum *Forum) SetName(name string) {
	forum.name = name
}

// TopicsCount returns topicsCount.
func (forum *Forum) TopicsCount() uint {
	return forum.topicsCount
}

// SetTopicsCount sets the topicsCount.
func (forum *Forum) SetTopicsCount(topicsCount uint) {
	forum.topicsCount = topicsCount
}

// PostsCount returns postsCount.
func (forum *Forum) PostsCount() uint {
	return forum.postsCount
}

// SetPostsCount sets the postsCount.
func (forum *Forum) SetPostsCount(postsCount uint) {
	forum.postsCount = postsCount
}

func newForum() *Forum {
	return &Forum{}
}

// New returns a new instance of ForumEntity.
func NewForumEntity() ForumEntity {
	return newForum()
}

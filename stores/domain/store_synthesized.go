// Code generated by espal-store-synthesizer. DO NOT EDIT.
package domain

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/espal-digital-development/espal-core/database/filters"
	"github.com/juju/errors"
	"sync"
)

var _ Store = &DomainsStore{}

// Store represents a data interaction object.
type Store interface {
	GetOne(id string) (*Domain, bool, error)
	All() ([]*Domain, bool, error)
	GetOneByIDWithCreator(id string) (*Domain, bool, error)
	GetOneActiveByHost(host string) (*Domain, bool, error)
	Delete(ids []string) error
	ToggleActive(ids []string) error
	Filter(context filters.QueryReader) (result []*Domain, filter filters.Filter, err error)
}

func (domainsStore *DomainsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Domain, ok bool, err error) {
	rows, err := domainsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Domain, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		domain := newDomain()
		fields := []interface{}{&domain.id, &domain.createdByID, &domain.updatedByID, &domain.siteID, &domain.createdAt, &domain.updatedAt, &domain.active, &domain.host, &domain.language, &domain.currencies}
		if withCreators {
			fields = append(fields, &domain.createdByFirstName, &domain.createdBySurname, &domain.updatedByFirstName, &domain.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, domain)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of DomainsStore.
func New(selecterDatabase database.Database, updaterDatabase database.Database, deletorDatabase database.Database, databaseFiltersFactory filters.Factory) (*DomainsStore, error) {
	domainsStore := &DomainsStore{
		selecterDatabase:       selecterDatabase,
		updaterDatabase:        updaterDatabase,
		deletorDatabase:        deletorDatabase,
		databaseFiltersFactory: databaseFiltersFactory,
		domainsNormal:          make(map[string]*Domain),
		mutex:                  &sync.RWMutex{},
	}
	return domainsStore, nil
}

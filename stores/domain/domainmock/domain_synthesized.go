// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domainmock

import (
	"github.com/espal-digital-development/espal-core/stores/domain"
	"sync"
	"time"
)

var (
	lockDomainEntityMockActive                 sync.RWMutex
	lockDomainEntityMockCreatedAt              sync.RWMutex
	lockDomainEntityMockCreatedByFirstName     sync.RWMutex
	lockDomainEntityMockCreatedByID            sync.RWMutex
	lockDomainEntityMockCreatedBySurname       sync.RWMutex
	lockDomainEntityMockCurrencies             sync.RWMutex
	lockDomainEntityMockCurrenciesCount        sync.RWMutex
	lockDomainEntityMockHost                   sync.RWMutex
	lockDomainEntityMockHostWithProtocol       sync.RWMutex
	lockDomainEntityMockHostWithProtocolAndWWW sync.RWMutex
	lockDomainEntityMockID                     sync.RWMutex
	lockDomainEntityMockIsUpdated              sync.RWMutex
	lockDomainEntityMockLanguage               sync.RWMutex
	lockDomainEntityMockLocalizedName          sync.RWMutex
	lockDomainEntityMockSetActive              sync.RWMutex
	lockDomainEntityMockSetCreatedAt           sync.RWMutex
	lockDomainEntityMockSetCreatedByFirstName  sync.RWMutex
	lockDomainEntityMockSetCreatedByID         sync.RWMutex
	lockDomainEntityMockSetCreatedBySurname    sync.RWMutex
	lockDomainEntityMockSetCurrencies          sync.RWMutex
	lockDomainEntityMockSetHost                sync.RWMutex
	lockDomainEntityMockSetLanguage            sync.RWMutex
	lockDomainEntityMockSetLocalizedName       sync.RWMutex
	lockDomainEntityMockSetSiteID              sync.RWMutex
	lockDomainEntityMockSetUpdatedAt           sync.RWMutex
	lockDomainEntityMockSetUpdatedByFirstName  sync.RWMutex
	lockDomainEntityMockSetUpdatedByID         sync.RWMutex
	lockDomainEntityMockSetUpdatedBySurname    sync.RWMutex
	lockDomainEntityMockSiteID                 sync.RWMutex
	lockDomainEntityMockTableAlias             sync.RWMutex
	lockDomainEntityMockTableName              sync.RWMutex
	lockDomainEntityMockUpdatedAt              sync.RWMutex
	lockDomainEntityMockUpdatedByFirstName     sync.RWMutex
	lockDomainEntityMockUpdatedByID            sync.RWMutex
	lockDomainEntityMockUpdatedBySurname       sync.RWMutex
)

// Ensure, that DomainEntityMock does implement domain.DomainEntity.
// If this is not the case, regenerate this file with moq.
var _ domain.DomainEntity = &DomainEntityMock{}

// DomainEntityMock is a mock implementation of domain.DomainEntity.
//
//     func TestSomethingThatUsesDomainEntity(t *testing.T) {
//
//         // make and configure a mocked domain.DomainEntity
//         mockedDomainEntity := &DomainEntityMock{
//             ActiveFunc: func() bool {
// 	               panic("mock out the Active method")
//             },
//             CreatedAtFunc: func() time.Time {
// 	               panic("mock out the CreatedAt method")
//             },
//             CreatedByFirstNameFunc: func() *string {
// 	               panic("mock out the CreatedByFirstName method")
//             },
//             CreatedByIDFunc: func() string {
// 	               panic("mock out the CreatedByID method")
//             },
//             CreatedBySurnameFunc: func() *string {
// 	               panic("mock out the CreatedBySurname method")
//             },
//             CurrenciesFunc: func() string {
// 	               panic("mock out the Currencies method")
//             },
//             CurrenciesCountFunc: func() uint {
// 	               panic("mock out the CurrenciesCount method")
//             },
//             HostFunc: func() string {
// 	               panic("mock out the Host method")
//             },
//             HostWithProtocolFunc: func() string {
// 	               panic("mock out the HostWithProtocol method")
//             },
//             HostWithProtocolAndWWWFunc: func() string {
// 	               panic("mock out the HostWithProtocolAndWWW method")
//             },
//             IDFunc: func() string {
// 	               panic("mock out the ID method")
//             },
//             IsUpdatedFunc: func() bool {
// 	               panic("mock out the IsUpdated method")
//             },
//             LanguageFunc: func() *uint16 {
// 	               panic("mock out the Language method")
//             },
//             LocalizedNameFunc: func() *string {
// 	               panic("mock out the LocalizedName method")
//             },
//             SetActiveFunc: func(active bool)  {
// 	               panic("mock out the SetActive method")
//             },
//             SetCreatedAtFunc: func(createdAt time.Time)  {
// 	               panic("mock out the SetCreatedAt method")
//             },
//             SetCreatedByFirstNameFunc: func(updatedByFirstName *string)  {
// 	               panic("mock out the SetCreatedByFirstName method")
//             },
//             SetCreatedByIDFunc: func(createdByID string)  {
// 	               panic("mock out the SetCreatedByID method")
//             },
//             SetCreatedBySurnameFunc: func(createdBySurname *string)  {
// 	               panic("mock out the SetCreatedBySurname method")
//             },
//             SetCurrenciesFunc: func(currencies string)  {
// 	               panic("mock out the SetCurrencies method")
//             },
//             SetHostFunc: func(host string)  {
// 	               panic("mock out the SetHost method")
//             },
//             SetLanguageFunc: func(language *uint16)  {
// 	               panic("mock out the SetLanguage method")
//             },
//             SetLocalizedNameFunc: func(localizedName *string)  {
// 	               panic("mock out the SetLocalizedName method")
//             },
//             SetSiteIDFunc: func(siteID string)  {
// 	               panic("mock out the SetSiteID method")
//             },
//             SetUpdatedAtFunc: func(updatedAt *time.Time)  {
// 	               panic("mock out the SetUpdatedAt method")
//             },
//             SetUpdatedByFirstNameFunc: func(updatedByFirstName *string)  {
// 	               panic("mock out the SetUpdatedByFirstName method")
//             },
//             SetUpdatedByIDFunc: func(updatedByID *string)  {
// 	               panic("mock out the SetUpdatedByID method")
//             },
//             SetUpdatedBySurnameFunc: func(updatedBySurname *string)  {
// 	               panic("mock out the SetUpdatedBySurname method")
//             },
//             SiteIDFunc: func() string {
// 	               panic("mock out the SiteID method")
//             },
//             TableAliasFunc: func() string {
// 	               panic("mock out the TableAlias method")
//             },
//             TableNameFunc: func() string {
// 	               panic("mock out the TableName method")
//             },
//             UpdatedAtFunc: func() *time.Time {
// 	               panic("mock out the UpdatedAt method")
//             },
//             UpdatedByFirstNameFunc: func() *string {
// 	               panic("mock out the UpdatedByFirstName method")
//             },
//             UpdatedByIDFunc: func() *string {
// 	               panic("mock out the UpdatedByID method")
//             },
//             UpdatedBySurnameFunc: func() *string {
// 	               panic("mock out the UpdatedBySurname method")
//             },
//         }
//
//         // use mockedDomainEntity in code that requires domain.DomainEntity
//         // and then make assertions.
//
//     }
type DomainEntityMock struct {
	// ActiveFunc mocks the Active method.
	ActiveFunc func() bool

	// CreatedAtFunc mocks the CreatedAt method.
	CreatedAtFunc func() time.Time

	// CreatedByFirstNameFunc mocks the CreatedByFirstName method.
	CreatedByFirstNameFunc func() *string

	// CreatedByIDFunc mocks the CreatedByID method.
	CreatedByIDFunc func() string

	// CreatedBySurnameFunc mocks the CreatedBySurname method.
	CreatedBySurnameFunc func() *string

	// CurrenciesFunc mocks the Currencies method.
	CurrenciesFunc func() string

	// CurrenciesCountFunc mocks the CurrenciesCount method.
	CurrenciesCountFunc func() uint

	// HostFunc mocks the Host method.
	HostFunc func() string

	// HostWithProtocolFunc mocks the HostWithProtocol method.
	HostWithProtocolFunc func() string

	// HostWithProtocolAndWWWFunc mocks the HostWithProtocolAndWWW method.
	HostWithProtocolAndWWWFunc func() string

	// IDFunc mocks the ID method.
	IDFunc func() string

	// IsUpdatedFunc mocks the IsUpdated method.
	IsUpdatedFunc func() bool

	// LanguageFunc mocks the Language method.
	LanguageFunc func() *uint16

	// LocalizedNameFunc mocks the LocalizedName method.
	LocalizedNameFunc func() *string

	// SetActiveFunc mocks the SetActive method.
	SetActiveFunc func(active bool)

	// SetCreatedAtFunc mocks the SetCreatedAt method.
	SetCreatedAtFunc func(createdAt time.Time)

	// SetCreatedByFirstNameFunc mocks the SetCreatedByFirstName method.
	SetCreatedByFirstNameFunc func(updatedByFirstName *string)

	// SetCreatedByIDFunc mocks the SetCreatedByID method.
	SetCreatedByIDFunc func(createdByID string)

	// SetCreatedBySurnameFunc mocks the SetCreatedBySurname method.
	SetCreatedBySurnameFunc func(createdBySurname *string)

	// SetCurrenciesFunc mocks the SetCurrencies method.
	SetCurrenciesFunc func(currencies string)

	// SetHostFunc mocks the SetHost method.
	SetHostFunc func(host string)

	// SetLanguageFunc mocks the SetLanguage method.
	SetLanguageFunc func(language *uint16)

	// SetLocalizedNameFunc mocks the SetLocalizedName method.
	SetLocalizedNameFunc func(localizedName *string)

	// SetSiteIDFunc mocks the SetSiteID method.
	SetSiteIDFunc func(siteID string)

	// SetUpdatedAtFunc mocks the SetUpdatedAt method.
	SetUpdatedAtFunc func(updatedAt *time.Time)

	// SetUpdatedByFirstNameFunc mocks the SetUpdatedByFirstName method.
	SetUpdatedByFirstNameFunc func(updatedByFirstName *string)

	// SetUpdatedByIDFunc mocks the SetUpdatedByID method.
	SetUpdatedByIDFunc func(updatedByID *string)

	// SetUpdatedBySurnameFunc mocks the SetUpdatedBySurname method.
	SetUpdatedBySurnameFunc func(updatedBySurname *string)

	// SiteIDFunc mocks the SiteID method.
	SiteIDFunc func() string

	// TableAliasFunc mocks the TableAlias method.
	TableAliasFunc func() string

	// TableNameFunc mocks the TableName method.
	TableNameFunc func() string

	// UpdatedAtFunc mocks the UpdatedAt method.
	UpdatedAtFunc func() *time.Time

	// UpdatedByFirstNameFunc mocks the UpdatedByFirstName method.
	UpdatedByFirstNameFunc func() *string

	// UpdatedByIDFunc mocks the UpdatedByID method.
	UpdatedByIDFunc func() *string

	// UpdatedBySurnameFunc mocks the UpdatedBySurname method.
	UpdatedBySurnameFunc func() *string

	// calls tracks calls to the methods.
	calls struct {
		// Active holds details about calls to the Active method.
		Active []struct {
		}
		// CreatedAt holds details about calls to the CreatedAt method.
		CreatedAt []struct {
		}
		// CreatedByFirstName holds details about calls to the CreatedByFirstName method.
		CreatedByFirstName []struct {
		}
		// CreatedByID holds details about calls to the CreatedByID method.
		CreatedByID []struct {
		}
		// CreatedBySurname holds details about calls to the CreatedBySurname method.
		CreatedBySurname []struct {
		}
		// Currencies holds details about calls to the Currencies method.
		Currencies []struct {
		}
		// CurrenciesCount holds details about calls to the CurrenciesCount method.
		CurrenciesCount []struct {
		}
		// Host holds details about calls to the Host method.
		Host []struct {
		}
		// HostWithProtocol holds details about calls to the HostWithProtocol method.
		HostWithProtocol []struct {
		}
		// HostWithProtocolAndWWW holds details about calls to the HostWithProtocolAndWWW method.
		HostWithProtocolAndWWW []struct {
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// IsUpdated holds details about calls to the IsUpdated method.
		IsUpdated []struct {
		}
		// Language holds details about calls to the Language method.
		Language []struct {
		}
		// LocalizedName holds details about calls to the LocalizedName method.
		LocalizedName []struct {
		}
		// SetActive holds details about calls to the SetActive method.
		SetActive []struct {
			// Active is the active argument value.
			Active bool
		}
		// SetCreatedAt holds details about calls to the SetCreatedAt method.
		SetCreatedAt []struct {
			// CreatedAt is the createdAt argument value.
			CreatedAt time.Time
		}
		// SetCreatedByFirstName holds details about calls to the SetCreatedByFirstName method.
		SetCreatedByFirstName []struct {
			// UpdatedByFirstName is the updatedByFirstName argument value.
			UpdatedByFirstName *string
		}
		// SetCreatedByID holds details about calls to the SetCreatedByID method.
		SetCreatedByID []struct {
			// CreatedByID is the createdByID argument value.
			CreatedByID string
		}
		// SetCreatedBySurname holds details about calls to the SetCreatedBySurname method.
		SetCreatedBySurname []struct {
			// CreatedBySurname is the createdBySurname argument value.
			CreatedBySurname *string
		}
		// SetCurrencies holds details about calls to the SetCurrencies method.
		SetCurrencies []struct {
			// Currencies is the currencies argument value.
			Currencies string
		}
		// SetHost holds details about calls to the SetHost method.
		SetHost []struct {
			// Host is the host argument value.
			Host string
		}
		// SetLanguage holds details about calls to the SetLanguage method.
		SetLanguage []struct {
			// Language is the language argument value.
			Language *uint16
		}
		// SetLocalizedName holds details about calls to the SetLocalizedName method.
		SetLocalizedName []struct {
			// LocalizedName is the localizedName argument value.
			LocalizedName *string
		}
		// SetSiteID holds details about calls to the SetSiteID method.
		SetSiteID []struct {
			// SiteID is the siteID argument value.
			SiteID string
		}
		// SetUpdatedAt holds details about calls to the SetUpdatedAt method.
		SetUpdatedAt []struct {
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt *time.Time
		}
		// SetUpdatedByFirstName holds details about calls to the SetUpdatedByFirstName method.
		SetUpdatedByFirstName []struct {
			// UpdatedByFirstName is the updatedByFirstName argument value.
			UpdatedByFirstName *string
		}
		// SetUpdatedByID holds details about calls to the SetUpdatedByID method.
		SetUpdatedByID []struct {
			// UpdatedByID is the updatedByID argument value.
			UpdatedByID *string
		}
		// SetUpdatedBySurname holds details about calls to the SetUpdatedBySurname method.
		SetUpdatedBySurname []struct {
			// UpdatedBySurname is the updatedBySurname argument value.
			UpdatedBySurname *string
		}
		// SiteID holds details about calls to the SiteID method.
		SiteID []struct {
		}
		// TableAlias holds details about calls to the TableAlias method.
		TableAlias []struct {
		}
		// TableName holds details about calls to the TableName method.
		TableName []struct {
		}
		// UpdatedAt holds details about calls to the UpdatedAt method.
		UpdatedAt []struct {
		}
		// UpdatedByFirstName holds details about calls to the UpdatedByFirstName method.
		UpdatedByFirstName []struct {
		}
		// UpdatedByID holds details about calls to the UpdatedByID method.
		UpdatedByID []struct {
		}
		// UpdatedBySurname holds details about calls to the UpdatedBySurname method.
		UpdatedBySurname []struct {
		}
	}
}

// Active calls ActiveFunc.
func (mock *DomainEntityMock) Active() bool {
	if mock.ActiveFunc == nil {
		panic("DomainEntityMock.ActiveFunc: method is nil but DomainEntity.Active was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockActive.Lock()
	mock.calls.Active = append(mock.calls.Active, callInfo)
	lockDomainEntityMockActive.Unlock()
	return mock.ActiveFunc()
}

// ActiveCalls gets all the calls that were made to Active.
// Check the length with:
//     len(mockedDomainEntity.ActiveCalls())
func (mock *DomainEntityMock) ActiveCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockActive.RLock()
	calls = mock.calls.Active
	lockDomainEntityMockActive.RUnlock()
	return calls
}

// CreatedAt calls CreatedAtFunc.
func (mock *DomainEntityMock) CreatedAt() time.Time {
	if mock.CreatedAtFunc == nil {
		panic("DomainEntityMock.CreatedAtFunc: method is nil but DomainEntity.CreatedAt was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockCreatedAt.Lock()
	mock.calls.CreatedAt = append(mock.calls.CreatedAt, callInfo)
	lockDomainEntityMockCreatedAt.Unlock()
	return mock.CreatedAtFunc()
}

// CreatedAtCalls gets all the calls that were made to CreatedAt.
// Check the length with:
//     len(mockedDomainEntity.CreatedAtCalls())
func (mock *DomainEntityMock) CreatedAtCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockCreatedAt.RLock()
	calls = mock.calls.CreatedAt
	lockDomainEntityMockCreatedAt.RUnlock()
	return calls
}

// CreatedByFirstName calls CreatedByFirstNameFunc.
func (mock *DomainEntityMock) CreatedByFirstName() *string {
	if mock.CreatedByFirstNameFunc == nil {
		panic("DomainEntityMock.CreatedByFirstNameFunc: method is nil but DomainEntity.CreatedByFirstName was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockCreatedByFirstName.Lock()
	mock.calls.CreatedByFirstName = append(mock.calls.CreatedByFirstName, callInfo)
	lockDomainEntityMockCreatedByFirstName.Unlock()
	return mock.CreatedByFirstNameFunc()
}

// CreatedByFirstNameCalls gets all the calls that were made to CreatedByFirstName.
// Check the length with:
//     len(mockedDomainEntity.CreatedByFirstNameCalls())
func (mock *DomainEntityMock) CreatedByFirstNameCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockCreatedByFirstName.RLock()
	calls = mock.calls.CreatedByFirstName
	lockDomainEntityMockCreatedByFirstName.RUnlock()
	return calls
}

// CreatedByID calls CreatedByIDFunc.
func (mock *DomainEntityMock) CreatedByID() string {
	if mock.CreatedByIDFunc == nil {
		panic("DomainEntityMock.CreatedByIDFunc: method is nil but DomainEntity.CreatedByID was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockCreatedByID.Lock()
	mock.calls.CreatedByID = append(mock.calls.CreatedByID, callInfo)
	lockDomainEntityMockCreatedByID.Unlock()
	return mock.CreatedByIDFunc()
}

// CreatedByIDCalls gets all the calls that were made to CreatedByID.
// Check the length with:
//     len(mockedDomainEntity.CreatedByIDCalls())
func (mock *DomainEntityMock) CreatedByIDCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockCreatedByID.RLock()
	calls = mock.calls.CreatedByID
	lockDomainEntityMockCreatedByID.RUnlock()
	return calls
}

// CreatedBySurname calls CreatedBySurnameFunc.
func (mock *DomainEntityMock) CreatedBySurname() *string {
	if mock.CreatedBySurnameFunc == nil {
		panic("DomainEntityMock.CreatedBySurnameFunc: method is nil but DomainEntity.CreatedBySurname was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockCreatedBySurname.Lock()
	mock.calls.CreatedBySurname = append(mock.calls.CreatedBySurname, callInfo)
	lockDomainEntityMockCreatedBySurname.Unlock()
	return mock.CreatedBySurnameFunc()
}

// CreatedBySurnameCalls gets all the calls that were made to CreatedBySurname.
// Check the length with:
//     len(mockedDomainEntity.CreatedBySurnameCalls())
func (mock *DomainEntityMock) CreatedBySurnameCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockCreatedBySurname.RLock()
	calls = mock.calls.CreatedBySurname
	lockDomainEntityMockCreatedBySurname.RUnlock()
	return calls
}

// Currencies calls CurrenciesFunc.
func (mock *DomainEntityMock) Currencies() string {
	if mock.CurrenciesFunc == nil {
		panic("DomainEntityMock.CurrenciesFunc: method is nil but DomainEntity.Currencies was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockCurrencies.Lock()
	mock.calls.Currencies = append(mock.calls.Currencies, callInfo)
	lockDomainEntityMockCurrencies.Unlock()
	return mock.CurrenciesFunc()
}

// CurrenciesCalls gets all the calls that were made to Currencies.
// Check the length with:
//     len(mockedDomainEntity.CurrenciesCalls())
func (mock *DomainEntityMock) CurrenciesCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockCurrencies.RLock()
	calls = mock.calls.Currencies
	lockDomainEntityMockCurrencies.RUnlock()
	return calls
}

// CurrenciesCount calls CurrenciesCountFunc.
func (mock *DomainEntityMock) CurrenciesCount() uint {
	if mock.CurrenciesCountFunc == nil {
		panic("DomainEntityMock.CurrenciesCountFunc: method is nil but DomainEntity.CurrenciesCount was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockCurrenciesCount.Lock()
	mock.calls.CurrenciesCount = append(mock.calls.CurrenciesCount, callInfo)
	lockDomainEntityMockCurrenciesCount.Unlock()
	return mock.CurrenciesCountFunc()
}

// CurrenciesCountCalls gets all the calls that were made to CurrenciesCount.
// Check the length with:
//     len(mockedDomainEntity.CurrenciesCountCalls())
func (mock *DomainEntityMock) CurrenciesCountCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockCurrenciesCount.RLock()
	calls = mock.calls.CurrenciesCount
	lockDomainEntityMockCurrenciesCount.RUnlock()
	return calls
}

// Host calls HostFunc.
func (mock *DomainEntityMock) Host() string {
	if mock.HostFunc == nil {
		panic("DomainEntityMock.HostFunc: method is nil but DomainEntity.Host was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockHost.Lock()
	mock.calls.Host = append(mock.calls.Host, callInfo)
	lockDomainEntityMockHost.Unlock()
	return mock.HostFunc()
}

// HostCalls gets all the calls that were made to Host.
// Check the length with:
//     len(mockedDomainEntity.HostCalls())
func (mock *DomainEntityMock) HostCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockHost.RLock()
	calls = mock.calls.Host
	lockDomainEntityMockHost.RUnlock()
	return calls
}

// HostWithProtocol calls HostWithProtocolFunc.
func (mock *DomainEntityMock) HostWithProtocol() string {
	if mock.HostWithProtocolFunc == nil {
		panic("DomainEntityMock.HostWithProtocolFunc: method is nil but DomainEntity.HostWithProtocol was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockHostWithProtocol.Lock()
	mock.calls.HostWithProtocol = append(mock.calls.HostWithProtocol, callInfo)
	lockDomainEntityMockHostWithProtocol.Unlock()
	return mock.HostWithProtocolFunc()
}

// HostWithProtocolCalls gets all the calls that were made to HostWithProtocol.
// Check the length with:
//     len(mockedDomainEntity.HostWithProtocolCalls())
func (mock *DomainEntityMock) HostWithProtocolCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockHostWithProtocol.RLock()
	calls = mock.calls.HostWithProtocol
	lockDomainEntityMockHostWithProtocol.RUnlock()
	return calls
}

// HostWithProtocolAndWWW calls HostWithProtocolAndWWWFunc.
func (mock *DomainEntityMock) HostWithProtocolAndWWW() string {
	if mock.HostWithProtocolAndWWWFunc == nil {
		panic("DomainEntityMock.HostWithProtocolAndWWWFunc: method is nil but DomainEntity.HostWithProtocolAndWWW was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockHostWithProtocolAndWWW.Lock()
	mock.calls.HostWithProtocolAndWWW = append(mock.calls.HostWithProtocolAndWWW, callInfo)
	lockDomainEntityMockHostWithProtocolAndWWW.Unlock()
	return mock.HostWithProtocolAndWWWFunc()
}

// HostWithProtocolAndWWWCalls gets all the calls that were made to HostWithProtocolAndWWW.
// Check the length with:
//     len(mockedDomainEntity.HostWithProtocolAndWWWCalls())
func (mock *DomainEntityMock) HostWithProtocolAndWWWCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockHostWithProtocolAndWWW.RLock()
	calls = mock.calls.HostWithProtocolAndWWW
	lockDomainEntityMockHostWithProtocolAndWWW.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *DomainEntityMock) ID() string {
	if mock.IDFunc == nil {
		panic("DomainEntityMock.IDFunc: method is nil but DomainEntity.ID was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	lockDomainEntityMockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//     len(mockedDomainEntity.IDCalls())
func (mock *DomainEntityMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockID.RLock()
	calls = mock.calls.ID
	lockDomainEntityMockID.RUnlock()
	return calls
}

// IsUpdated calls IsUpdatedFunc.
func (mock *DomainEntityMock) IsUpdated() bool {
	if mock.IsUpdatedFunc == nil {
		panic("DomainEntityMock.IsUpdatedFunc: method is nil but DomainEntity.IsUpdated was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockIsUpdated.Lock()
	mock.calls.IsUpdated = append(mock.calls.IsUpdated, callInfo)
	lockDomainEntityMockIsUpdated.Unlock()
	return mock.IsUpdatedFunc()
}

// IsUpdatedCalls gets all the calls that were made to IsUpdated.
// Check the length with:
//     len(mockedDomainEntity.IsUpdatedCalls())
func (mock *DomainEntityMock) IsUpdatedCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockIsUpdated.RLock()
	calls = mock.calls.IsUpdated
	lockDomainEntityMockIsUpdated.RUnlock()
	return calls
}

// Language calls LanguageFunc.
func (mock *DomainEntityMock) Language() *uint16 {
	if mock.LanguageFunc == nil {
		panic("DomainEntityMock.LanguageFunc: method is nil but DomainEntity.Language was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockLanguage.Lock()
	mock.calls.Language = append(mock.calls.Language, callInfo)
	lockDomainEntityMockLanguage.Unlock()
	return mock.LanguageFunc()
}

// LanguageCalls gets all the calls that were made to Language.
// Check the length with:
//     len(mockedDomainEntity.LanguageCalls())
func (mock *DomainEntityMock) LanguageCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockLanguage.RLock()
	calls = mock.calls.Language
	lockDomainEntityMockLanguage.RUnlock()
	return calls
}

// LocalizedName calls LocalizedNameFunc.
func (mock *DomainEntityMock) LocalizedName() *string {
	if mock.LocalizedNameFunc == nil {
		panic("DomainEntityMock.LocalizedNameFunc: method is nil but DomainEntity.LocalizedName was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockLocalizedName.Lock()
	mock.calls.LocalizedName = append(mock.calls.LocalizedName, callInfo)
	lockDomainEntityMockLocalizedName.Unlock()
	return mock.LocalizedNameFunc()
}

// LocalizedNameCalls gets all the calls that were made to LocalizedName.
// Check the length with:
//     len(mockedDomainEntity.LocalizedNameCalls())
func (mock *DomainEntityMock) LocalizedNameCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockLocalizedName.RLock()
	calls = mock.calls.LocalizedName
	lockDomainEntityMockLocalizedName.RUnlock()
	return calls
}

// SetActive calls SetActiveFunc.
func (mock *DomainEntityMock) SetActive(active bool) {
	if mock.SetActiveFunc == nil {
		panic("DomainEntityMock.SetActiveFunc: method is nil but DomainEntity.SetActive was just called")
	}
	callInfo := struct {
		Active bool
	}{
		Active: active,
	}
	lockDomainEntityMockSetActive.Lock()
	mock.calls.SetActive = append(mock.calls.SetActive, callInfo)
	lockDomainEntityMockSetActive.Unlock()
	mock.SetActiveFunc(active)
}

// SetActiveCalls gets all the calls that were made to SetActive.
// Check the length with:
//     len(mockedDomainEntity.SetActiveCalls())
func (mock *DomainEntityMock) SetActiveCalls() []struct {
	Active bool
} {
	var calls []struct {
		Active bool
	}
	lockDomainEntityMockSetActive.RLock()
	calls = mock.calls.SetActive
	lockDomainEntityMockSetActive.RUnlock()
	return calls
}

// SetCreatedAt calls SetCreatedAtFunc.
func (mock *DomainEntityMock) SetCreatedAt(createdAt time.Time) {
	if mock.SetCreatedAtFunc == nil {
		panic("DomainEntityMock.SetCreatedAtFunc: method is nil but DomainEntity.SetCreatedAt was just called")
	}
	callInfo := struct {
		CreatedAt time.Time
	}{
		CreatedAt: createdAt,
	}
	lockDomainEntityMockSetCreatedAt.Lock()
	mock.calls.SetCreatedAt = append(mock.calls.SetCreatedAt, callInfo)
	lockDomainEntityMockSetCreatedAt.Unlock()
	mock.SetCreatedAtFunc(createdAt)
}

// SetCreatedAtCalls gets all the calls that were made to SetCreatedAt.
// Check the length with:
//     len(mockedDomainEntity.SetCreatedAtCalls())
func (mock *DomainEntityMock) SetCreatedAtCalls() []struct {
	CreatedAt time.Time
} {
	var calls []struct {
		CreatedAt time.Time
	}
	lockDomainEntityMockSetCreatedAt.RLock()
	calls = mock.calls.SetCreatedAt
	lockDomainEntityMockSetCreatedAt.RUnlock()
	return calls
}

// SetCreatedByFirstName calls SetCreatedByFirstNameFunc.
func (mock *DomainEntityMock) SetCreatedByFirstName(updatedByFirstName *string) {
	if mock.SetCreatedByFirstNameFunc == nil {
		panic("DomainEntityMock.SetCreatedByFirstNameFunc: method is nil but DomainEntity.SetCreatedByFirstName was just called")
	}
	callInfo := struct {
		UpdatedByFirstName *string
	}{
		UpdatedByFirstName: updatedByFirstName,
	}
	lockDomainEntityMockSetCreatedByFirstName.Lock()
	mock.calls.SetCreatedByFirstName = append(mock.calls.SetCreatedByFirstName, callInfo)
	lockDomainEntityMockSetCreatedByFirstName.Unlock()
	mock.SetCreatedByFirstNameFunc(updatedByFirstName)
}

// SetCreatedByFirstNameCalls gets all the calls that were made to SetCreatedByFirstName.
// Check the length with:
//     len(mockedDomainEntity.SetCreatedByFirstNameCalls())
func (mock *DomainEntityMock) SetCreatedByFirstNameCalls() []struct {
	UpdatedByFirstName *string
} {
	var calls []struct {
		UpdatedByFirstName *string
	}
	lockDomainEntityMockSetCreatedByFirstName.RLock()
	calls = mock.calls.SetCreatedByFirstName
	lockDomainEntityMockSetCreatedByFirstName.RUnlock()
	return calls
}

// SetCreatedByID calls SetCreatedByIDFunc.
func (mock *DomainEntityMock) SetCreatedByID(createdByID string) {
	if mock.SetCreatedByIDFunc == nil {
		panic("DomainEntityMock.SetCreatedByIDFunc: method is nil but DomainEntity.SetCreatedByID was just called")
	}
	callInfo := struct {
		CreatedByID string
	}{
		CreatedByID: createdByID,
	}
	lockDomainEntityMockSetCreatedByID.Lock()
	mock.calls.SetCreatedByID = append(mock.calls.SetCreatedByID, callInfo)
	lockDomainEntityMockSetCreatedByID.Unlock()
	mock.SetCreatedByIDFunc(createdByID)
}

// SetCreatedByIDCalls gets all the calls that were made to SetCreatedByID.
// Check the length with:
//     len(mockedDomainEntity.SetCreatedByIDCalls())
func (mock *DomainEntityMock) SetCreatedByIDCalls() []struct {
	CreatedByID string
} {
	var calls []struct {
		CreatedByID string
	}
	lockDomainEntityMockSetCreatedByID.RLock()
	calls = mock.calls.SetCreatedByID
	lockDomainEntityMockSetCreatedByID.RUnlock()
	return calls
}

// SetCreatedBySurname calls SetCreatedBySurnameFunc.
func (mock *DomainEntityMock) SetCreatedBySurname(createdBySurname *string) {
	if mock.SetCreatedBySurnameFunc == nil {
		panic("DomainEntityMock.SetCreatedBySurnameFunc: method is nil but DomainEntity.SetCreatedBySurname was just called")
	}
	callInfo := struct {
		CreatedBySurname *string
	}{
		CreatedBySurname: createdBySurname,
	}
	lockDomainEntityMockSetCreatedBySurname.Lock()
	mock.calls.SetCreatedBySurname = append(mock.calls.SetCreatedBySurname, callInfo)
	lockDomainEntityMockSetCreatedBySurname.Unlock()
	mock.SetCreatedBySurnameFunc(createdBySurname)
}

// SetCreatedBySurnameCalls gets all the calls that were made to SetCreatedBySurname.
// Check the length with:
//     len(mockedDomainEntity.SetCreatedBySurnameCalls())
func (mock *DomainEntityMock) SetCreatedBySurnameCalls() []struct {
	CreatedBySurname *string
} {
	var calls []struct {
		CreatedBySurname *string
	}
	lockDomainEntityMockSetCreatedBySurname.RLock()
	calls = mock.calls.SetCreatedBySurname
	lockDomainEntityMockSetCreatedBySurname.RUnlock()
	return calls
}

// SetCurrencies calls SetCurrenciesFunc.
func (mock *DomainEntityMock) SetCurrencies(currencies string) {
	if mock.SetCurrenciesFunc == nil {
		panic("DomainEntityMock.SetCurrenciesFunc: method is nil but DomainEntity.SetCurrencies was just called")
	}
	callInfo := struct {
		Currencies string
	}{
		Currencies: currencies,
	}
	lockDomainEntityMockSetCurrencies.Lock()
	mock.calls.SetCurrencies = append(mock.calls.SetCurrencies, callInfo)
	lockDomainEntityMockSetCurrencies.Unlock()
	mock.SetCurrenciesFunc(currencies)
}

// SetCurrenciesCalls gets all the calls that were made to SetCurrencies.
// Check the length with:
//     len(mockedDomainEntity.SetCurrenciesCalls())
func (mock *DomainEntityMock) SetCurrenciesCalls() []struct {
	Currencies string
} {
	var calls []struct {
		Currencies string
	}
	lockDomainEntityMockSetCurrencies.RLock()
	calls = mock.calls.SetCurrencies
	lockDomainEntityMockSetCurrencies.RUnlock()
	return calls
}

// SetHost calls SetHostFunc.
func (mock *DomainEntityMock) SetHost(host string) {
	if mock.SetHostFunc == nil {
		panic("DomainEntityMock.SetHostFunc: method is nil but DomainEntity.SetHost was just called")
	}
	callInfo := struct {
		Host string
	}{
		Host: host,
	}
	lockDomainEntityMockSetHost.Lock()
	mock.calls.SetHost = append(mock.calls.SetHost, callInfo)
	lockDomainEntityMockSetHost.Unlock()
	mock.SetHostFunc(host)
}

// SetHostCalls gets all the calls that were made to SetHost.
// Check the length with:
//     len(mockedDomainEntity.SetHostCalls())
func (mock *DomainEntityMock) SetHostCalls() []struct {
	Host string
} {
	var calls []struct {
		Host string
	}
	lockDomainEntityMockSetHost.RLock()
	calls = mock.calls.SetHost
	lockDomainEntityMockSetHost.RUnlock()
	return calls
}

// SetLanguage calls SetLanguageFunc.
func (mock *DomainEntityMock) SetLanguage(language *uint16) {
	if mock.SetLanguageFunc == nil {
		panic("DomainEntityMock.SetLanguageFunc: method is nil but DomainEntity.SetLanguage was just called")
	}
	callInfo := struct {
		Language *uint16
	}{
		Language: language,
	}
	lockDomainEntityMockSetLanguage.Lock()
	mock.calls.SetLanguage = append(mock.calls.SetLanguage, callInfo)
	lockDomainEntityMockSetLanguage.Unlock()
	mock.SetLanguageFunc(language)
}

// SetLanguageCalls gets all the calls that were made to SetLanguage.
// Check the length with:
//     len(mockedDomainEntity.SetLanguageCalls())
func (mock *DomainEntityMock) SetLanguageCalls() []struct {
	Language *uint16
} {
	var calls []struct {
		Language *uint16
	}
	lockDomainEntityMockSetLanguage.RLock()
	calls = mock.calls.SetLanguage
	lockDomainEntityMockSetLanguage.RUnlock()
	return calls
}

// SetLocalizedName calls SetLocalizedNameFunc.
func (mock *DomainEntityMock) SetLocalizedName(localizedName *string) {
	if mock.SetLocalizedNameFunc == nil {
		panic("DomainEntityMock.SetLocalizedNameFunc: method is nil but DomainEntity.SetLocalizedName was just called")
	}
	callInfo := struct {
		LocalizedName *string
	}{
		LocalizedName: localizedName,
	}
	lockDomainEntityMockSetLocalizedName.Lock()
	mock.calls.SetLocalizedName = append(mock.calls.SetLocalizedName, callInfo)
	lockDomainEntityMockSetLocalizedName.Unlock()
	mock.SetLocalizedNameFunc(localizedName)
}

// SetLocalizedNameCalls gets all the calls that were made to SetLocalizedName.
// Check the length with:
//     len(mockedDomainEntity.SetLocalizedNameCalls())
func (mock *DomainEntityMock) SetLocalizedNameCalls() []struct {
	LocalizedName *string
} {
	var calls []struct {
		LocalizedName *string
	}
	lockDomainEntityMockSetLocalizedName.RLock()
	calls = mock.calls.SetLocalizedName
	lockDomainEntityMockSetLocalizedName.RUnlock()
	return calls
}

// SetSiteID calls SetSiteIDFunc.
func (mock *DomainEntityMock) SetSiteID(siteID string) {
	if mock.SetSiteIDFunc == nil {
		panic("DomainEntityMock.SetSiteIDFunc: method is nil but DomainEntity.SetSiteID was just called")
	}
	callInfo := struct {
		SiteID string
	}{
		SiteID: siteID,
	}
	lockDomainEntityMockSetSiteID.Lock()
	mock.calls.SetSiteID = append(mock.calls.SetSiteID, callInfo)
	lockDomainEntityMockSetSiteID.Unlock()
	mock.SetSiteIDFunc(siteID)
}

// SetSiteIDCalls gets all the calls that were made to SetSiteID.
// Check the length with:
//     len(mockedDomainEntity.SetSiteIDCalls())
func (mock *DomainEntityMock) SetSiteIDCalls() []struct {
	SiteID string
} {
	var calls []struct {
		SiteID string
	}
	lockDomainEntityMockSetSiteID.RLock()
	calls = mock.calls.SetSiteID
	lockDomainEntityMockSetSiteID.RUnlock()
	return calls
}

// SetUpdatedAt calls SetUpdatedAtFunc.
func (mock *DomainEntityMock) SetUpdatedAt(updatedAt *time.Time) {
	if mock.SetUpdatedAtFunc == nil {
		panic("DomainEntityMock.SetUpdatedAtFunc: method is nil but DomainEntity.SetUpdatedAt was just called")
	}
	callInfo := struct {
		UpdatedAt *time.Time
	}{
		UpdatedAt: updatedAt,
	}
	lockDomainEntityMockSetUpdatedAt.Lock()
	mock.calls.SetUpdatedAt = append(mock.calls.SetUpdatedAt, callInfo)
	lockDomainEntityMockSetUpdatedAt.Unlock()
	mock.SetUpdatedAtFunc(updatedAt)
}

// SetUpdatedAtCalls gets all the calls that were made to SetUpdatedAt.
// Check the length with:
//     len(mockedDomainEntity.SetUpdatedAtCalls())
func (mock *DomainEntityMock) SetUpdatedAtCalls() []struct {
	UpdatedAt *time.Time
} {
	var calls []struct {
		UpdatedAt *time.Time
	}
	lockDomainEntityMockSetUpdatedAt.RLock()
	calls = mock.calls.SetUpdatedAt
	lockDomainEntityMockSetUpdatedAt.RUnlock()
	return calls
}

// SetUpdatedByFirstName calls SetUpdatedByFirstNameFunc.
func (mock *DomainEntityMock) SetUpdatedByFirstName(updatedByFirstName *string) {
	if mock.SetUpdatedByFirstNameFunc == nil {
		panic("DomainEntityMock.SetUpdatedByFirstNameFunc: method is nil but DomainEntity.SetUpdatedByFirstName was just called")
	}
	callInfo := struct {
		UpdatedByFirstName *string
	}{
		UpdatedByFirstName: updatedByFirstName,
	}
	lockDomainEntityMockSetUpdatedByFirstName.Lock()
	mock.calls.SetUpdatedByFirstName = append(mock.calls.SetUpdatedByFirstName, callInfo)
	lockDomainEntityMockSetUpdatedByFirstName.Unlock()
	mock.SetUpdatedByFirstNameFunc(updatedByFirstName)
}

// SetUpdatedByFirstNameCalls gets all the calls that were made to SetUpdatedByFirstName.
// Check the length with:
//     len(mockedDomainEntity.SetUpdatedByFirstNameCalls())
func (mock *DomainEntityMock) SetUpdatedByFirstNameCalls() []struct {
	UpdatedByFirstName *string
} {
	var calls []struct {
		UpdatedByFirstName *string
	}
	lockDomainEntityMockSetUpdatedByFirstName.RLock()
	calls = mock.calls.SetUpdatedByFirstName
	lockDomainEntityMockSetUpdatedByFirstName.RUnlock()
	return calls
}

// SetUpdatedByID calls SetUpdatedByIDFunc.
func (mock *DomainEntityMock) SetUpdatedByID(updatedByID *string) {
	if mock.SetUpdatedByIDFunc == nil {
		panic("DomainEntityMock.SetUpdatedByIDFunc: method is nil but DomainEntity.SetUpdatedByID was just called")
	}
	callInfo := struct {
		UpdatedByID *string
	}{
		UpdatedByID: updatedByID,
	}
	lockDomainEntityMockSetUpdatedByID.Lock()
	mock.calls.SetUpdatedByID = append(mock.calls.SetUpdatedByID, callInfo)
	lockDomainEntityMockSetUpdatedByID.Unlock()
	mock.SetUpdatedByIDFunc(updatedByID)
}

// SetUpdatedByIDCalls gets all the calls that were made to SetUpdatedByID.
// Check the length with:
//     len(mockedDomainEntity.SetUpdatedByIDCalls())
func (mock *DomainEntityMock) SetUpdatedByIDCalls() []struct {
	UpdatedByID *string
} {
	var calls []struct {
		UpdatedByID *string
	}
	lockDomainEntityMockSetUpdatedByID.RLock()
	calls = mock.calls.SetUpdatedByID
	lockDomainEntityMockSetUpdatedByID.RUnlock()
	return calls
}

// SetUpdatedBySurname calls SetUpdatedBySurnameFunc.
func (mock *DomainEntityMock) SetUpdatedBySurname(updatedBySurname *string) {
	if mock.SetUpdatedBySurnameFunc == nil {
		panic("DomainEntityMock.SetUpdatedBySurnameFunc: method is nil but DomainEntity.SetUpdatedBySurname was just called")
	}
	callInfo := struct {
		UpdatedBySurname *string
	}{
		UpdatedBySurname: updatedBySurname,
	}
	lockDomainEntityMockSetUpdatedBySurname.Lock()
	mock.calls.SetUpdatedBySurname = append(mock.calls.SetUpdatedBySurname, callInfo)
	lockDomainEntityMockSetUpdatedBySurname.Unlock()
	mock.SetUpdatedBySurnameFunc(updatedBySurname)
}

// SetUpdatedBySurnameCalls gets all the calls that were made to SetUpdatedBySurname.
// Check the length with:
//     len(mockedDomainEntity.SetUpdatedBySurnameCalls())
func (mock *DomainEntityMock) SetUpdatedBySurnameCalls() []struct {
	UpdatedBySurname *string
} {
	var calls []struct {
		UpdatedBySurname *string
	}
	lockDomainEntityMockSetUpdatedBySurname.RLock()
	calls = mock.calls.SetUpdatedBySurname
	lockDomainEntityMockSetUpdatedBySurname.RUnlock()
	return calls
}

// SiteID calls SiteIDFunc.
func (mock *DomainEntityMock) SiteID() string {
	if mock.SiteIDFunc == nil {
		panic("DomainEntityMock.SiteIDFunc: method is nil but DomainEntity.SiteID was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockSiteID.Lock()
	mock.calls.SiteID = append(mock.calls.SiteID, callInfo)
	lockDomainEntityMockSiteID.Unlock()
	return mock.SiteIDFunc()
}

// SiteIDCalls gets all the calls that were made to SiteID.
// Check the length with:
//     len(mockedDomainEntity.SiteIDCalls())
func (mock *DomainEntityMock) SiteIDCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockSiteID.RLock()
	calls = mock.calls.SiteID
	lockDomainEntityMockSiteID.RUnlock()
	return calls
}

// TableAlias calls TableAliasFunc.
func (mock *DomainEntityMock) TableAlias() string {
	if mock.TableAliasFunc == nil {
		panic("DomainEntityMock.TableAliasFunc: method is nil but DomainEntity.TableAlias was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockTableAlias.Lock()
	mock.calls.TableAlias = append(mock.calls.TableAlias, callInfo)
	lockDomainEntityMockTableAlias.Unlock()
	return mock.TableAliasFunc()
}

// TableAliasCalls gets all the calls that were made to TableAlias.
// Check the length with:
//     len(mockedDomainEntity.TableAliasCalls())
func (mock *DomainEntityMock) TableAliasCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockTableAlias.RLock()
	calls = mock.calls.TableAlias
	lockDomainEntityMockTableAlias.RUnlock()
	return calls
}

// TableName calls TableNameFunc.
func (mock *DomainEntityMock) TableName() string {
	if mock.TableNameFunc == nil {
		panic("DomainEntityMock.TableNameFunc: method is nil but DomainEntity.TableName was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockTableName.Lock()
	mock.calls.TableName = append(mock.calls.TableName, callInfo)
	lockDomainEntityMockTableName.Unlock()
	return mock.TableNameFunc()
}

// TableNameCalls gets all the calls that were made to TableName.
// Check the length with:
//     len(mockedDomainEntity.TableNameCalls())
func (mock *DomainEntityMock) TableNameCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockTableName.RLock()
	calls = mock.calls.TableName
	lockDomainEntityMockTableName.RUnlock()
	return calls
}

// UpdatedAt calls UpdatedAtFunc.
func (mock *DomainEntityMock) UpdatedAt() *time.Time {
	if mock.UpdatedAtFunc == nil {
		panic("DomainEntityMock.UpdatedAtFunc: method is nil but DomainEntity.UpdatedAt was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockUpdatedAt.Lock()
	mock.calls.UpdatedAt = append(mock.calls.UpdatedAt, callInfo)
	lockDomainEntityMockUpdatedAt.Unlock()
	return mock.UpdatedAtFunc()
}

// UpdatedAtCalls gets all the calls that were made to UpdatedAt.
// Check the length with:
//     len(mockedDomainEntity.UpdatedAtCalls())
func (mock *DomainEntityMock) UpdatedAtCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockUpdatedAt.RLock()
	calls = mock.calls.UpdatedAt
	lockDomainEntityMockUpdatedAt.RUnlock()
	return calls
}

// UpdatedByFirstName calls UpdatedByFirstNameFunc.
func (mock *DomainEntityMock) UpdatedByFirstName() *string {
	if mock.UpdatedByFirstNameFunc == nil {
		panic("DomainEntityMock.UpdatedByFirstNameFunc: method is nil but DomainEntity.UpdatedByFirstName was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockUpdatedByFirstName.Lock()
	mock.calls.UpdatedByFirstName = append(mock.calls.UpdatedByFirstName, callInfo)
	lockDomainEntityMockUpdatedByFirstName.Unlock()
	return mock.UpdatedByFirstNameFunc()
}

// UpdatedByFirstNameCalls gets all the calls that were made to UpdatedByFirstName.
// Check the length with:
//     len(mockedDomainEntity.UpdatedByFirstNameCalls())
func (mock *DomainEntityMock) UpdatedByFirstNameCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockUpdatedByFirstName.RLock()
	calls = mock.calls.UpdatedByFirstName
	lockDomainEntityMockUpdatedByFirstName.RUnlock()
	return calls
}

// UpdatedByID calls UpdatedByIDFunc.
func (mock *DomainEntityMock) UpdatedByID() *string {
	if mock.UpdatedByIDFunc == nil {
		panic("DomainEntityMock.UpdatedByIDFunc: method is nil but DomainEntity.UpdatedByID was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockUpdatedByID.Lock()
	mock.calls.UpdatedByID = append(mock.calls.UpdatedByID, callInfo)
	lockDomainEntityMockUpdatedByID.Unlock()
	return mock.UpdatedByIDFunc()
}

// UpdatedByIDCalls gets all the calls that were made to UpdatedByID.
// Check the length with:
//     len(mockedDomainEntity.UpdatedByIDCalls())
func (mock *DomainEntityMock) UpdatedByIDCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockUpdatedByID.RLock()
	calls = mock.calls.UpdatedByID
	lockDomainEntityMockUpdatedByID.RUnlock()
	return calls
}

// UpdatedBySurname calls UpdatedBySurnameFunc.
func (mock *DomainEntityMock) UpdatedBySurname() *string {
	if mock.UpdatedBySurnameFunc == nil {
		panic("DomainEntityMock.UpdatedBySurnameFunc: method is nil but DomainEntity.UpdatedBySurname was just called")
	}
	callInfo := struct {
	}{}
	lockDomainEntityMockUpdatedBySurname.Lock()
	mock.calls.UpdatedBySurname = append(mock.calls.UpdatedBySurname, callInfo)
	lockDomainEntityMockUpdatedBySurname.Unlock()
	return mock.UpdatedBySurnameFunc()
}

// UpdatedBySurnameCalls gets all the calls that were made to UpdatedBySurname.
// Check the length with:
//     len(mockedDomainEntity.UpdatedBySurnameCalls())
func (mock *DomainEntityMock) UpdatedBySurnameCalls() []struct {
} {
	var calls []struct {
	}
	lockDomainEntityMockUpdatedBySurname.RLock()
	calls = mock.calls.UpdatedBySurname
	lockDomainEntityMockUpdatedBySurname.RUnlock()
	return calls
}

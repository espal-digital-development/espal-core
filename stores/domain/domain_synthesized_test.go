// Code generated by espal-store-synthesizer. DO NOT EDIT.
package domain_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/domain"
)

func TestDomainTable(t *testing.T) {
	d := domain.NewDomainEntity()
	if d.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestDomainTableAlias(t *testing.T) {
	d := domain.NewDomainEntity()
	if d.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestDomainIsUpdated(t *testing.T) {
	d := domain.NewDomainEntity()
	d.IsUpdated()
}

func TestDomainID(t *testing.T) {
	d := domain.NewDomainEntity()
	d.ID()
}

func TestDomainCreatedByID(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetCreatedByID(testValue)
	if testValue != d.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedByID(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetUpdatedByID(&testValue)
	if &testValue != d.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainSiteID(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetSiteID(testValue)
	if testValue != d.SiteID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCreatedAt(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := time.Now()
	d.SetCreatedAt(testValue)
	if testValue != d.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedAt(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := time.Now()
	d.SetUpdatedAt(&testValue)
	if &testValue != d.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCreatedByFirstName(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetCreatedByFirstName(&testValue)
	if &testValue != d.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCreatedBySurname(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetCreatedBySurname(&testValue)
	if &testValue != d.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedByFirstName(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetUpdatedByFirstName(&testValue)
	if &testValue != d.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedBySurname(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetUpdatedBySurname(&testValue)
	if &testValue != d.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainActive(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := true
	d.SetActive(testValue)
	if testValue != d.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainHost(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetHost(testValue)
	if testValue != d.Host() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainLanguage(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := uint16(65000)
	d.SetLanguage(&testValue)
	if &testValue != d.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCurrencies(t *testing.T) {
	d := domain.NewDomainEntity()
	testValue := "testValue"
	d.SetCurrencies(testValue)
	if testValue != d.Currencies() {
		t.Fatal("Getter did not return the Set value")
	}
}

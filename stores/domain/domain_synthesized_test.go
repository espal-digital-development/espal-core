// Code generated by espal-store-synthesizer. DO NOT EDIT.
package domain_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/domain"
)

func TestDomainTable(t *testing.T) {
	domain := domain.NewDomainEntity()
	if domain.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestDomainTableAlias(t *testing.T) {
	domain := domain.NewDomainEntity()
	if domain.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestDomainIsUpdated(t *testing.T) {
	domain := domain.NewDomainEntity()
	domain.IsUpdated()
}

func TestDomainID(t *testing.T) {
	domain := domain.NewDomainEntity()
	domain.ID()
}

func TestDomainCreatedByID(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetCreatedByID(testValue)
	if testValue != domain.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedByID(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetUpdatedByID(&testValue)
	if &testValue != domain.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainSiteID(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetSiteID(testValue)
	if testValue != domain.SiteID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCreatedAt(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := time.Now()
	domain.SetCreatedAt(testValue)
	if testValue != domain.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedAt(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := time.Now()
	domain.SetUpdatedAt(&testValue)
	if &testValue != domain.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCreatedByFirstName(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetCreatedByFirstName(&testValue)
	if &testValue != domain.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCreatedBySurname(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetCreatedBySurname(&testValue)
	if &testValue != domain.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedByFirstName(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetUpdatedByFirstName(&testValue)
	if &testValue != domain.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainUpdatedBySurname(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetUpdatedBySurname(&testValue)
	if &testValue != domain.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainActive(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := true
	domain.SetActive(testValue)
	if testValue != domain.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainHost(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetHost(testValue)
	if testValue != domain.Host() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainLanguage(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := uint16(65000)
	domain.SetLanguage(&testValue)
	if &testValue != domain.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDomainCurrencies(t *testing.T) {
	domain := domain.NewDomainEntity()
	testValue := "testValue"
	domain.SetCurrencies(testValue)
	if testValue != domain.Currencies() {
		t.Fatal("Getter did not return the Set value")
	}
}

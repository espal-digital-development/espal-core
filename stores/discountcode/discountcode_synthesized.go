// Code generated by espal-store-synthesizer. DO NOT EDIT.
package discountcode

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ DiscountCodeEntity = &DiscountCode{}

type DiscountCodeEntity interface {
	database.Model
	Key() string
	SetKey(key string)
	MaxUses() *uint
	SetMaxUses(maxUses *uint)
	UsesCounter() uint
	SetUsesCounter(usesCounter uint)
	AvailableFrom() *time.Time
	SetAvailableFrom(availableFrom *time.Time)
	AvailableUntil() *time.Time
	SetAvailableUntil(availableUntil *time.Time)
	DiscountPercentage() *float32
	SetDiscountPercentage(discountPercentage *float32)
	DiscountAmount() *float32
	SetDiscountAmount(discountAmount *float32)
}

// TableName returns the table name that belongs to the current model.
func (discountCode *DiscountCode) TableName() string {
	return "DiscountCode"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (discountCode *DiscountCode) TableAlias() string {
	return "dce"
}

// ID returns id.
func (discountCode *DiscountCode) ID() string {
	return discountCode.id
}

// CreatedByID returns createdByID.
func (discountCode *DiscountCode) CreatedByID() string {
	return discountCode.createdByID
}

// SetCreatedByID sets the createdByID.
func (discountCode *DiscountCode) SetCreatedByID(createdByID string) {
	discountCode.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (discountCode *DiscountCode) UpdatedByID() *string {
	return discountCode.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (discountCode *DiscountCode) SetUpdatedByID(updatedByID *string) {
	discountCode.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (discountCode *DiscountCode) CreatedAt() time.Time {
	return discountCode.createdAt
}

// SetCreatedAt sets the createdAt.
func (discountCode *DiscountCode) SetCreatedAt(createdAt time.Time) {
	discountCode.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (discountCode *DiscountCode) UpdatedAt() *time.Time {
	return discountCode.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (discountCode *DiscountCode) SetUpdatedAt(updatedAt *time.Time) {
	discountCode.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (discountCode *DiscountCode) CreatedByFirstName() *string {
	return discountCode.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (discountCode *DiscountCode) SetCreatedByFirstName(createdByFirstName *string) {
	discountCode.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (discountCode *DiscountCode) CreatedBySurname() *string {
	return discountCode.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (discountCode *DiscountCode) SetCreatedBySurname(createdBySurname *string) {
	discountCode.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (discountCode *DiscountCode) UpdatedByFirstName() *string {
	return discountCode.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (discountCode *DiscountCode) SetUpdatedByFirstName(updatedByFirstName *string) {
	discountCode.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (discountCode *DiscountCode) UpdatedBySurname() *string {
	return discountCode.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (discountCode *DiscountCode) SetUpdatedBySurname(updatedBySurname *string) {
	discountCode.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (discountCode *DiscountCode) IsUpdated() bool {
	return discountCode.updatedByID != nil
}

// Key returns key.
func (discountCode *DiscountCode) Key() string {
	return discountCode.key
}

// SetKey sets the key.
func (discountCode *DiscountCode) SetKey(key string) {
	discountCode.key = key
}

// MaxUses returns maxUses.
func (discountCode *DiscountCode) MaxUses() *uint {
	return discountCode.maxUses
}

// SetMaxUses sets the maxUses.
func (discountCode *DiscountCode) SetMaxUses(maxUses *uint) {
	discountCode.maxUses = maxUses
}

// UsesCounter returns usesCounter.
func (discountCode *DiscountCode) UsesCounter() uint {
	return discountCode.usesCounter
}

// SetUsesCounter sets the usesCounter.
func (discountCode *DiscountCode) SetUsesCounter(usesCounter uint) {
	discountCode.usesCounter = usesCounter
}

// AvailableFrom returns availableFrom.
func (discountCode *DiscountCode) AvailableFrom() *time.Time {
	return discountCode.availableFrom
}

// SetAvailableFrom sets the availableFrom.
func (discountCode *DiscountCode) SetAvailableFrom(availableFrom *time.Time) {
	discountCode.availableFrom = availableFrom
}

// AvailableUntil returns availableUntil.
func (discountCode *DiscountCode) AvailableUntil() *time.Time {
	return discountCode.availableUntil
}

// SetAvailableUntil sets the availableUntil.
func (discountCode *DiscountCode) SetAvailableUntil(availableUntil *time.Time) {
	discountCode.availableUntil = availableUntil
}

// DiscountPercentage returns discountPercentage.
func (discountCode *DiscountCode) DiscountPercentage() *float32 {
	return discountCode.discountPercentage
}

// SetDiscountPercentage sets the discountPercentage.
func (discountCode *DiscountCode) SetDiscountPercentage(discountPercentage *float32) {
	discountCode.discountPercentage = discountPercentage
}

// DiscountAmount returns discountAmount.
func (discountCode *DiscountCode) DiscountAmount() *float32 {
	return discountCode.discountAmount
}

// SetDiscountAmount sets the discountAmount.
func (discountCode *DiscountCode) SetDiscountAmount(discountAmount *float32) {
	discountCode.discountAmount = discountAmount
}

func newDiscountCode() *DiscountCode {
	return &DiscountCode{}
}

// New returns a new instance of DiscountCodeEntity.
func NewDiscountCodeEntity() DiscountCodeEntity {
	return newDiscountCode()
}

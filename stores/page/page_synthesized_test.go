// Code generated by espal-store-synthesizer. DO NOT EDIT.
package page_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/page"
)

func TestPageTable(t *testing.T) {
	page := page.NewPageEntity()
	if page.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPageTableAlias(t *testing.T) {
	page := page.NewPageEntity()
	if page.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPageIsUpdated(t *testing.T) {
	page := page.NewPageEntity()
	page.IsUpdated()
}

func TestPageID(t *testing.T) {
	page := page.NewPageEntity()
	page.ID()
}

func TestPageCreatedByID(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetCreatedByID(testValue)
	if testValue != page.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageUpdatedByID(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetUpdatedByID(&testValue)
	if &testValue != page.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageCreatedAt(t *testing.T) {
	page := page.NewPageEntity()
	testValue := time.Now()
	page.SetCreatedAt(testValue)
	if testValue != page.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageUpdatedAt(t *testing.T) {
	page := page.NewPageEntity()
	testValue := time.Now()
	page.SetUpdatedAt(&testValue)
	if &testValue != page.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageCreatedByFirstName(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetCreatedByFirstName(&testValue)
	if &testValue != page.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageCreatedBySurname(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetCreatedBySurname(&testValue)
	if &testValue != page.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageUpdatedByFirstName(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetUpdatedByFirstName(&testValue)
	if &testValue != page.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageUpdatedBySurname(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetUpdatedBySurname(&testValue)
	if &testValue != page.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageDomainID(t *testing.T) {
	page := page.NewPageEntity()
	testValue := "testValue"
	page.SetDomainID(testValue)
	if testValue != page.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPageActive(t *testing.T) {
	page := page.NewPageEntity()
	testValue := true
	page.SetActive(testValue)
	if testValue != page.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

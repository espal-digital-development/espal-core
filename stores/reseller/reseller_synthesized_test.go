// Code generated by espal-store-synthesizer. DO NOT EDIT.
package reseller_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/reseller"
)

func TestResellerTable(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	if reseller.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestResellerTableAlias(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	if reseller.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestResellerIsUpdated(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	reseller.IsUpdated()
}

func TestResellerID(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	reseller.ID()
}

func TestResellerCreatedByID(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetCreatedByID(testValue)
	if testValue != reseller.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerUpdatedByID(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetUpdatedByID(&testValue)
	if &testValue != reseller.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerCreatedAt(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := time.Now()
	reseller.SetCreatedAt(testValue)
	if testValue != reseller.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerUpdatedAt(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := time.Now()
	reseller.SetUpdatedAt(&testValue)
	if &testValue != reseller.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerCreatedByFirstName(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetCreatedByFirstName(&testValue)
	if &testValue != reseller.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerCreatedBySurname(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetCreatedBySurname(&testValue)
	if &testValue != reseller.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerUpdatedByFirstName(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetUpdatedByFirstName(&testValue)
	if &testValue != reseller.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerUpdatedBySurname(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetUpdatedBySurname(&testValue)
	if &testValue != reseller.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerActive(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := true
	reseller.SetActive(testValue)
	if testValue != reseller.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerCountry(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := uint16(65000)
	reseller.SetCountry(&testValue)
	if &testValue != reseller.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestResellerAddress(t *testing.T) {
	reseller := reseller.NewResellerEntity()
	testValue := "testValue"
	reseller.SetAddress(&testValue)
	if &testValue != reseller.Address() {
		t.Fatal("Getter did not return the Set value")
	}
}

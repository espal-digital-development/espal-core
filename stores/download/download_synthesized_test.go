// Code generated by espal-store-synthesizer. DO NOT EDIT.
package download_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/download"
)

func TestDownloadTable(t *testing.T) {
	download := download.NewDownloadEntity()
	if download.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestDownloadTableAlias(t *testing.T) {
	download := download.NewDownloadEntity()
	if download.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestDownloadIsUpdated(t *testing.T) {
	download := download.NewDownloadEntity()
	download.IsUpdated()
}

func TestDownloadID(t *testing.T) {
	download := download.NewDownloadEntity()
	download.ID()
}

func TestDownloadCreatedByID(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetCreatedByID(testValue)
	if testValue != download.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadUpdatedByID(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetUpdatedByID(&testValue)
	if &testValue != download.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadCreatedAt(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := time.Now()
	download.SetCreatedAt(testValue)
	if testValue != download.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadUpdatedAt(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := time.Now()
	download.SetUpdatedAt(&testValue)
	if &testValue != download.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadCreatedByFirstName(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetCreatedByFirstName(&testValue)
	if &testValue != download.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadCreatedBySurname(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetCreatedBySurname(&testValue)
	if &testValue != download.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadUpdatedByFirstName(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetUpdatedByFirstName(&testValue)
	if &testValue != download.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadUpdatedBySurname(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetUpdatedBySurname(&testValue)
	if &testValue != download.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadActive(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := true
	download.SetActive(testValue)
	if testValue != download.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDownloadFilePath(t *testing.T) {
	download := download.NewDownloadEntity()
	testValue := "testValue"
	download.SetFilePath(testValue)
	if testValue != download.FilePath() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package price

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ MinMaxEntity = &MinMax{}

type MinMaxEntity interface {
	database.Model
	BundledProductID() *string
	SetBundledProductID(bundledProductID *string)
	ProductModelID() *string
	SetProductModelID(productModelID *string)
	ProductVariantID() *string
	SetProductVariantID(productVariantID *string)
	DomainID() string
	SetDomainID(domainID string)
	PriceGroupID() string
	SetPriceGroupID(priceGroupID string)
	TaxGroup() uint
	SetTaxGroup(taxGroup uint)
	Currency() uint16
	SetCurrency(currency uint16)
	Lowest() float64
	SetLowest(lowest float64)
	Highest() float64
	SetHighest(highest float64)
	LowestRev() float64
	SetLowestRev(lowestRev float64)
	HighestRev() float64
	SetHighestRev(highestRev float64)
}

// ID returns id.
func (m *MinMax) ID() string {
	return m.id
}

// CreatedByID returns createdByID.
func (m *MinMax) CreatedByID() string {
	return m.createdByID
}

// SetCreatedByID sets the createdByID.
func (m *MinMax) SetCreatedByID(createdByID string) {
	m.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (m *MinMax) UpdatedByID() *string {
	return m.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (m *MinMax) SetUpdatedByID(updatedByID *string) {
	m.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (m *MinMax) CreatedAt() time.Time {
	return m.createdAt
}

// SetCreatedAt sets the createdAt.
func (m *MinMax) SetCreatedAt(createdAt time.Time) {
	m.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (m *MinMax) UpdatedAt() *time.Time {
	return m.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (m *MinMax) SetUpdatedAt(updatedAt *time.Time) {
	m.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (m *MinMax) CreatedByFirstName() *string {
	return m.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (m *MinMax) SetCreatedByFirstName(createdByFirstName *string) {
	m.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (m *MinMax) CreatedBySurname() *string {
	return m.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (m *MinMax) SetCreatedBySurname(createdBySurname *string) {
	m.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (m *MinMax) UpdatedByFirstName() *string {
	return m.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (m *MinMax) SetUpdatedByFirstName(updatedByFirstName *string) {
	m.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (m *MinMax) UpdatedBySurname() *string {
	return m.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (m *MinMax) SetUpdatedBySurname(updatedBySurname *string) {
	m.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (m *MinMax) IsUpdated() bool {
	return m.updatedByID != nil
}

// BundledProductID returns bundledProductID.
func (m *MinMax) BundledProductID() *string {
	return m.bundledProductID
}

// SetBundledProductID sets the bundledProductID.
func (m *MinMax) SetBundledProductID(bundledProductID *string) {
	m.bundledProductID = bundledProductID
}

// ProductModelID returns productModelID.
func (m *MinMax) ProductModelID() *string {
	return m.productModelID
}

// SetProductModelID sets the productModelID.
func (m *MinMax) SetProductModelID(productModelID *string) {
	m.productModelID = productModelID
}

// ProductVariantID returns productVariantID.
func (m *MinMax) ProductVariantID() *string {
	return m.productVariantID
}

// SetProductVariantID sets the productVariantID.
func (m *MinMax) SetProductVariantID(productVariantID *string) {
	m.productVariantID = productVariantID
}

// DomainID returns domainID.
func (m *MinMax) DomainID() string {
	return m.domainID
}

// SetDomainID sets the domainID.
func (m *MinMax) SetDomainID(domainID string) {
	m.domainID = domainID
}

// PriceGroupID returns priceGroupID.
func (m *MinMax) PriceGroupID() string {
	return m.priceGroupID
}

// SetPriceGroupID sets the priceGroupID.
func (m *MinMax) SetPriceGroupID(priceGroupID string) {
	m.priceGroupID = priceGroupID
}

// TaxGroup returns taxGroup.
func (m *MinMax) TaxGroup() uint {
	return m.taxGroup
}

// SetTaxGroup sets the taxGroup.
func (m *MinMax) SetTaxGroup(taxGroup uint) {
	m.taxGroup = taxGroup
}

// Currency returns currency.
func (m *MinMax) Currency() uint16 {
	return m.currency
}

// SetCurrency sets the currency.
func (m *MinMax) SetCurrency(currency uint16) {
	m.currency = currency
}

// Lowest returns lowest.
func (m *MinMax) Lowest() float64 {
	return m.lowest
}

// SetLowest sets the lowest.
func (m *MinMax) SetLowest(lowest float64) {
	m.lowest = lowest
}

// Highest returns highest.
func (m *MinMax) Highest() float64 {
	return m.highest
}

// SetHighest sets the highest.
func (m *MinMax) SetHighest(highest float64) {
	m.highest = highest
}

// LowestRev returns lowestRev.
func (m *MinMax) LowestRev() float64 {
	return m.lowestRev
}

// SetLowestRev sets the lowestRev.
func (m *MinMax) SetLowestRev(lowestRev float64) {
	m.lowestRev = lowestRev
}

// HighestRev returns highestRev.
func (m *MinMax) HighestRev() float64 {
	return m.highestRev
}

// SetHighestRev sets the highestRev.
func (m *MinMax) SetHighestRev(highestRev float64) {
	m.highestRev = highestRev
}

func newMinMax() *MinMax {
	return &MinMax{}
}

// New returns a new instance of MinMaxEntity.
func NewMinMaxEntity() MinMaxEntity {
	return newMinMax()
}

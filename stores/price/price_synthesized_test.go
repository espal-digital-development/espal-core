// Code generated by espal-store-synthesizer. DO NOT EDIT.
package price_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/price"
)

func TestPriceTable(t *testing.T) {
	p := price.NewPriceEntity()
	if p.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPriceTableAlias(t *testing.T) {
	p := price.NewPriceEntity()
	if p.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPriceIsUpdated(t *testing.T) {
	p := price.NewPriceEntity()
	p.IsUpdated()
}

func TestPriceID(t *testing.T) {
	p := price.NewPriceEntity()
	p.ID()
}

func TestPriceCreatedByID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetCreatedByID(testValue)
	if testValue != p.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceUpdatedByID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetUpdatedByID(&testValue)
	if &testValue != p.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceCreatedAt(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := time.Now()
	p.SetCreatedAt(testValue)
	if testValue != p.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceUpdatedAt(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := time.Now()
	p.SetUpdatedAt(&testValue)
	if &testValue != p.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceCreatedByFirstName(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetCreatedByFirstName(&testValue)
	if &testValue != p.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceCreatedBySurname(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetCreatedBySurname(&testValue)
	if &testValue != p.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceUpdatedByFirstName(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetUpdatedByFirstName(&testValue)
	if &testValue != p.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceUpdatedBySurname(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetUpdatedBySurname(&testValue)
	if &testValue != p.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceBundledProductID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetBundledProductID(&testValue)
	if &testValue != p.BundledProductID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceProductModelID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetProductModelID(&testValue)
	if &testValue != p.ProductModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceProductVariantID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetProductVariantID(&testValue)
	if &testValue != p.ProductVariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceDomainID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetDomainID(testValue)
	if testValue != p.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPricePriceGroupID(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := "testValue"
	p.SetPriceGroupID(testValue)
	if testValue != p.PriceGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceTaxGroup(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := uint(1e9)
	p.SetTaxGroup(testValue)
	if testValue != p.TaxGroup() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPriceCurrency(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := uint16(65000)
	p.SetCurrency(testValue)
	if testValue != p.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPricePrice(t *testing.T) {
	p := price.NewPriceEntity()
	testValue := float32(3.14)
	p.SetPrice(testValue)
	if testValue != p.Price() {
		t.Fatal("Getter did not return the Set value")
	}
}

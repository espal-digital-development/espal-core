// Code generated by espal-store-synthesizer. DO NOT EDIT.
package price_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/price"
)

func TestMinMaxTable(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	if minMax.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestMinMaxTableAlias(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	if minMax.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestMinMaxIsUpdated(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	minMax.IsUpdated()
}

func TestMinMaxID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	minMax.ID()
}

func TestMinMaxCreatedByID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetCreatedByID(testValue)
	if testValue != minMax.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedByID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetUpdatedByID(&testValue)
	if &testValue != minMax.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCreatedAt(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := time.Now()
	minMax.SetCreatedAt(testValue)
	if testValue != minMax.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedAt(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := time.Now()
	minMax.SetUpdatedAt(&testValue)
	if &testValue != minMax.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCreatedByFirstName(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetCreatedByFirstName(&testValue)
	if &testValue != minMax.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCreatedBySurname(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetCreatedBySurname(&testValue)
	if &testValue != minMax.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedByFirstName(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetUpdatedByFirstName(&testValue)
	if &testValue != minMax.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedBySurname(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetUpdatedBySurname(&testValue)
	if &testValue != minMax.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxBundledProductID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetBundledProductID(&testValue)
	if &testValue != minMax.BundledProductID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxProductModelID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetProductModelID(&testValue)
	if &testValue != minMax.ProductModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxProductVariantID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetProductVariantID(&testValue)
	if &testValue != minMax.ProductVariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxDomainID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetDomainID(testValue)
	if testValue != minMax.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxPriceGroupID(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := "testValue"
	minMax.SetPriceGroupID(testValue)
	if testValue != minMax.PriceGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxTaxGroup(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := uint(1e9)
	minMax.SetTaxGroup(testValue)
	if testValue != minMax.TaxGroup() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCurrency(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := uint16(65000)
	minMax.SetCurrency(testValue)
	if testValue != minMax.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxLowest(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := 6.28
	minMax.SetLowest(testValue)
	if testValue != minMax.Lowest() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxHighest(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := 6.28
	minMax.SetHighest(testValue)
	if testValue != minMax.Highest() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxLowestRev(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := 6.28
	minMax.SetLowestRev(testValue)
	if testValue != minMax.LowestRev() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxHighestRev(t *testing.T) {
	minMax := price.NewMinMaxEntity()
	testValue := 6.28
	minMax.SetHighestRev(testValue)
	if testValue != minMax.HighestRev() {
		t.Fatal("Getter did not return the Set value")
	}
}

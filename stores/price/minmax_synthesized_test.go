// Code generated by espal-store-synthesizer. DO NOT EDIT.
package price_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/price"
)

func TestMinMaxTable(t *testing.T) {
	m := price.NewMinMaxEntity()
	if m.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestMinMaxTableAlias(t *testing.T) {
	m := price.NewMinMaxEntity()
	if m.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestMinMaxIsUpdated(t *testing.T) {
	m := price.NewMinMaxEntity()
	m.IsUpdated()
}

func TestMinMaxID(t *testing.T) {
	m := price.NewMinMaxEntity()
	m.ID()
}

func TestMinMaxCreatedByID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetCreatedByID(testValue)
	if testValue != m.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedByID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetUpdatedByID(&testValue)
	if &testValue != m.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCreatedAt(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := time.Now()
	m.SetCreatedAt(testValue)
	if testValue != m.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedAt(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := time.Now()
	m.SetUpdatedAt(&testValue)
	if &testValue != m.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCreatedByFirstName(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetCreatedByFirstName(&testValue)
	if &testValue != m.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCreatedBySurname(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetCreatedBySurname(&testValue)
	if &testValue != m.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedByFirstName(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetUpdatedByFirstName(&testValue)
	if &testValue != m.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxUpdatedBySurname(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetUpdatedBySurname(&testValue)
	if &testValue != m.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxBundledProductID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetBundledProductID(&testValue)
	if &testValue != m.BundledProductID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxProductModelID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetProductModelID(&testValue)
	if &testValue != m.ProductModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxProductVariantID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetProductVariantID(&testValue)
	if &testValue != m.ProductVariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxDomainID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetDomainID(testValue)
	if testValue != m.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxPriceGroupID(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := "testValue"
	m.SetPriceGroupID(testValue)
	if testValue != m.PriceGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxTaxGroup(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := uint(1e9)
	m.SetTaxGroup(testValue)
	if testValue != m.TaxGroup() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxCurrency(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := uint16(65000)
	m.SetCurrency(testValue)
	if testValue != m.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxLowest(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := 6.28
	m.SetLowest(testValue)
	if testValue != m.Lowest() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxHighest(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := 6.28
	m.SetHighest(testValue)
	if testValue != m.Highest() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxLowestRev(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := 6.28
	m.SetLowestRev(testValue)
	if testValue != m.LowestRev() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMinMaxHighestRev(t *testing.T) {
	m := price.NewMinMaxEntity()
	testValue := 6.28
	m.SetHighestRev(testValue)
	if testValue != m.HighestRev() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package price_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/price"
)

func TestMutationTable(t *testing.T) {
	mutation := price.NewMutationEntity()
	if mutation.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestMutationTableAlias(t *testing.T) {
	mutation := price.NewMutationEntity()
	if mutation.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestMutationIsUpdated(t *testing.T) {
	mutation := price.NewMutationEntity()
	mutation.IsUpdated()
}

func TestMutationID(t *testing.T) {
	mutation := price.NewMutationEntity()
	mutation.ID()
}

func TestMutationCreatedByID(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetCreatedByID(testValue)
	if testValue != mutation.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedByID(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetUpdatedByID(&testValue)
	if &testValue != mutation.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationCreatedAt(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := time.Now()
	mutation.SetCreatedAt(testValue)
	if testValue != mutation.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedAt(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := time.Now()
	mutation.SetUpdatedAt(&testValue)
	if &testValue != mutation.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationCreatedByFirstName(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetCreatedByFirstName(&testValue)
	if &testValue != mutation.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationCreatedBySurname(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetCreatedBySurname(&testValue)
	if &testValue != mutation.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedByFirstName(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetUpdatedByFirstName(&testValue)
	if &testValue != mutation.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedBySurname(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetUpdatedBySurname(&testValue)
	if &testValue != mutation.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationProductVariantID(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := "testValue"
	mutation.SetProductVariantID(testValue)
	if testValue != mutation.ProductVariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationPrice(t *testing.T) {
	mutation := price.NewMutationEntity()
	testValue := 6.28
	mutation.SetPrice(testValue)
	if testValue != mutation.Price() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package saleorder_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/saleorder"
)

func TestSaleOrderTable(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	if saleOrder.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSaleOrderTableAlias(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	if saleOrder.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSaleOrderIsUpdated(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	saleOrder.IsUpdated()
}

func TestSaleOrderID(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	saleOrder.ID()
}

func TestSaleOrderCreatedByID(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetCreatedByID(testValue)
	if testValue != saleOrder.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUpdatedByID(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUpdatedByID(&testValue)
	if &testValue != saleOrder.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderCreatedAt(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := time.Now()
	saleOrder.SetCreatedAt(testValue)
	if testValue != saleOrder.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUpdatedAt(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := time.Now()
	saleOrder.SetUpdatedAt(&testValue)
	if &testValue != saleOrder.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderCreatedByFirstName(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetCreatedByFirstName(&testValue)
	if &testValue != saleOrder.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderCreatedBySurname(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetCreatedBySurname(&testValue)
	if &testValue != saleOrder.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUpdatedByFirstName(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUpdatedByFirstName(&testValue)
	if &testValue != saleOrder.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUpdatedBySurname(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUpdatedBySurname(&testValue)
	if &testValue != saleOrder.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserID(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserID(testValue)
	if testValue != saleOrder.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderDomainID(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetDomainID(testValue)
	if testValue != saleOrder.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderCurrency(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := uint16(65000)
	saleOrder.SetCurrency(testValue)
	if testValue != saleOrder.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderCode(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetCode(&testValue)
	if &testValue != saleOrder.Code() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoBusiness(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := true
	saleOrder.SetUserInfoBusiness(testValue)
	if testValue != saleOrder.UserInfoBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoBusinessCocNumber(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoBusinessCocNumber(&testValue)
	if &testValue != saleOrder.UserInfoBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoFirstName(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoFirstName(testValue)
	if testValue != saleOrder.UserInfoFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoSurname(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoSurname(testValue)
	if testValue != saleOrder.UserInfoSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoStreet(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoStreet(testValue)
	if testValue != saleOrder.UserInfoStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoStreetLine2(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoStreetLine2(&testValue)
	if &testValue != saleOrder.UserInfoStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoNumber(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoNumber(testValue)
	if testValue != saleOrder.UserInfoNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoNumberAddition(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoNumberAddition(&testValue)
	if &testValue != saleOrder.UserInfoNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoZipCode(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoZipCode(testValue)
	if testValue != saleOrder.UserInfoZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoCity(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoCity(testValue)
	if testValue != saleOrder.UserInfoCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoState(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := uint(1e9)
	saleOrder.SetUserInfoState(&testValue)
	if &testValue != saleOrder.UserInfoState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoCountry(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := uint16(65000)
	saleOrder.SetUserInfoCountry(&testValue)
	if &testValue != saleOrder.UserInfoCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoPhoneNumber(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoPhoneNumber(&testValue)
	if &testValue != saleOrder.UserInfoPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderUserInfoEmail(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetUserInfoEmail(&testValue)
	if &testValue != saleOrder.UserInfoEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressBusiness(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := true
	saleOrder.SetShippingAddressBusiness(testValue)
	if testValue != saleOrder.ShippingAddressBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressBusinessCocNumber(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressBusinessCocNumber(&testValue)
	if &testValue != saleOrder.ShippingAddressBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressFirstName(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressFirstName(testValue)
	if testValue != saleOrder.ShippingAddressFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressSurname(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressSurname(testValue)
	if testValue != saleOrder.ShippingAddressSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressStreet(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressStreet(testValue)
	if testValue != saleOrder.ShippingAddressStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressStreetLine2(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressStreetLine2(&testValue)
	if &testValue != saleOrder.ShippingAddressStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressNumber(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressNumber(testValue)
	if testValue != saleOrder.ShippingAddressNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressNumberAddition(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressNumberAddition(&testValue)
	if &testValue != saleOrder.ShippingAddressNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressZipCode(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressZipCode(testValue)
	if testValue != saleOrder.ShippingAddressZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressCity(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressCity(testValue)
	if testValue != saleOrder.ShippingAddressCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressState(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := uint(1e9)
	saleOrder.SetShippingAddressState(&testValue)
	if &testValue != saleOrder.ShippingAddressState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressCountry(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := uint16(65000)
	saleOrder.SetShippingAddressCountry(&testValue)
	if &testValue != saleOrder.ShippingAddressCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressPhoneNumber(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressPhoneNumber(&testValue)
	if &testValue != saleOrder.ShippingAddressPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderShippingAddressEmail(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetShippingAddressEmail(&testValue)
	if &testValue != saleOrder.ShippingAddressEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderComments(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetComments(&testValue)
	if &testValue != saleOrder.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderSellingPartyAutograph(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetSellingPartyAutograph(&testValue)
	if &testValue != saleOrder.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderBuyingPartyAutograph(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetBuyingPartyAutograph(&testValue)
	if &testValue != saleOrder.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOrderSaleOfferID(t *testing.T) {
	saleOrder := saleorder.NewSaleOrderEntity()
	testValue := "testValue"
	saleOrder.SetSaleOfferID(&testValue)
	if &testValue != saleOrder.SaleOfferID() {
		t.Fatal("Getter did not return the Set value")
	}
}

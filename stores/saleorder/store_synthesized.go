// Code generated by espal-store-synthesizer. DO NOT EDIT.
package saleorder

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &SaleOrdersStore{}

// Store represents a data interaction object.
type Store interface {
}

func (saleOrdersStore *SaleOrdersStore) fetch(query string, withCreators bool, params ...interface{}) (result []*SaleOrder, ok bool, err error) {
	rows, err := saleOrdersStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*SaleOrder, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		saleOrder := newSaleOrder()
		fields := []interface{}{&saleOrder.id, &saleOrder.createdByID, &saleOrder.updatedByID, &saleOrder.createdAt, &saleOrder.updatedAt, &saleOrder.userID, &saleOrder.domainID, &saleOrder.currency, &saleOrder.code, &saleOrder.userInfoBusiness, &saleOrder.userInfoBusinessCocNumber, &saleOrder.userInfoFirstName, &saleOrder.userInfoSurname, &saleOrder.userInfoStreet, &saleOrder.userInfoStreetLine2, &saleOrder.userInfoNumber, &saleOrder.userInfoNumberAddition, &saleOrder.userInfoZipCode, &saleOrder.userInfoCity, &saleOrder.userInfoState, &saleOrder.userInfoCountry, &saleOrder.userInfoPhoneNumber, &saleOrder.userInfoEmail, &saleOrder.shippingAddressBusiness, &saleOrder.shippingAddressBusinessCocNumber, &saleOrder.shippingAddressFirstName, &saleOrder.shippingAddressSurname, &saleOrder.shippingAddressStreet, &saleOrder.shippingAddressStreetLine2, &saleOrder.shippingAddressNumber, &saleOrder.shippingAddressNumberAddition, &saleOrder.shippingAddressZipCode, &saleOrder.shippingAddressCity, &saleOrder.shippingAddressState, &saleOrder.shippingAddressCountry, &saleOrder.shippingAddressPhoneNumber, &saleOrder.shippingAddressEmail, &saleOrder.comments, &saleOrder.sellingPartyAutograph, &saleOrder.buyingPartyAutograph, &saleOrder.saleOfferID}
		if withCreators {
			fields = append(fields, &saleOrder.createdByFirstName, &saleOrder.createdBySurname, &saleOrder.updatedByFirstName, &saleOrder.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, saleOrder)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SaleOrdersStore.
func New(selecterDatabase database.Database) (*SaleOrdersStore, error) {
	saleOrdersStore := &SaleOrdersStore{
		selecterDatabase: selecterDatabase,
	}
	return saleOrdersStore, nil
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package saleoffer_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/saleoffer"
)

func TestSaleOfferTable(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	if saleOffer.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSaleOfferTableAlias(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	if saleOffer.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSaleOfferIsUpdated(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	saleOffer.IsUpdated()
}

func TestSaleOfferID(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	saleOffer.ID()
}

func TestSaleOfferCreatedByID(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetCreatedByID(testValue)
	if testValue != saleOffer.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedByID(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUpdatedByID(&testValue)
	if &testValue != saleOffer.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCreatedAt(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := time.Now()
	saleOffer.SetCreatedAt(testValue)
	if testValue != saleOffer.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedAt(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := time.Now()
	saleOffer.SetUpdatedAt(&testValue)
	if &testValue != saleOffer.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCreatedByFirstName(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetCreatedByFirstName(&testValue)
	if &testValue != saleOffer.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCreatedBySurname(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetCreatedBySurname(&testValue)
	if &testValue != saleOffer.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedByFirstName(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUpdatedByFirstName(&testValue)
	if &testValue != saleOffer.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedBySurname(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUpdatedBySurname(&testValue)
	if &testValue != saleOffer.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserID(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserID(testValue)
	if testValue != saleOffer.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferDomainID(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetDomainID(testValue)
	if testValue != saleOffer.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCurrency(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := uint16(65000)
	saleOffer.SetCurrency(testValue)
	if testValue != saleOffer.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCode(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetCode(&testValue)
	if &testValue != saleOffer.Code() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoBusiness(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := true
	saleOffer.SetUserInfoBusiness(testValue)
	if testValue != saleOffer.UserInfoBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoBusinessCocNumber(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoBusinessCocNumber(&testValue)
	if &testValue != saleOffer.UserInfoBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoFirstName(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoFirstName(testValue)
	if testValue != saleOffer.UserInfoFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoSurname(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoSurname(testValue)
	if testValue != saleOffer.UserInfoSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoStreet(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoStreet(testValue)
	if testValue != saleOffer.UserInfoStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoStreetLine2(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoStreetLine2(&testValue)
	if &testValue != saleOffer.UserInfoStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoNumber(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoNumber(testValue)
	if testValue != saleOffer.UserInfoNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoNumberAddition(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoNumberAddition(&testValue)
	if &testValue != saleOffer.UserInfoNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoZipCode(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoZipCode(testValue)
	if testValue != saleOffer.UserInfoZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoCity(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoCity(testValue)
	if testValue != saleOffer.UserInfoCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoState(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := uint(1e9)
	saleOffer.SetUserInfoState(&testValue)
	if &testValue != saleOffer.UserInfoState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoCountry(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := uint16(65000)
	saleOffer.SetUserInfoCountry(&testValue)
	if &testValue != saleOffer.UserInfoCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoPhoneNumber(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoPhoneNumber(&testValue)
	if &testValue != saleOffer.UserInfoPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoEmail(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetUserInfoEmail(&testValue)
	if &testValue != saleOffer.UserInfoEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressBusiness(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := true
	saleOffer.SetShippingAddressBusiness(testValue)
	if testValue != saleOffer.ShippingAddressBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressBusinessCocNumber(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressBusinessCocNumber(&testValue)
	if &testValue != saleOffer.ShippingAddressBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressFirstName(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressFirstName(testValue)
	if testValue != saleOffer.ShippingAddressFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressSurname(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressSurname(testValue)
	if testValue != saleOffer.ShippingAddressSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressStreet(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressStreet(testValue)
	if testValue != saleOffer.ShippingAddressStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressStreetLine2(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressStreetLine2(&testValue)
	if &testValue != saleOffer.ShippingAddressStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressNumber(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressNumber(testValue)
	if testValue != saleOffer.ShippingAddressNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressNumberAddition(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressNumberAddition(&testValue)
	if &testValue != saleOffer.ShippingAddressNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressZipCode(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressZipCode(testValue)
	if testValue != saleOffer.ShippingAddressZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressCity(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressCity(testValue)
	if testValue != saleOffer.ShippingAddressCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressState(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := uint(1e9)
	saleOffer.SetShippingAddressState(&testValue)
	if &testValue != saleOffer.ShippingAddressState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressCountry(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := uint16(65000)
	saleOffer.SetShippingAddressCountry(&testValue)
	if &testValue != saleOffer.ShippingAddressCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressPhoneNumber(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressPhoneNumber(&testValue)
	if &testValue != saleOffer.ShippingAddressPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressEmail(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetShippingAddressEmail(&testValue)
	if &testValue != saleOffer.ShippingAddressEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferComments(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetComments(&testValue)
	if &testValue != saleOffer.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferSellingPartyAutograph(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetSellingPartyAutograph(&testValue)
	if &testValue != saleOffer.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferBuyingPartyAutograph(t *testing.T) {
	saleOffer := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	saleOffer.SetBuyingPartyAutograph(&testValue)
	if &testValue != saleOffer.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

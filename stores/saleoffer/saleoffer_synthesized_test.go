// Code generated by espal-store-synthesizer. DO NOT EDIT.
package saleoffer_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/saleoffer"
)

func TestSaleOfferTable(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	if s.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSaleOfferTableAlias(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	if s.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSaleOfferIsUpdated(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	s.IsUpdated()
}

func TestSaleOfferID(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	s.ID()
}

func TestSaleOfferCreatedByID(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetCreatedByID(testValue)
	if testValue != s.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedByID(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUpdatedByID(&testValue)
	if &testValue != s.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCreatedAt(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := time.Now()
	s.SetCreatedAt(testValue)
	if testValue != s.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedAt(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := time.Now()
	s.SetUpdatedAt(&testValue)
	if &testValue != s.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCreatedByFirstName(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetCreatedByFirstName(&testValue)
	if &testValue != s.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCreatedBySurname(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetCreatedBySurname(&testValue)
	if &testValue != s.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedByFirstName(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUpdatedByFirstName(&testValue)
	if &testValue != s.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUpdatedBySurname(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUpdatedBySurname(&testValue)
	if &testValue != s.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserID(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserID(testValue)
	if testValue != s.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferDomainID(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetDomainID(testValue)
	if testValue != s.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCurrency(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := uint16(65000)
	s.SetCurrency(testValue)
	if testValue != s.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferCode(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetCode(&testValue)
	if &testValue != s.Code() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoBusiness(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := true
	s.SetUserInfoBusiness(testValue)
	if testValue != s.UserInfoBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoBusinessCocNumber(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoBusinessCocNumber(&testValue)
	if &testValue != s.UserInfoBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoFirstName(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoFirstName(testValue)
	if testValue != s.UserInfoFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoSurname(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoSurname(testValue)
	if testValue != s.UserInfoSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoStreet(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoStreet(testValue)
	if testValue != s.UserInfoStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoStreetLine2(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoStreetLine2(&testValue)
	if &testValue != s.UserInfoStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoNumber(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoNumber(testValue)
	if testValue != s.UserInfoNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoNumberAddition(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoNumberAddition(&testValue)
	if &testValue != s.UserInfoNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoZipCode(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoZipCode(testValue)
	if testValue != s.UserInfoZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoCity(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoCity(testValue)
	if testValue != s.UserInfoCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoState(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := uint(1e9)
	s.SetUserInfoState(&testValue)
	if &testValue != s.UserInfoState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoCountry(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := uint16(65000)
	s.SetUserInfoCountry(&testValue)
	if &testValue != s.UserInfoCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoPhoneNumber(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoPhoneNumber(&testValue)
	if &testValue != s.UserInfoPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferUserInfoEmail(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetUserInfoEmail(&testValue)
	if &testValue != s.UserInfoEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressBusiness(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := true
	s.SetShippingAddressBusiness(testValue)
	if testValue != s.ShippingAddressBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressBusinessCocNumber(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressBusinessCocNumber(&testValue)
	if &testValue != s.ShippingAddressBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressFirstName(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressFirstName(testValue)
	if testValue != s.ShippingAddressFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressSurname(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressSurname(testValue)
	if testValue != s.ShippingAddressSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressStreet(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressStreet(testValue)
	if testValue != s.ShippingAddressStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressStreetLine2(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressStreetLine2(&testValue)
	if &testValue != s.ShippingAddressStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressNumber(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressNumber(testValue)
	if testValue != s.ShippingAddressNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressNumberAddition(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressNumberAddition(&testValue)
	if &testValue != s.ShippingAddressNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressZipCode(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressZipCode(testValue)
	if testValue != s.ShippingAddressZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressCity(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressCity(testValue)
	if testValue != s.ShippingAddressCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressState(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := uint(1e9)
	s.SetShippingAddressState(&testValue)
	if &testValue != s.ShippingAddressState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressCountry(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := uint16(65000)
	s.SetShippingAddressCountry(&testValue)
	if &testValue != s.ShippingAddressCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressPhoneNumber(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressPhoneNumber(&testValue)
	if &testValue != s.ShippingAddressPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferShippingAddressEmail(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetShippingAddressEmail(&testValue)
	if &testValue != s.ShippingAddressEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferComments(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetComments(&testValue)
	if &testValue != s.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferSellingPartyAutograph(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetSellingPartyAutograph(&testValue)
	if &testValue != s.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSaleOfferBuyingPartyAutograph(t *testing.T) {
	s := saleoffer.NewSaleOfferEntity()
	testValue := "testValue"
	s.SetBuyingPartyAutograph(&testValue)
	if &testValue != s.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

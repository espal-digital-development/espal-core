// Code generated by espal-store-synthesizer. DO NOT EDIT.
package purchaseorder_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/purchaseorder"
)

func TestPurchaseOrderTable(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	if purchaseOrder.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPurchaseOrderTableAlias(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	if purchaseOrder.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPurchaseOrderIsUpdated(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	purchaseOrder.IsUpdated()
}

func TestPurchaseOrderID(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	purchaseOrder.ID()
}

func TestPurchaseOrderCreatedByID(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetCreatedByID(testValue)
	if testValue != purchaseOrder.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderUpdatedByID(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetUpdatedByID(&testValue)
	if &testValue != purchaseOrder.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderCreatedAt(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := time.Now()
	purchaseOrder.SetCreatedAt(testValue)
	if testValue != purchaseOrder.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderUpdatedAt(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := time.Now()
	purchaseOrder.SetUpdatedAt(&testValue)
	if &testValue != purchaseOrder.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderCreatedByFirstName(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetCreatedByFirstName(&testValue)
	if &testValue != purchaseOrder.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderCreatedBySurname(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetCreatedBySurname(&testValue)
	if &testValue != purchaseOrder.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderUpdatedByFirstName(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetUpdatedByFirstName(&testValue)
	if &testValue != purchaseOrder.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderUpdatedBySurname(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetUpdatedBySurname(&testValue)
	if &testValue != purchaseOrder.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderSupplierID(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetSupplierID(testValue)
	if testValue != purchaseOrder.SupplierID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderCurrency(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := uint16(65000)
	purchaseOrder.SetCurrency(testValue)
	if testValue != purchaseOrder.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderComments(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetComments(&testValue)
	if &testValue != purchaseOrder.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderSellingPartyAutograph(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetSellingPartyAutograph(&testValue)
	if &testValue != purchaseOrder.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPurchaseOrderBuyingPartyAutograph(t *testing.T) {
	purchaseOrder := purchaseorder.NewPurchaseOrderEntity()
	testValue := "testValue"
	purchaseOrder.SetBuyingPartyAutograph(&testValue)
	if &testValue != purchaseOrder.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package purchaseorder_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/purchaseorder"
)

func TestLineTable(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	if line.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestLineTableAlias(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	if line.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestLineIsUpdated(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	line.IsUpdated()
}

func TestLineID(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	line.ID()
}

func TestLineCreatedByID(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetCreatedByID(testValue)
	if testValue != line.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineUpdatedByID(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetUpdatedByID(&testValue)
	if &testValue != line.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineCreatedAt(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := time.Now()
	line.SetCreatedAt(testValue)
	if testValue != line.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineUpdatedAt(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := time.Now()
	line.SetUpdatedAt(&testValue)
	if &testValue != line.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineCreatedByFirstName(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetCreatedByFirstName(&testValue)
	if &testValue != line.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineCreatedBySurname(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetCreatedBySurname(&testValue)
	if &testValue != line.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineUpdatedByFirstName(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetUpdatedByFirstName(&testValue)
	if &testValue != line.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineUpdatedBySurname(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetUpdatedBySurname(&testValue)
	if &testValue != line.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineSorting(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := uint(1e9)
	line.SetSorting(testValue)
	if testValue != line.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLinePurchaseOrderID(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetPurchaseOrderID(testValue)
	if testValue != line.PurchaseOrderID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineQuantity(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := int(1e8)
	line.SetQuantity(testValue)
	if testValue != line.Quantity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLinePrice(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := float32(3.14)
	line.SetPrice(testValue)
	if testValue != line.Price() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineVatPercentage(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := float32(3.14)
	line.SetVatPercentage(testValue)
	if testValue != line.VatPercentage() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestLineComments(t *testing.T) {
	line := purchaseorder.NewLineEntity()
	testValue := "testValue"
	line.SetComments(&testValue)
	if &testValue != line.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package purchaseorder

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &PurchaseOrdersStore{}

// Store represents a data interaction object.
type Store interface {
}

func (s *PurchaseOrdersStore) fetch(query string, withCreators bool, params ...interface{}) (result []*PurchaseOrder, ok bool, err error) {
	rows, err := s.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*PurchaseOrder, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		p := newPurchaseOrder()
		fields := []interface{}{&p.id, &p.createdByID, &p.updatedByID, &p.createdAt, &p.updatedAt, &p.supplierID, &p.currency, &p.comments, &p.sellingPartyAutograph, &p.buyingPartyAutograph}
		if withCreators {
			fields = append(fields, &p.createdByFirstName, &p.createdBySurname, &p.updatedByFirstName, &p.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, p)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of PurchaseOrdersStore.
func New(selecterDatabase database.Database) (*PurchaseOrdersStore, error) {
	s := &PurchaseOrdersStore{
		selecterDatabase: selecterDatabase,
	}
	return s, nil
}

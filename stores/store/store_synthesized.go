// Code generated by espal-store-synthesizer. DO NOT EDIT.
package store

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &StoresStore{}

// Store represents a data interaction object.
type Store interface {
}

func (storesStore *StoresStore) fetch(query string, withCreators bool, params ...interface{}) (result []*StoreEntity, ok bool, err error) {
	rows, err := storesStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*StoreEntity, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		storeEntity := newStoreEntity()
		fields := []interface{}{&storeEntity.id, &storeEntity.createdByID, &storeEntity.updatedByID, &storeEntity.createdAt, &storeEntity.updatedAt, &storeEntity.active, &storeEntity.sorting, &storeEntity.primaryContactPerson, &storeEntity.street, &storeEntity.streetLine2, &storeEntity.number, &storeEntity.numberAddition, &storeEntity.zipCode, &storeEntity.city, &storeEntity.state, &storeEntity.country, &storeEntity.phoneNumber, &storeEntity.email}
		if withCreators {
			fields = append(fields, &storeEntity.createdByFirstName, &storeEntity.createdBySurname, &storeEntity.updatedByFirstName, &storeEntity.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, storeEntity)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of StoresStore.
func New(selecterDatabase database.Database) (*StoresStore, error) {
	storesStore := &StoresStore{
		selecterDatabase: selecterDatabase,
	}
	return storesStore, nil
}

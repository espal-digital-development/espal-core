// Code generated by espal-store-synthesizer. DO NOT EDIT.
package store_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/store"
)

func TestStoreEntityTable(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	if storeEntity.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestStoreEntityTableAlias(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	if storeEntity.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestStoreEntityIsUpdated(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	storeEntity.IsUpdated()
}

func TestStoreEntityID(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	storeEntity.ID()
}

func TestStoreEntityCreatedByID(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetCreatedByID(testValue)
	if testValue != storeEntity.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityUpdatedByID(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetUpdatedByID(&testValue)
	if &testValue != storeEntity.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityCreatedAt(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := time.Now()
	storeEntity.SetCreatedAt(testValue)
	if testValue != storeEntity.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityUpdatedAt(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := time.Now()
	storeEntity.SetUpdatedAt(&testValue)
	if &testValue != storeEntity.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityCreatedByFirstName(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetCreatedByFirstName(&testValue)
	if &testValue != storeEntity.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityCreatedBySurname(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetCreatedBySurname(&testValue)
	if &testValue != storeEntity.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityUpdatedByFirstName(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetUpdatedByFirstName(&testValue)
	if &testValue != storeEntity.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityUpdatedBySurname(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetUpdatedBySurname(&testValue)
	if &testValue != storeEntity.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityActive(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := true
	storeEntity.SetActive(testValue)
	if testValue != storeEntity.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntitySorting(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := uint(1e9)
	storeEntity.SetSorting(testValue)
	if testValue != storeEntity.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityPrimaryContactPerson(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetPrimaryContactPerson(&testValue)
	if &testValue != storeEntity.PrimaryContactPerson() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityStreet(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetStreet(testValue)
	if testValue != storeEntity.Street() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityStreetLine2(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetStreetLine2(&testValue)
	if &testValue != storeEntity.StreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityNumber(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetNumber(testValue)
	if testValue != storeEntity.Number() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityNumberAddition(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetNumberAddition(&testValue)
	if &testValue != storeEntity.NumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityZipCode(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetZipCode(testValue)
	if testValue != storeEntity.ZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityCity(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetCity(testValue)
	if testValue != storeEntity.City() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityState(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetState(&testValue)
	if &testValue != storeEntity.State() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityCountry(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := uint16(65000)
	storeEntity.SetCountry(&testValue)
	if &testValue != storeEntity.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityPhoneNumber(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetPhoneNumber(&testValue)
	if &testValue != storeEntity.PhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestStoreEntityEmail(t *testing.T) {
	storeEntity := store.NewStoreEntityEntity()
	testValue := "testValue"
	storeEntity.SetEmail(&testValue)
	if &testValue != storeEntity.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package property_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/property"
)

func TestUnitTranslationTable(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	if unitTranslation.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestUnitTranslationTableAlias(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	if unitTranslation.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestUnitTranslationIsUpdated(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	unitTranslation.IsUpdated()
}

func TestUnitTranslationID(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	unitTranslation.ID()
}

func TestUnitTranslationCreatedByID(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetCreatedByID(testValue)
	if testValue != unitTranslation.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationUpdatedByID(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetUpdatedByID(&testValue)
	if &testValue != unitTranslation.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationCreatedAt(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := time.Now()
	unitTranslation.SetCreatedAt(testValue)
	if testValue != unitTranslation.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationUpdatedAt(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := time.Now()
	unitTranslation.SetUpdatedAt(&testValue)
	if &testValue != unitTranslation.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationCreatedByFirstName(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetCreatedByFirstName(&testValue)
	if &testValue != unitTranslation.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationCreatedBySurname(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetCreatedBySurname(&testValue)
	if &testValue != unitTranslation.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationUpdatedByFirstName(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetUpdatedByFirstName(&testValue)
	if &testValue != unitTranslation.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationUpdatedBySurname(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetUpdatedBySurname(&testValue)
	if &testValue != unitTranslation.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationLanguage(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := uint16(65000)
	unitTranslation.SetLanguage(testValue)
	if testValue != unitTranslation.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationField(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := uint16(65000)
	unitTranslation.SetField(testValue)
	if testValue != unitTranslation.Field() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationUnitID(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetUnitID(testValue)
	if testValue != unitTranslation.UnitID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationValue(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetValue(testValue)
	if testValue != unitTranslation.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitTranslationDisplay(t *testing.T) {
	unitTranslation := property.NewUnitTranslationEntity()
	testValue := "testValue"
	unitTranslation.SetDisplay(&testValue)
	if &testValue != unitTranslation.Display() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package property_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/property"
)

func TestPropertyTable(t *testing.T) {
	p := property.NewPropertyEntity()
	if p.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPropertyTableAlias(t *testing.T) {
	p := property.NewPropertyEntity()
	if p.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPropertyIsUpdated(t *testing.T) {
	p := property.NewPropertyEntity()
	p.IsUpdated()
}

func TestPropertyID(t *testing.T) {
	p := property.NewPropertyEntity()
	p.ID()
}

func TestPropertyCreatedByID(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetCreatedByID(testValue)
	if testValue != p.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyUpdatedByID(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetUpdatedByID(&testValue)
	if &testValue != p.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyCreatedAt(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := time.Now()
	p.SetCreatedAt(testValue)
	if testValue != p.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyUpdatedAt(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := time.Now()
	p.SetUpdatedAt(&testValue)
	if &testValue != p.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyCreatedByFirstName(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetCreatedByFirstName(&testValue)
	if &testValue != p.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyCreatedBySurname(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetCreatedBySurname(&testValue)
	if &testValue != p.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyUpdatedByFirstName(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetUpdatedByFirstName(&testValue)
	if &testValue != p.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyUpdatedBySurname(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetUpdatedBySurname(&testValue)
	if &testValue != p.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyUnitID(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetUnitID(&testValue)
	if &testValue != p.UnitID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyActive(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := true
	p.SetActive(testValue)
	if testValue != p.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertySorting(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := uint(1e9)
	p.SetSorting(testValue)
	if testValue != p.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyKey(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := "testValue"
	p.SetKey(&testValue)
	if &testValue != p.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyType(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := uint8(255)
	p.SetType(testValue)
	if testValue != p.Type() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyMultiLingual(t *testing.T) {
	p := property.NewPropertyEntity()
	testValue := true
	p.SetMultiLingual(testValue)
	if testValue != p.MultiLingual() {
		t.Fatal("Getter did not return the Set value")
	}
}

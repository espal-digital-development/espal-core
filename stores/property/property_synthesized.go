// Code generated by espal-store-synthesizer. DO NOT EDIT.
package property

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PropertyEntity = &Property{}

type PropertyEntity interface {
	database.Model
	UnitID() *string
	SetUnitID(unitID *string)
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	Key() *string
	SetKey(key *string)
	Type() uint8
	SetType(_type uint8)
	MultiLingual() bool
	SetMultiLingual(multiLingual bool)
}

// TableName returns the table name that belongs to the current model.
func (p *Property) TableName() string {
	return "Property"
}

// ID returns id.
func (p *Property) ID() string {
	return p.id
}

// CreatedByID returns createdByID.
func (p *Property) CreatedByID() string {
	return p.createdByID
}

// SetCreatedByID sets the createdByID.
func (p *Property) SetCreatedByID(createdByID string) {
	p.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (p *Property) UpdatedByID() *string {
	return p.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (p *Property) SetUpdatedByID(updatedByID *string) {
	p.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (p *Property) CreatedAt() time.Time {
	return p.createdAt
}

// SetCreatedAt sets the createdAt.
func (p *Property) SetCreatedAt(createdAt time.Time) {
	p.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (p *Property) UpdatedAt() *time.Time {
	return p.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (p *Property) SetUpdatedAt(updatedAt *time.Time) {
	p.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (p *Property) CreatedByFirstName() *string {
	return p.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (p *Property) SetCreatedByFirstName(createdByFirstName *string) {
	p.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (p *Property) CreatedBySurname() *string {
	return p.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (p *Property) SetCreatedBySurname(createdBySurname *string) {
	p.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (p *Property) UpdatedByFirstName() *string {
	return p.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (p *Property) SetUpdatedByFirstName(updatedByFirstName *string) {
	p.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (p *Property) UpdatedBySurname() *string {
	return p.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (p *Property) SetUpdatedBySurname(updatedBySurname *string) {
	p.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (p *Property) IsUpdated() bool {
	return p.updatedByID != nil
}

// UnitID returns unitID.
func (p *Property) UnitID() *string {
	return p.unitID
}

// SetUnitID sets the unitID.
func (p *Property) SetUnitID(unitID *string) {
	p.unitID = unitID
}

// Active returns active.
func (p *Property) Active() bool {
	return p.active
}

// SetActive sets the active.
func (p *Property) SetActive(active bool) {
	p.active = active
}

// Sorting returns sorting.
func (p *Property) Sorting() uint {
	return p.sorting
}

// SetSorting sets the sorting.
func (p *Property) SetSorting(sorting uint) {
	p.sorting = sorting
}

// Key returns key.
func (p *Property) Key() *string {
	return p.key
}

// SetKey sets the key.
func (p *Property) SetKey(key *string) {
	p.key = key
}

// Type returns _type.
func (p *Property) Type() uint8 {
	return p._type
}

// SetType sets the _type.
func (p *Property) SetType(_type uint8) {
	p._type = _type
}

// MultiLingual returns multiLingual.
func (p *Property) MultiLingual() bool {
	return p.multiLingual
}

// SetMultiLingual sets the multiLingual.
func (p *Property) SetMultiLingual(multiLingual bool) {
	p.multiLingual = multiLingual
}

func newProperty() *Property {
	return &Property{}
}

// New returns a new instance of PropertyEntity.
func NewPropertyEntity() PropertyEntity {
	return newProperty()
}

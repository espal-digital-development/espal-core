// Code generated by espal-store-synthesizer. DO NOT EDIT.
package property

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ OptionEntity = &Option{}

type OptionEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	Key() *string
	SetKey(key *string)
	PropertyID() string
	SetPropertyID(propertyID string)
}

// ID returns id.
func (o *Option) ID() string {
	return o.id
}

// CreatedByID returns createdByID.
func (o *Option) CreatedByID() string {
	return o.createdByID
}

// SetCreatedByID sets the createdByID.
func (o *Option) SetCreatedByID(createdByID string) {
	o.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (o *Option) UpdatedByID() *string {
	return o.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (o *Option) SetUpdatedByID(updatedByID *string) {
	o.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (o *Option) CreatedAt() time.Time {
	return o.createdAt
}

// SetCreatedAt sets the createdAt.
func (o *Option) SetCreatedAt(createdAt time.Time) {
	o.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (o *Option) UpdatedAt() *time.Time {
	return o.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (o *Option) SetUpdatedAt(updatedAt *time.Time) {
	o.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (o *Option) CreatedByFirstName() *string {
	return o.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (o *Option) SetCreatedByFirstName(createdByFirstName *string) {
	o.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (o *Option) CreatedBySurname() *string {
	return o.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (o *Option) SetCreatedBySurname(createdBySurname *string) {
	o.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (o *Option) UpdatedByFirstName() *string {
	return o.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (o *Option) SetUpdatedByFirstName(updatedByFirstName *string) {
	o.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (o *Option) UpdatedBySurname() *string {
	return o.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (o *Option) SetUpdatedBySurname(updatedBySurname *string) {
	o.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (o *Option) IsUpdated() bool {
	return o.updatedByID != nil
}

// Active returns active.
func (o *Option) Active() bool {
	return o.active
}

// SetActive sets the active.
func (o *Option) SetActive(active bool) {
	o.active = active
}

// Sorting returns sorting.
func (o *Option) Sorting() uint {
	return o.sorting
}

// SetSorting sets the sorting.
func (o *Option) SetSorting(sorting uint) {
	o.sorting = sorting
}

// Key returns key.
func (o *Option) Key() *string {
	return o.key
}

// SetKey sets the key.
func (o *Option) SetKey(key *string) {
	o.key = key
}

// PropertyID returns propertyID.
func (o *Option) PropertyID() string {
	return o.propertyID
}

// SetPropertyID sets the propertyID.
func (o *Option) SetPropertyID(propertyID string) {
	o.propertyID = propertyID
}

func newOption() *Option {
	return &Option{}
}

// New returns a new instance of OptionEntity.
func NewOptionEntity() OptionEntity {
	return newOption()
}

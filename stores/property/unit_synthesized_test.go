// Code generated by espal-store-synthesizer. DO NOT EDIT.
package property_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/property"
)

func TestUnitTable(t *testing.T) {
	unit := property.NewUnitEntity()
	if unit.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestUnitTableAlias(t *testing.T) {
	unit := property.NewUnitEntity()
	if unit.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestUnitIsUpdated(t *testing.T) {
	unit := property.NewUnitEntity()
	unit.IsUpdated()
}

func TestUnitID(t *testing.T) {
	unit := property.NewUnitEntity()
	unit.ID()
}

func TestUnitCreatedByID(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetCreatedByID(testValue)
	if testValue != unit.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitUpdatedByID(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetUpdatedByID(&testValue)
	if &testValue != unit.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitCreatedAt(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := time.Now()
	unit.SetCreatedAt(testValue)
	if testValue != unit.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitUpdatedAt(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := time.Now()
	unit.SetUpdatedAt(&testValue)
	if &testValue != unit.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitCreatedByFirstName(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetCreatedByFirstName(&testValue)
	if &testValue != unit.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitCreatedBySurname(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetCreatedBySurname(&testValue)
	if &testValue != unit.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitUpdatedByFirstName(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetUpdatedByFirstName(&testValue)
	if &testValue != unit.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitUpdatedBySurname(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetUpdatedBySurname(&testValue)
	if &testValue != unit.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUnitDisplay(t *testing.T) {
	unit := property.NewUnitEntity()
	testValue := "testValue"
	unit.SetDisplay(testValue)
	if testValue != unit.Display() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package emailtemplate_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/emailtemplate"
)

func TestEmailTemplateTable(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	if emailTemplate.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestEmailTemplateTableAlias(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	if emailTemplate.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestEmailTemplateIsUpdated(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	emailTemplate.IsUpdated()
}

func TestEmailTemplateID(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	emailTemplate.ID()
}

func TestEmailTemplateCreatedByID(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetCreatedByID(testValue)
	if testValue != emailTemplate.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateUpdatedByID(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetUpdatedByID(&testValue)
	if &testValue != emailTemplate.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateCreatedAt(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := time.Now()
	emailTemplate.SetCreatedAt(testValue)
	if testValue != emailTemplate.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateUpdatedAt(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := time.Now()
	emailTemplate.SetUpdatedAt(&testValue)
	if &testValue != emailTemplate.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateCreatedByFirstName(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetCreatedByFirstName(&testValue)
	if &testValue != emailTemplate.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateCreatedBySurname(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetCreatedBySurname(&testValue)
	if &testValue != emailTemplate.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateUpdatedByFirstName(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetUpdatedByFirstName(&testValue)
	if &testValue != emailTemplate.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateUpdatedBySurname(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetUpdatedBySurname(&testValue)
	if &testValue != emailTemplate.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateDomainID(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := "testValue"
	emailTemplate.SetDomainID(testValue)
	if testValue != emailTemplate.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestEmailTemplateActive(t *testing.T) {
	emailTemplate := emailtemplate.NewEmailTemplateEntity()
	testValue := true
	emailTemplate.SetActive(testValue)
	if testValue != emailTemplate.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

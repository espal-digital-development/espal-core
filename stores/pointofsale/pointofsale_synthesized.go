// Code generated by espal-store-synthesizer. DO NOT EDIT.
package pointofsale

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PointOfSaleEntity = &PointOfSale{}

type PointOfSaleEntity interface {
	database.Model
	ShopID() string
	SetShopID(shopID string)
}

// TableName returns the table name that belongs to the current model.
func (pointOfSale *PointOfSale) TableName() string {
	return "PointOfSale"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (pointOfSale *PointOfSale) TableAlias() string {
	return "pose"
}

// ID returns id.
func (pointOfSale *PointOfSale) ID() string {
	return pointOfSale.id
}

// CreatedByID returns createdByID.
func (pointOfSale *PointOfSale) CreatedByID() string {
	return pointOfSale.createdByID
}

// SetCreatedByID sets the createdByID.
func (pointOfSale *PointOfSale) SetCreatedByID(createdByID string) {
	pointOfSale.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (pointOfSale *PointOfSale) UpdatedByID() *string {
	return pointOfSale.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (pointOfSale *PointOfSale) SetUpdatedByID(updatedByID *string) {
	pointOfSale.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (pointOfSale *PointOfSale) CreatedAt() time.Time {
	return pointOfSale.createdAt
}

// SetCreatedAt sets the createdAt.
func (pointOfSale *PointOfSale) SetCreatedAt(createdAt time.Time) {
	pointOfSale.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (pointOfSale *PointOfSale) UpdatedAt() *time.Time {
	return pointOfSale.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (pointOfSale *PointOfSale) SetUpdatedAt(updatedAt *time.Time) {
	pointOfSale.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (pointOfSale *PointOfSale) CreatedByFirstName() *string {
	return pointOfSale.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (pointOfSale *PointOfSale) SetCreatedByFirstName(createdByFirstName *string) {
	pointOfSale.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (pointOfSale *PointOfSale) CreatedBySurname() *string {
	return pointOfSale.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (pointOfSale *PointOfSale) SetCreatedBySurname(createdBySurname *string) {
	pointOfSale.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (pointOfSale *PointOfSale) UpdatedByFirstName() *string {
	return pointOfSale.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (pointOfSale *PointOfSale) SetUpdatedByFirstName(updatedByFirstName *string) {
	pointOfSale.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (pointOfSale *PointOfSale) UpdatedBySurname() *string {
	return pointOfSale.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (pointOfSale *PointOfSale) SetUpdatedBySurname(updatedBySurname *string) {
	pointOfSale.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (pointOfSale *PointOfSale) IsUpdated() bool {
	return pointOfSale.updatedByID != nil
}

// ShopID returns shopID.
func (pointOfSale *PointOfSale) ShopID() string {
	return pointOfSale.shopID
}

// SetShopID sets the shopID.
func (pointOfSale *PointOfSale) SetShopID(shopID string) {
	pointOfSale.shopID = shopID
}

func newPointOfSale() *PointOfSale {
	return &PointOfSale{}
}

// New returns a new instance of PointOfSaleEntity.
func NewPointOfSaleEntity() PointOfSaleEntity {
	return newPointOfSale()
}

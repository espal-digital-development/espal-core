// Code generated by espal-store-synthesizer. DO NOT EDIT.
package pointofsale_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/pointofsale"
)

func TestPointOfSaleTable(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	if pointOfSale.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPointOfSaleTableAlias(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	if pointOfSale.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPointOfSaleIsUpdated(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	pointOfSale.IsUpdated()
}

func TestPointOfSaleID(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	pointOfSale.ID()
}

func TestPointOfSaleCreatedByID(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetCreatedByID(testValue)
	if testValue != pointOfSale.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleUpdatedByID(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetUpdatedByID(&testValue)
	if &testValue != pointOfSale.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleCreatedAt(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := time.Now()
	pointOfSale.SetCreatedAt(testValue)
	if testValue != pointOfSale.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleUpdatedAt(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := time.Now()
	pointOfSale.SetUpdatedAt(&testValue)
	if &testValue != pointOfSale.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleCreatedByFirstName(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetCreatedByFirstName(&testValue)
	if &testValue != pointOfSale.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleCreatedBySurname(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetCreatedBySurname(&testValue)
	if &testValue != pointOfSale.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleUpdatedByFirstName(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetUpdatedByFirstName(&testValue)
	if &testValue != pointOfSale.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleUpdatedBySurname(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetUpdatedBySurname(&testValue)
	if &testValue != pointOfSale.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPointOfSaleShopID(t *testing.T) {
	pointOfSale := pointofsale.NewPointOfSaleEntity()
	testValue := "testValue"
	pointOfSale.SetShopID(testValue)
	if testValue != pointOfSale.ShopID() {
		t.Fatal("Getter did not return the Set value")
	}
}

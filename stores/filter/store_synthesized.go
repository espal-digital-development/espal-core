// Code generated by espal-store-synthesizer. DO NOT EDIT.
package filter

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &FiltersStore{}

// Store represents a data interaction object.
type Store interface {
}

func (filtersStore *FiltersStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Filter, ok bool, err error) {
	rows, err := filtersStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Filter, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		filter := newFilter()
		fields := []interface{}{&filter.id, &filter.createdByID, &filter.updatedByID, &filter.createdAt, &filter.updatedAt}
		if withCreators {
			fields = append(fields, &filter.createdByFirstName, &filter.createdBySurname, &filter.updatedByFirstName, &filter.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, filter)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of FiltersStore.
func New(selecterDatabase database.Database) (*FiltersStore, error) {
	filtersStore := &FiltersStore{
		selecterDatabase: selecterDatabase,
	}
	return filtersStore, nil
}

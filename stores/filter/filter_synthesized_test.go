// Code generated by espal-store-synthesizer. DO NOT EDIT.
package filter_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/filter"
)

func TestFilterTable(t *testing.T) {
	f := filter.NewFilterEntity()
	if f.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestFilterTableAlias(t *testing.T) {
	f := filter.NewFilterEntity()
	if f.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestFilterIsUpdated(t *testing.T) {
	f := filter.NewFilterEntity()
	f.IsUpdated()
}

func TestFilterID(t *testing.T) {
	f := filter.NewFilterEntity()
	f.ID()
}

func TestFilterCreatedByID(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := "testValue"
	f.SetCreatedByID(testValue)
	if testValue != f.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterUpdatedByID(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := "testValue"
	f.SetUpdatedByID(&testValue)
	if &testValue != f.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterCreatedAt(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := time.Now()
	f.SetCreatedAt(testValue)
	if testValue != f.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterUpdatedAt(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := time.Now()
	f.SetUpdatedAt(&testValue)
	if &testValue != f.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterCreatedByFirstName(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := "testValue"
	f.SetCreatedByFirstName(&testValue)
	if &testValue != f.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterCreatedBySurname(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := "testValue"
	f.SetCreatedBySurname(&testValue)
	if &testValue != f.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterUpdatedByFirstName(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := "testValue"
	f.SetUpdatedByFirstName(&testValue)
	if &testValue != f.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFilterUpdatedBySurname(t *testing.T) {
	f := filter.NewFilterEntity()
	testValue := "testValue"
	f.SetUpdatedBySurname(&testValue)
	if &testValue != f.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package deliverymethod_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/deliverymethod"
)

func TestDeliveryMethodTable(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	if deliveryMethod.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestDeliveryMethodTableAlias(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	if deliveryMethod.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestDeliveryMethodIsUpdated(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	deliveryMethod.IsUpdated()
}

func TestDeliveryMethodID(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	deliveryMethod.ID()
}

func TestDeliveryMethodCreatedByID(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := "testValue"
	deliveryMethod.SetCreatedByID(testValue)
	if testValue != deliveryMethod.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodUpdatedByID(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := "testValue"
	deliveryMethod.SetUpdatedByID(&testValue)
	if &testValue != deliveryMethod.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodCreatedAt(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := time.Now()
	deliveryMethod.SetCreatedAt(testValue)
	if testValue != deliveryMethod.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodUpdatedAt(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := time.Now()
	deliveryMethod.SetUpdatedAt(&testValue)
	if &testValue != deliveryMethod.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodCreatedByFirstName(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := "testValue"
	deliveryMethod.SetCreatedByFirstName(&testValue)
	if &testValue != deliveryMethod.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodCreatedBySurname(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := "testValue"
	deliveryMethod.SetCreatedBySurname(&testValue)
	if &testValue != deliveryMethod.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodUpdatedByFirstName(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := "testValue"
	deliveryMethod.SetUpdatedByFirstName(&testValue)
	if &testValue != deliveryMethod.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodUpdatedBySurname(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := "testValue"
	deliveryMethod.SetUpdatedBySurname(&testValue)
	if &testValue != deliveryMethod.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestDeliveryMethodPrice(t *testing.T) {
	deliveryMethod := deliverymethod.NewDeliveryMethodEntity()
	testValue := 6.28
	deliveryMethod.SetPrice(testValue)
	if testValue != deliveryMethod.Price() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package pickingslip

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PickingSlipEntity = &PickingSlip{}

type PickingSlipEntity interface {
	database.Model
	Comments() *string
	SetComments(comments *string)
}

// TableName returns the table name that belongs to the current model.
func (pickingSlip *PickingSlip) TableName() string {
	return "PickingSlip"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (pickingSlip *PickingSlip) TableAlias() string {
	return "pse"
}

// ID returns id.
func (pickingSlip *PickingSlip) ID() string {
	return pickingSlip.id
}

// CreatedByID returns createdByID.
func (pickingSlip *PickingSlip) CreatedByID() string {
	return pickingSlip.createdByID
}

// SetCreatedByID sets the createdByID.
func (pickingSlip *PickingSlip) SetCreatedByID(createdByID string) {
	pickingSlip.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (pickingSlip *PickingSlip) UpdatedByID() *string {
	return pickingSlip.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (pickingSlip *PickingSlip) SetUpdatedByID(updatedByID *string) {
	pickingSlip.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (pickingSlip *PickingSlip) CreatedAt() time.Time {
	return pickingSlip.createdAt
}

// SetCreatedAt sets the createdAt.
func (pickingSlip *PickingSlip) SetCreatedAt(createdAt time.Time) {
	pickingSlip.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (pickingSlip *PickingSlip) UpdatedAt() *time.Time {
	return pickingSlip.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (pickingSlip *PickingSlip) SetUpdatedAt(updatedAt *time.Time) {
	pickingSlip.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (pickingSlip *PickingSlip) CreatedByFirstName() *string {
	return pickingSlip.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (pickingSlip *PickingSlip) SetCreatedByFirstName(createdByFirstName *string) {
	pickingSlip.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (pickingSlip *PickingSlip) CreatedBySurname() *string {
	return pickingSlip.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (pickingSlip *PickingSlip) SetCreatedBySurname(createdBySurname *string) {
	pickingSlip.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (pickingSlip *PickingSlip) UpdatedByFirstName() *string {
	return pickingSlip.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (pickingSlip *PickingSlip) SetUpdatedByFirstName(updatedByFirstName *string) {
	pickingSlip.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (pickingSlip *PickingSlip) UpdatedBySurname() *string {
	return pickingSlip.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (pickingSlip *PickingSlip) SetUpdatedBySurname(updatedBySurname *string) {
	pickingSlip.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (pickingSlip *PickingSlip) IsUpdated() bool {
	return pickingSlip.updatedByID != nil
}

// Comments returns comments.
func (pickingSlip *PickingSlip) Comments() *string {
	return pickingSlip.comments
}

// SetComments sets the comments.
func (pickingSlip *PickingSlip) SetComments(comments *string) {
	pickingSlip.comments = comments
}

func newPickingSlip() *PickingSlip {
	return &PickingSlip{}
}

// New returns a new instance of PickingSlipEntity.
func NewPickingSlipEntity() PickingSlipEntity {
	return newPickingSlip()
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package frequentlyaskedquestion_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/frequentlyaskedquestion"
)

func TestFrequentlyAskedQuestionTable(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	if f.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestFrequentlyAskedQuestionTableAlias(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	if f.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestFrequentlyAskedQuestionIsUpdated(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	f.IsUpdated()
}

func TestFrequentlyAskedQuestionID(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	f.ID()
}

func TestFrequentlyAskedQuestionCreatedByID(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetCreatedByID(testValue)
	if testValue != f.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionUpdatedByID(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetUpdatedByID(&testValue)
	if &testValue != f.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionCreatedAt(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := time.Now()
	f.SetCreatedAt(testValue)
	if testValue != f.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionUpdatedAt(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := time.Now()
	f.SetUpdatedAt(&testValue)
	if &testValue != f.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionCreatedByFirstName(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetCreatedByFirstName(&testValue)
	if &testValue != f.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionCreatedBySurname(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetCreatedBySurname(&testValue)
	if &testValue != f.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionUpdatedByFirstName(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetUpdatedByFirstName(&testValue)
	if &testValue != f.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionUpdatedBySurname(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetUpdatedBySurname(&testValue)
	if &testValue != f.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionFrequentlyAskedQuestionSectionID(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetFrequentlyAskedQuestionSectionID(&testValue)
	if &testValue != f.FrequentlyAskedQuestionSectionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionDomainID(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := "testValue"
	f.SetDomainID(testValue)
	if testValue != f.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionActive(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := true
	f.SetActive(testValue)
	if testValue != f.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestFrequentlyAskedQuestionSorting(t *testing.T) {
	f := frequentlyaskedquestion.NewFrequentlyAskedQuestionEntity()
	testValue := uint(1e9)
	f.SetSorting(testValue)
	if testValue != f.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

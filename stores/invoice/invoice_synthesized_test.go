// Code generated by espal-store-synthesizer. DO NOT EDIT.
package invoice_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/invoice"
)

func TestInvoiceTable(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	if i.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestInvoiceTableAlias(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	if i.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestInvoiceIsUpdated(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	i.IsUpdated()
}

func TestInvoiceID(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	i.ID()
}

func TestInvoiceCreatedByID(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetCreatedByID(testValue)
	if testValue != i.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedByID(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUpdatedByID(&testValue)
	if &testValue != i.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCreatedAt(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := time.Now()
	i.SetCreatedAt(testValue)
	if testValue != i.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedAt(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := time.Now()
	i.SetUpdatedAt(&testValue)
	if &testValue != i.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCreatedByFirstName(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetCreatedByFirstName(&testValue)
	if &testValue != i.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCreatedBySurname(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetCreatedBySurname(&testValue)
	if &testValue != i.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedByFirstName(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUpdatedByFirstName(&testValue)
	if &testValue != i.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedBySurname(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUpdatedBySurname(&testValue)
	if &testValue != i.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceDomainID(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetDomainID(testValue)
	if testValue != i.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserID(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserID(testValue)
	if testValue != i.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceSaleOrderID(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetSaleOrderID(testValue)
	if testValue != i.SaleOrderID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCurrency(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := uint(1e9)
	i.SetCurrency(testValue)
	if testValue != i.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCode(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetCode(&testValue)
	if &testValue != i.Code() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoBusiness(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := true
	i.SetUserInfoBusiness(testValue)
	if testValue != i.UserInfoBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoBusinessCocNumber(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoBusinessCocNumber(&testValue)
	if &testValue != i.UserInfoBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoFirstName(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoFirstName(testValue)
	if testValue != i.UserInfoFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoSurname(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoSurname(testValue)
	if testValue != i.UserInfoSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoStreet(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoStreet(testValue)
	if testValue != i.UserInfoStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoStreetLine2(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoStreetLine2(&testValue)
	if &testValue != i.UserInfoStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoNumber(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoNumber(testValue)
	if testValue != i.UserInfoNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoNumberAddition(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoNumberAddition(&testValue)
	if &testValue != i.UserInfoNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoZipCode(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoZipCode(testValue)
	if testValue != i.UserInfoZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoCity(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoCity(testValue)
	if testValue != i.UserInfoCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoState(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := uint(1e9)
	i.SetUserInfoState(&testValue)
	if &testValue != i.UserInfoState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoCountry(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := uint16(65000)
	i.SetUserInfoCountry(&testValue)
	if &testValue != i.UserInfoCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoPhoneNumber(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoPhoneNumber(&testValue)
	if &testValue != i.UserInfoPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoEmail(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetUserInfoEmail(&testValue)
	if &testValue != i.UserInfoEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceComments(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetComments(&testValue)
	if &testValue != i.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceSellingPartyAutograph(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetSellingPartyAutograph(&testValue)
	if &testValue != i.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceBuyingPartyAutograph(t *testing.T) {
	i := invoice.NewInvoiceEntity()
	testValue := "testValue"
	i.SetBuyingPartyAutograph(&testValue)
	if &testValue != i.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

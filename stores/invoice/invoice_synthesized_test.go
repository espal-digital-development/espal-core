// Code generated by espal-store-synthesizer. DO NOT EDIT.
package invoice_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/invoice"
)

func TestInvoiceTable(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	if invoice.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestInvoiceTableAlias(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	if invoice.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestInvoiceIsUpdated(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	invoice.IsUpdated()
}

func TestInvoiceID(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	invoice.ID()
}

func TestInvoiceCreatedByID(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetCreatedByID(testValue)
	if testValue != invoice.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedByID(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUpdatedByID(&testValue)
	if &testValue != invoice.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCreatedAt(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := time.Now()
	invoice.SetCreatedAt(testValue)
	if testValue != invoice.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedAt(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := time.Now()
	invoice.SetUpdatedAt(&testValue)
	if &testValue != invoice.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCreatedByFirstName(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetCreatedByFirstName(&testValue)
	if &testValue != invoice.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCreatedBySurname(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetCreatedBySurname(&testValue)
	if &testValue != invoice.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedByFirstName(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUpdatedByFirstName(&testValue)
	if &testValue != invoice.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUpdatedBySurname(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUpdatedBySurname(&testValue)
	if &testValue != invoice.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceDomainID(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetDomainID(testValue)
	if testValue != invoice.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserID(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserID(testValue)
	if testValue != invoice.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceSaleOrderID(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetSaleOrderID(testValue)
	if testValue != invoice.SaleOrderID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCurrency(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := uint(1e9)
	invoice.SetCurrency(testValue)
	if testValue != invoice.Currency() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceCode(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetCode(&testValue)
	if &testValue != invoice.Code() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoBusiness(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := true
	invoice.SetUserInfoBusiness(testValue)
	if testValue != invoice.UserInfoBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoBusinessCocNumber(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoBusinessCocNumber(&testValue)
	if &testValue != invoice.UserInfoBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoFirstName(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoFirstName(testValue)
	if testValue != invoice.UserInfoFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoSurname(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoSurname(testValue)
	if testValue != invoice.UserInfoSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoStreet(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoStreet(testValue)
	if testValue != invoice.UserInfoStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoStreetLine2(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoStreetLine2(&testValue)
	if &testValue != invoice.UserInfoStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoNumber(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoNumber(testValue)
	if testValue != invoice.UserInfoNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoNumberAddition(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoNumberAddition(&testValue)
	if &testValue != invoice.UserInfoNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoZipCode(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoZipCode(testValue)
	if testValue != invoice.UserInfoZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoCity(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoCity(testValue)
	if testValue != invoice.UserInfoCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoState(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := uint(1e9)
	invoice.SetUserInfoState(&testValue)
	if &testValue != invoice.UserInfoState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoCountry(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := uint16(65000)
	invoice.SetUserInfoCountry(&testValue)
	if &testValue != invoice.UserInfoCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoPhoneNumber(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoPhoneNumber(&testValue)
	if &testValue != invoice.UserInfoPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceUserInfoEmail(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetUserInfoEmail(&testValue)
	if &testValue != invoice.UserInfoEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceComments(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetComments(&testValue)
	if &testValue != invoice.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceSellingPartyAutograph(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetSellingPartyAutograph(&testValue)
	if &testValue != invoice.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestInvoiceBuyingPartyAutograph(t *testing.T) {
	invoice := invoice.NewInvoiceEntity()
	testValue := "testValue"
	invoice.SetBuyingPartyAutograph(&testValue)
	if &testValue != invoice.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

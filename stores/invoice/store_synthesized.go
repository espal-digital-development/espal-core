// Code generated by espal-store-synthesizer. DO NOT EDIT.
package invoice

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &InvoicesStore{}

// Store represents a data interaction object.
type Store interface {
}

func (invoicesStore *InvoicesStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Invoice, ok bool, err error) {
	rows, err := invoicesStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Invoice, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		invoice := newInvoice()
		fields := []interface{}{&invoice.id, &invoice.createdByID, &invoice.updatedByID, &invoice.createdAt, &invoice.updatedAt, &invoice.domainID, &invoice.userID, &invoice.saleOrderID, &invoice.currency, &invoice.code, &invoice.userInfoBusiness, &invoice.userInfoBusinessCocNumber, &invoice.userInfoFirstName, &invoice.userInfoSurname, &invoice.userInfoStreet, &invoice.userInfoStreetLine2, &invoice.userInfoNumber, &invoice.userInfoNumberAddition, &invoice.userInfoZipCode, &invoice.userInfoCity, &invoice.userInfoState, &invoice.userInfoCountry, &invoice.userInfoPhoneNumber, &invoice.userInfoEmail, &invoice.comments, &invoice.sellingPartyAutograph, &invoice.buyingPartyAutograph}
		if withCreators {
			fields = append(fields, &invoice.createdByFirstName, &invoice.createdBySurname, &invoice.updatedByFirstName, &invoice.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, invoice)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of InvoicesStore.
func New(selecterDatabase database.Database) (*InvoicesStore, error) {
	invoicesStore := &InvoicesStore{
		selecterDatabase: selecterDatabase,
	}
	return invoicesStore, nil
}

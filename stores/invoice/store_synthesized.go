// Code generated by espal-store-synthesizer. DO NOT EDIT.
package invoice

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &InvoicesStore{}

// Store represents a data interaction object.
type Store interface {
}

func (s *InvoicesStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Invoice, ok bool, err error) {
	rows, err := s.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Invoice, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		i := newInvoice()
		fields := []interface{}{&i.id, &i.createdByID, &i.updatedByID, &i.createdAt, &i.updatedAt, &i.domainID, &i.userID, &i.saleOrderID, &i.currency, &i.code, &i.userInfoBusiness, &i.userInfoBusinessCocNumber, &i.userInfoFirstName, &i.userInfoSurname, &i.userInfoStreet, &i.userInfoStreetLine2, &i.userInfoNumber, &i.userInfoNumberAddition, &i.userInfoZipCode, &i.userInfoCity, &i.userInfoState, &i.userInfoCountry, &i.userInfoPhoneNumber, &i.userInfoEmail, &i.comments, &i.sellingPartyAutograph, &i.buyingPartyAutograph}
		if withCreators {
			fields = append(fields, &i.createdByFirstName, &i.createdBySurname, &i.updatedByFirstName, &i.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, i)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of InvoicesStore.
func New(selecterDatabase database.Database) (*InvoicesStore, error) {
	s := &InvoicesStore{
		selecterDatabase: selecterDatabase,
	}
	return s, nil
}

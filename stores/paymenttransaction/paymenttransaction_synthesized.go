// Code generated by espal-store-synthesizer. DO NOT EDIT.
package paymenttransaction

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PaymentTransactionEntity = &PaymentTransaction{}

type PaymentTransactionEntity interface {
	database.Model
	PaymentAccountID() string
	SetPaymentAccountID(paymentAccountID string)
	SaleOrderID() string
	SetSaleOrderID(saleOrderID string)
	ResponseCode() int
	SetResponseCode(responseCode int)
	Amount() float32
	SetAmount(amount float32)
	Hash() *string
	SetHash(hash *string)
	Message() *string
	SetMessage(message *string)
}

// TableName returns the table name that belongs to the current model.
func (p *PaymentTransaction) TableName() string {
	return "PaymentTransaction"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (p *PaymentTransaction) TableAlias() string {
	return "pte"
}

// ID returns id.
func (p *PaymentTransaction) ID() string {
	return p.id
}

// CreatedByID returns createdByID.
func (p *PaymentTransaction) CreatedByID() string {
	return p.createdByID
}

// SetCreatedByID sets the createdByID.
func (p *PaymentTransaction) SetCreatedByID(createdByID string) {
	p.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (p *PaymentTransaction) UpdatedByID() *string {
	return p.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (p *PaymentTransaction) SetUpdatedByID(updatedByID *string) {
	p.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (p *PaymentTransaction) CreatedAt() time.Time {
	return p.createdAt
}

// SetCreatedAt sets the createdAt.
func (p *PaymentTransaction) SetCreatedAt(createdAt time.Time) {
	p.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (p *PaymentTransaction) UpdatedAt() *time.Time {
	return p.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (p *PaymentTransaction) SetUpdatedAt(updatedAt *time.Time) {
	p.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (p *PaymentTransaction) CreatedByFirstName() *string {
	return p.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (p *PaymentTransaction) SetCreatedByFirstName(createdByFirstName *string) {
	p.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (p *PaymentTransaction) CreatedBySurname() *string {
	return p.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (p *PaymentTransaction) SetCreatedBySurname(createdBySurname *string) {
	p.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (p *PaymentTransaction) UpdatedByFirstName() *string {
	return p.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (p *PaymentTransaction) SetUpdatedByFirstName(updatedByFirstName *string) {
	p.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (p *PaymentTransaction) UpdatedBySurname() *string {
	return p.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (p *PaymentTransaction) SetUpdatedBySurname(updatedBySurname *string) {
	p.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (p *PaymentTransaction) IsUpdated() bool {
	return p.updatedByID != nil
}

// PaymentAccountID returns paymentAccountID.
func (p *PaymentTransaction) PaymentAccountID() string {
	return p.paymentAccountID
}

// SetPaymentAccountID sets the paymentAccountID.
func (p *PaymentTransaction) SetPaymentAccountID(paymentAccountID string) {
	p.paymentAccountID = paymentAccountID
}

// SaleOrderID returns saleOrderID.
func (p *PaymentTransaction) SaleOrderID() string {
	return p.saleOrderID
}

// SetSaleOrderID sets the saleOrderID.
func (p *PaymentTransaction) SetSaleOrderID(saleOrderID string) {
	p.saleOrderID = saleOrderID
}

// ResponseCode returns responseCode.
func (p *PaymentTransaction) ResponseCode() int {
	return p.responseCode
}

// SetResponseCode sets the responseCode.
func (p *PaymentTransaction) SetResponseCode(responseCode int) {
	p.responseCode = responseCode
}

// Amount returns amount.
func (p *PaymentTransaction) Amount() float32 {
	return p.amount
}

// SetAmount sets the amount.
func (p *PaymentTransaction) SetAmount(amount float32) {
	p.amount = amount
}

// Hash returns hash.
func (p *PaymentTransaction) Hash() *string {
	return p.hash
}

// SetHash sets the hash.
func (p *PaymentTransaction) SetHash(hash *string) {
	p.hash = hash
}

// Message returns message.
func (p *PaymentTransaction) Message() *string {
	return p.message
}

// SetMessage sets the message.
func (p *PaymentTransaction) SetMessage(message *string) {
	p.message = message
}

func newPaymentTransaction() *PaymentTransaction {
	return &PaymentTransaction{}
}

// New returns a new instance of PaymentTransactionEntity.
func NewPaymentTransactionEntity() PaymentTransactionEntity {
	return newPaymentTransaction()
}

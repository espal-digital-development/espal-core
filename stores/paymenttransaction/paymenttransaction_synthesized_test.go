// Code generated by espal-store-synthesizer. DO NOT EDIT.
package paymenttransaction_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/paymenttransaction"
)

func TestPaymentTransactionTable(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	if paymentTransaction.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPaymentTransactionTableAlias(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	if paymentTransaction.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPaymentTransactionIsUpdated(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	paymentTransaction.IsUpdated()
}

func TestPaymentTransactionID(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	paymentTransaction.ID()
}

func TestPaymentTransactionCreatedByID(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetCreatedByID(testValue)
	if testValue != paymentTransaction.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionUpdatedByID(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetUpdatedByID(&testValue)
	if &testValue != paymentTransaction.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionCreatedAt(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := time.Now()
	paymentTransaction.SetCreatedAt(testValue)
	if testValue != paymentTransaction.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionUpdatedAt(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := time.Now()
	paymentTransaction.SetUpdatedAt(&testValue)
	if &testValue != paymentTransaction.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionCreatedByFirstName(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetCreatedByFirstName(&testValue)
	if &testValue != paymentTransaction.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionCreatedBySurname(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetCreatedBySurname(&testValue)
	if &testValue != paymentTransaction.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionUpdatedByFirstName(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetUpdatedByFirstName(&testValue)
	if &testValue != paymentTransaction.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionUpdatedBySurname(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetUpdatedBySurname(&testValue)
	if &testValue != paymentTransaction.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionPaymentAccountID(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetPaymentAccountID(testValue)
	if testValue != paymentTransaction.PaymentAccountID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionSaleOrderID(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetSaleOrderID(testValue)
	if testValue != paymentTransaction.SaleOrderID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionResponseCode(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := int(1e8)
	paymentTransaction.SetResponseCode(testValue)
	if testValue != paymentTransaction.ResponseCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionAmount(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := float32(3.14)
	paymentTransaction.SetAmount(testValue)
	if testValue != paymentTransaction.Amount() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionHash(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetHash(&testValue)
	if &testValue != paymentTransaction.Hash() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentTransactionMessage(t *testing.T) {
	paymentTransaction := paymenttransaction.NewPaymentTransactionEntity()
	testValue := "testValue"
	paymentTransaction.SetMessage(&testValue)
	if &testValue != paymentTransaction.Message() {
		t.Fatal("Getter did not return the Set value")
	}
}

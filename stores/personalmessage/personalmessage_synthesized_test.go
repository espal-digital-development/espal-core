// Code generated by espal-store-synthesizer. DO NOT EDIT.
package personalmessage_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/personalmessage"
)

func TestPersonalMessageTable(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	if personalMessage.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPersonalMessageTableAlias(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	if personalMessage.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPersonalMessageIsUpdated(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	personalMessage.IsUpdated()
}

func TestPersonalMessageID(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	personalMessage.ID()
}

func TestPersonalMessageCreatedByID(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetCreatedByID(testValue)
	if testValue != personalMessage.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageUpdatedByID(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetUpdatedByID(&testValue)
	if &testValue != personalMessage.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageCreatedAt(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := time.Now()
	personalMessage.SetCreatedAt(testValue)
	if testValue != personalMessage.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageUpdatedAt(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := time.Now()
	personalMessage.SetUpdatedAt(&testValue)
	if &testValue != personalMessage.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageCreatedByFirstName(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetCreatedByFirstName(&testValue)
	if &testValue != personalMessage.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageCreatedBySurname(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetCreatedBySurname(&testValue)
	if &testValue != personalMessage.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageUpdatedByFirstName(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetUpdatedByFirstName(&testValue)
	if &testValue != personalMessage.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageUpdatedBySurname(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetUpdatedBySurname(&testValue)
	if &testValue != personalMessage.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageUserID(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetUserID(testValue)
	if testValue != personalMessage.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageRecipientID(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetRecipientID(testValue)
	if testValue != personalMessage.RecipientID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageResponseToID(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetResponseToID(&testValue)
	if &testValue != personalMessage.ResponseToID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageTitle(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetTitle(&testValue)
	if &testValue != personalMessage.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPersonalMessageMessage(t *testing.T) {
	personalMessage := personalmessage.NewPersonalMessageEntity()
	testValue := "testValue"
	personalMessage.SetMessage(testValue)
	if testValue != personalMessage.Message() {
		t.Fatal("Getter did not return the Set value")
	}
}

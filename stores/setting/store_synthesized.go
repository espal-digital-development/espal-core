// Code generated by espal-store-synthesizer. DO NOT EDIT.
package setting

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &SettingsStore{}

// Store represents a data interaction object.
type Store interface {
	GetOneForSite(key uint16, userID string, domainID string, siteID string) (string, error)
}

func (settingsStore *SettingsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Setting, ok bool, err error) {
	rows, err := settingsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Setting, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		setting := newSetting()
		fields := []interface{}{&setting.id, &setting.createdByID, &setting.updatedByID, &setting.createdAt, &setting.updatedAt, &setting.domainID, &setting.siteID, &setting.userID, &setting.key, &setting.value}
		if withCreators {
			fields = append(fields, &setting.createdByFirstName, &setting.createdBySurname, &setting.updatedByFirstName, &setting.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, setting)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SettingsStore.
func New(selecterDatabase database.Database) (*SettingsStore, error) {
	settingsStore := &SettingsStore{
		selecterDatabase: selecterDatabase,
	}
	return settingsStore, nil
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package setting_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/setting"
)

func TestSettingTable(t *testing.T) {
	s := setting.NewSettingEntity()
	if s.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSettingTableAlias(t *testing.T) {
	s := setting.NewSettingEntity()
	if s.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSettingIsUpdated(t *testing.T) {
	s := setting.NewSettingEntity()
	s.IsUpdated()
}

func TestSettingID(t *testing.T) {
	s := setting.NewSettingEntity()
	s.ID()
}

func TestSettingCreatedByID(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetCreatedByID(testValue)
	if testValue != s.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedByID(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetUpdatedByID(&testValue)
	if &testValue != s.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingCreatedAt(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := time.Now()
	s.SetCreatedAt(testValue)
	if testValue != s.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedAt(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := time.Now()
	s.SetUpdatedAt(&testValue)
	if &testValue != s.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingCreatedByFirstName(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetCreatedByFirstName(&testValue)
	if &testValue != s.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingCreatedBySurname(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetCreatedBySurname(&testValue)
	if &testValue != s.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedByFirstName(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetUpdatedByFirstName(&testValue)
	if &testValue != s.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedBySurname(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetUpdatedBySurname(&testValue)
	if &testValue != s.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingDomainID(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetDomainID(&testValue)
	if &testValue != s.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingSiteID(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetSiteID(&testValue)
	if &testValue != s.SiteID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUserID(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetUserID(&testValue)
	if &testValue != s.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingKey(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := uint16(65000)
	s.SetKey(testValue)
	if testValue != s.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingValue(t *testing.T) {
	s := setting.NewSettingEntity()
	testValue := "testValue"
	s.SetValue(testValue)
	if testValue != s.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

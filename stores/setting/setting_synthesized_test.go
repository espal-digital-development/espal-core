// Code generated by espal-store-synthesizer. DO NOT EDIT.
package setting_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/setting"
)

func TestSettingTable(t *testing.T) {
	setting := setting.NewSettingEntity()
	if setting.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSettingTableAlias(t *testing.T) {
	setting := setting.NewSettingEntity()
	if setting.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSettingIsUpdated(t *testing.T) {
	setting := setting.NewSettingEntity()
	setting.IsUpdated()
}

func TestSettingID(t *testing.T) {
	setting := setting.NewSettingEntity()
	setting.ID()
}

func TestSettingCreatedByID(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetCreatedByID(testValue)
	if testValue != setting.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedByID(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetUpdatedByID(&testValue)
	if &testValue != setting.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingCreatedAt(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := time.Now()
	setting.SetCreatedAt(testValue)
	if testValue != setting.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedAt(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := time.Now()
	setting.SetUpdatedAt(&testValue)
	if &testValue != setting.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingCreatedByFirstName(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetCreatedByFirstName(&testValue)
	if &testValue != setting.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingCreatedBySurname(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetCreatedBySurname(&testValue)
	if &testValue != setting.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedByFirstName(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetUpdatedByFirstName(&testValue)
	if &testValue != setting.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUpdatedBySurname(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetUpdatedBySurname(&testValue)
	if &testValue != setting.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingDomainID(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetDomainID(&testValue)
	if &testValue != setting.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingSiteID(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetSiteID(&testValue)
	if &testValue != setting.SiteID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingUserID(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetUserID(&testValue)
	if &testValue != setting.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingKey(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := uint16(65000)
	setting.SetKey(testValue)
	if testValue != setting.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSettingValue(t *testing.T) {
	setting := setting.NewSettingEntity()
	testValue := "testValue"
	setting.SetValue(testValue)
	if testValue != setting.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

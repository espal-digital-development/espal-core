// Code generated by espal-store-synthesizer. DO NOT EDIT.
package notification

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ NotificationEntity = &Notification{}

type NotificationEntity interface {
	database.ModelWithOptionalCreator
	Target() string
	SetTarget(target string)
	Key() string
	SetKey(key string)
	Value() string
	SetValue(value string)
}

// TableName returns the table name that belongs to the current model.
func (n *Notification) TableName() string {
	return "Notification"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (n *Notification) TableAlias() string {
	return "ne"
}

// ID returns id.
func (n *Notification) ID() string {
	return n.id
}

// CreatedByID returns createdByID.
func (n *Notification) CreatedByID() *string {
	return n.createdByID
}

// SetCreatedByID sets the createdByID.
func (n *Notification) SetCreatedByID(createdByID *string) {
	n.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (n *Notification) UpdatedByID() *string {
	return n.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (n *Notification) SetUpdatedByID(updatedByID *string) {
	n.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (n *Notification) CreatedAt() time.Time {
	return n.createdAt
}

// SetCreatedAt sets the createdAt.
func (n *Notification) SetCreatedAt(createdAt time.Time) {
	n.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (n *Notification) UpdatedAt() *time.Time {
	return n.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (n *Notification) SetUpdatedAt(updatedAt *time.Time) {
	n.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (n *Notification) CreatedByFirstName() *string {
	return n.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (n *Notification) SetCreatedByFirstName(createdByFirstName *string) {
	n.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (n *Notification) CreatedBySurname() *string {
	return n.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (n *Notification) SetCreatedBySurname(createdBySurname *string) {
	n.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (n *Notification) UpdatedByFirstName() *string {
	return n.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (n *Notification) SetUpdatedByFirstName(updatedByFirstName *string) {
	n.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (n *Notification) UpdatedBySurname() *string {
	return n.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (n *Notification) SetUpdatedBySurname(updatedBySurname *string) {
	n.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (n *Notification) IsUpdated() bool {
	return n.updatedByID != nil
}

// Target returns target.
func (n *Notification) Target() string {
	return n.target
}

// SetTarget sets the target.
func (n *Notification) SetTarget(target string) {
	n.target = target
}

// Key returns key.
func (n *Notification) Key() string {
	return n.key
}

// SetKey sets the key.
func (n *Notification) SetKey(key string) {
	n.key = key
}

// Value returns value.
func (n *Notification) Value() string {
	return n.value
}

// SetValue sets the value.
func (n *Notification) SetValue(value string) {
	n.value = value
}

func newNotification() *Notification {
	return &Notification{}
}

// New returns a new instance of NotificationEntity.
func NewNotificationEntity() NotificationEntity {
	return newNotification()
}

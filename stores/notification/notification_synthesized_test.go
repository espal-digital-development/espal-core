// Code generated by espal-store-synthesizer. DO NOT EDIT.
package notification_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/notification"
)

func TestNotificationTable(t *testing.T) {
	n := notification.NewNotificationEntity()
	if n.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestNotificationTableAlias(t *testing.T) {
	n := notification.NewNotificationEntity()
	if n.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestNotificationIsUpdated(t *testing.T) {
	n := notification.NewNotificationEntity()
	n.IsUpdated()
}

func TestNotificationID(t *testing.T) {
	n := notification.NewNotificationEntity()
	n.ID()
}

func TestNotificationCreatedByID(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetCreatedByID(&testValue)
	if &testValue != n.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationUpdatedByID(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetUpdatedByID(&testValue)
	if &testValue != n.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationCreatedAt(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := time.Now()
	n.SetCreatedAt(testValue)
	if testValue != n.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationUpdatedAt(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := time.Now()
	n.SetUpdatedAt(&testValue)
	if &testValue != n.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationCreatedByFirstName(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetCreatedByFirstName(&testValue)
	if &testValue != n.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationCreatedBySurname(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetCreatedBySurname(&testValue)
	if &testValue != n.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationUpdatedByFirstName(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetUpdatedByFirstName(&testValue)
	if &testValue != n.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationUpdatedBySurname(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetUpdatedBySurname(&testValue)
	if &testValue != n.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationTarget(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetTarget(testValue)
	if testValue != n.Target() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationKey(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetKey(testValue)
	if testValue != n.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNotificationValue(t *testing.T) {
	n := notification.NewNotificationEntity()
	testValue := "testValue"
	n.SetValue(testValue)
	if testValue != n.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package notificationmock

import (
	"github.com/espal-digital-development/espal-core/stores/notification"
	"sync"
	"time"
)

var (
	lockStoreMockGetLatest sync.RWMutex
	lockStoreMockSave      sync.RWMutex
)

// Ensure, that StoreMock does implement notification.Store.
// If this is not the case, regenerate this file with moq.
var _ notification.Store = &StoreMock{}

// StoreMock is a mock implementation of notification.Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked notification.Store
//         mockedStore := &StoreMock{
//             GetLatestFunc: func(interval time.Duration) ([]*notification.Notification, bool, error) {
// 	               panic("mock out the GetLatest method")
//             },
//             SaveFunc: func(target string, key string, value string) error {
// 	               panic("mock out the Save method")
//             },
//         }
//
//         // use mockedStore in code that requires notification.Store
//         // and then make assertions.
//
//     }
type StoreMock struct {
	// GetLatestFunc mocks the GetLatest method.
	GetLatestFunc func(interval time.Duration) ([]*notification.Notification, bool, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(target string, key string, value string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetLatest holds details about calls to the GetLatest method.
		GetLatest []struct {
			// Interval is the interval argument value.
			Interval time.Duration
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Target is the target argument value.
			Target string
			// Key is the key argument value.
			Key string
			// Value is the value argument value.
			Value string
		}
	}
}

// GetLatest calls GetLatestFunc.
func (mock *StoreMock) GetLatest(interval time.Duration) ([]*notification.Notification, bool, error) {
	if mock.GetLatestFunc == nil {
		panic("StoreMock.GetLatestFunc: method is nil but Store.GetLatest was just called")
	}
	callInfo := struct {
		Interval time.Duration
	}{
		Interval: interval,
	}
	lockStoreMockGetLatest.Lock()
	mock.calls.GetLatest = append(mock.calls.GetLatest, callInfo)
	lockStoreMockGetLatest.Unlock()
	return mock.GetLatestFunc(interval)
}

// GetLatestCalls gets all the calls that were made to GetLatest.
// Check the length with:
//     len(mockedStore.GetLatestCalls())
func (mock *StoreMock) GetLatestCalls() []struct {
	Interval time.Duration
} {
	var calls []struct {
		Interval time.Duration
	}
	lockStoreMockGetLatest.RLock()
	calls = mock.calls.GetLatest
	lockStoreMockGetLatest.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *StoreMock) Save(target string, key string, value string) error {
	if mock.SaveFunc == nil {
		panic("StoreMock.SaveFunc: method is nil but Store.Save was just called")
	}
	callInfo := struct {
		Target string
		Key    string
		Value  string
	}{
		Target: target,
		Key:    key,
		Value:  value,
	}
	lockStoreMockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	lockStoreMockSave.Unlock()
	return mock.SaveFunc(target, key, value)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedStore.SaveCalls())
func (mock *StoreMock) SaveCalls() []struct {
	Target string
	Key    string
	Value  string
} {
	var calls []struct {
		Target string
		Key    string
		Value  string
	}
	lockStoreMockSave.RLock()
	calls = mock.calls.Save
	lockStoreMockSave.RUnlock()
	return calls
}

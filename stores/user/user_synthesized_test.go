// Code generated by espal-store-synthesizer. DO NOT EDIT.
package user_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/user"
)

func TestUserTable(t *testing.T) {
	user := user.NewUserEntity()
	if user.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestUserTableAlias(t *testing.T) {
	user := user.NewUserEntity()
	if user.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestUserIsUpdated(t *testing.T) {
	user := user.NewUserEntity()
	user.IsUpdated()
}

func TestUserID(t *testing.T) {
	user := user.NewUserEntity()
	user.ID()
}

func TestUserCreatedByID(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetCreatedByID(testValue)
	if testValue != user.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserUpdatedByID(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetUpdatedByID(&testValue)
	if &testValue != user.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserDefaultDeliveryAddressID(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetDefaultDeliveryAddressID(&testValue)
	if &testValue != user.DefaultDeliveryAddressID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserDefaultInvoiceAddressID(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetDefaultInvoiceAddressID(&testValue)
	if &testValue != user.DefaultInvoiceAddressID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserCreatedAt(t *testing.T) {
	user := user.NewUserEntity()
	testValue := time.Now()
	user.SetCreatedAt(testValue)
	if testValue != user.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserUpdatedAt(t *testing.T) {
	user := user.NewUserEntity()
	testValue := time.Now()
	user.SetUpdatedAt(&testValue)
	if &testValue != user.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserCreatedByFirstName(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetCreatedByFirstName(&testValue)
	if &testValue != user.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserCreatedBySurname(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetCreatedBySurname(&testValue)
	if &testValue != user.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserUpdatedByFirstName(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetUpdatedByFirstName(&testValue)
	if &testValue != user.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserUpdatedBySurname(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetUpdatedBySurname(&testValue)
	if &testValue != user.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserActive(t *testing.T) {
	user := user.NewUserEntity()
	testValue := true
	user.SetActive(testValue)
	if testValue != user.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserCountry(t *testing.T) {
	user := user.NewUserEntity()
	testValue := uint16(65000)
	user.SetCountry(&testValue)
	if &testValue != user.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserLanguage(t *testing.T) {
	user := user.NewUserEntity()
	testValue := uint16(65000)
	user.SetLanguage(testValue)
	if testValue != user.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserFirstName(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetFirstName(&testValue)
	if &testValue != user.FirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserSurname(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetSurname(&testValue)
	if &testValue != user.Surname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserDateOfBirth(t *testing.T) {
	user := user.NewUserEntity()
	testValue := time.Now()
	user.SetDateOfBirth(&testValue)
	if &testValue != user.DateOfBirth() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserEmail(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetEmail(testValue)
	if testValue != user.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserPassword(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetPassword(testValue)
	if testValue != user.Password() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserAvatar(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetAvatar(&testValue)
	if &testValue != user.Avatar() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserPriority(t *testing.T) {
	user := user.NewUserEntity()
	testValue := uint(1e9)
	user.SetPriority(testValue)
	if testValue != user.Priority() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserActivationHash(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetActivationHash(&testValue)
	if &testValue != user.ActivationHash() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserActivatedAt(t *testing.T) {
	user := user.NewUserEntity()
	testValue := time.Now()
	user.SetActivatedAt(&testValue)
	if &testValue != user.ActivatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserPasswordResetHash(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetPasswordResetHash(&testValue)
	if &testValue != user.PasswordResetHash() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserPasswordResetLastSendAt(t *testing.T) {
	user := user.NewUserEntity()
	testValue := time.Now()
	user.SetPasswordResetLastSendAt(&testValue)
	if &testValue != user.PasswordResetLastSendAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserPasswordLastResetAt(t *testing.T) {
	user := user.NewUserEntity()
	testValue := time.Now()
	user.SetPasswordLastResetAt(&testValue)
	if &testValue != user.PasswordLastResetAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserPasswordResetCount(t *testing.T) {
	user := user.NewUserEntity()
	testValue := uint8(255)
	user.SetPasswordResetCount(&testValue)
	if &testValue != user.PasswordResetCount() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserBiography(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetBiography(&testValue)
	if &testValue != user.Biography() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserComments(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetComments(&testValue)
	if &testValue != user.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestUserCurrencies(t *testing.T) {
	user := user.NewUserEntity()
	testValue := "testValue"
	user.SetCurrencies(testValue)
	if testValue != user.Currencies() {
		t.Fatal("Getter did not return the Set value")
	}
}

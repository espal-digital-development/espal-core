// Code generated by espal-store-synthesizer. DO NOT EDIT.
package contact

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/espal-digital-development/espal-core/repositories/translations"
	"github.com/juju/errors"
)

var _ Store = &ContactsStore{}

// Store represents a data interaction object.
type Store interface {
	GetOneByIDWithCreator(id string) (*Contact, bool, error)
	Delete(ids []string) error
	Name(contact *Contact, languageID uint16) string
	ForUser(userID string) (result []*Contact, ok bool, err error)
}

func (contactsStore *ContactsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Contact, ok bool, err error) {
	rows, err := contactsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Contact, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		contact := newContact()
		fields := []interface{}{&contact.id, &contact.createdByID, &contact.updatedByID, &contact.createdAt, &contact.updatedAt, &contact.userID, &contact.contactID, &contact.sorting, &contact.comments, &contact.contactFirstName, &contact.contactSurname}
		if withCreators {
			fields = append(fields, &contact.createdByFirstName, &contact.createdBySurname, &contact.updatedByFirstName, &contact.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, contact)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of ContactsStore.
func New(selecterDatabase database.Database, deletorDatabase database.Database, translationsRepository translations.Repository) (*ContactsStore, error) {
	contactsStore := &ContactsStore{
		selecterDatabase:       selecterDatabase,
		deletorDatabase:        deletorDatabase,
		translationsRepository: translationsRepository,
	}
	return contactsStore, nil
}

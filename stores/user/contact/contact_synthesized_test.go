// Code generated by espal-store-synthesizer. DO NOT EDIT.
package contact_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/user/contact"
)

func TestContactTable(t *testing.T) {
	c := contact.NewContactEntity()
	if c.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestContactTableAlias(t *testing.T) {
	c := contact.NewContactEntity()
	if c.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestContactIsUpdated(t *testing.T) {
	c := contact.NewContactEntity()
	c.IsUpdated()
}

func TestContactID(t *testing.T) {
	c := contact.NewContactEntity()
	c.ID()
}

func TestContactCreatedByID(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetCreatedByID(testValue)
	if testValue != c.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedByID(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetUpdatedByID(&testValue)
	if &testValue != c.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactCreatedAt(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := time.Now()
	c.SetCreatedAt(testValue)
	if testValue != c.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedAt(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := time.Now()
	c.SetUpdatedAt(&testValue)
	if &testValue != c.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactCreatedByFirstName(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetCreatedByFirstName(&testValue)
	if &testValue != c.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactCreatedBySurname(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetCreatedBySurname(&testValue)
	if &testValue != c.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedByFirstName(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetUpdatedByFirstName(&testValue)
	if &testValue != c.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedBySurname(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetUpdatedBySurname(&testValue)
	if &testValue != c.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUserID(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetUserID(&testValue)
	if &testValue != c.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactContactID(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetContactID(testValue)
	if testValue != c.ContactID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactSorting(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := uint(1e9)
	c.SetSorting(testValue)
	if testValue != c.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactComments(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetComments(&testValue)
	if &testValue != c.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactContactFirstName(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetContactFirstName(&testValue)
	if &testValue != c.ContactFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactContactSurname(t *testing.T) {
	c := contact.NewContactEntity()
	testValue := "testValue"
	c.SetContactSurname(&testValue)
	if &testValue != c.ContactSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package contact_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/user/contact"
)

func TestContactTable(t *testing.T) {
	contact := contact.NewContactEntity()
	if contact.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestContactTableAlias(t *testing.T) {
	contact := contact.NewContactEntity()
	if contact.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestContactIsUpdated(t *testing.T) {
	contact := contact.NewContactEntity()
	contact.IsUpdated()
}

func TestContactID(t *testing.T) {
	contact := contact.NewContactEntity()
	contact.ID()
}

func TestContactCreatedByID(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetCreatedByID(testValue)
	if testValue != contact.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedByID(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetUpdatedByID(&testValue)
	if &testValue != contact.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactCreatedAt(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := time.Now()
	contact.SetCreatedAt(testValue)
	if testValue != contact.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedAt(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := time.Now()
	contact.SetUpdatedAt(&testValue)
	if &testValue != contact.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactCreatedByFirstName(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetCreatedByFirstName(&testValue)
	if &testValue != contact.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactCreatedBySurname(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetCreatedBySurname(&testValue)
	if &testValue != contact.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedByFirstName(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetUpdatedByFirstName(&testValue)
	if &testValue != contact.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUpdatedBySurname(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetUpdatedBySurname(&testValue)
	if &testValue != contact.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactUserID(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetUserID(&testValue)
	if &testValue != contact.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactContactID(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetContactID(testValue)
	if testValue != contact.ContactID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactSorting(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := uint(1e9)
	contact.SetSorting(testValue)
	if testValue != contact.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactComments(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetComments(&testValue)
	if &testValue != contact.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactContactFirstName(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetContactFirstName(&testValue)
	if &testValue != contact.ContactFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestContactContactSurname(t *testing.T) {
	contact := contact.NewContactEntity()
	testValue := "testValue"
	contact.SetContactSurname(&testValue)
	if &testValue != contact.ContactSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

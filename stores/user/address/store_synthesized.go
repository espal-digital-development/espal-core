// Code generated by espal-store-synthesizer. DO NOT EDIT.
package address

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/espal-digital-development/espal-core/logger"
	"github.com/espal-digital-development/espal-core/repositories/countries"
	"github.com/espal-digital-development/espal-core/repositories/translations"
	"github.com/juju/errors"
)

var _ Store = &AddressesStore{}

// Store represents a data interaction object.
type Store interface {
	ForUser(userID string) (result []*Address, ok bool, err error)
	DisplayValue(address AddressEntity, localeID uint16) string
	GetOneByID(id string) (*Address, bool, error)
	GetOneByIDWithCreator(id string) (*Address, bool, error)
	Delete(ids []string) error
	ToggleActive(ids []string) error
}

func (addressesStore *AddressesStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Address, ok bool, err error) {
	rows, err := addressesStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Address, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		address := newAddress()
		fields := []interface{}{&address.id, &address.createdByID, &address.updatedByID, &address.createdAt, &address.updatedAt, &address.userID, &address.active, &address.firstName, &address.surname, &address.street, &address.streetLine2, &address.number, &address.numberAddition, &address.zipCode, &address.city, &address.state, &address.country, &address.phoneNumber, &address.email}
		if withCreators {
			fields = append(fields, &address.createdByFirstName, &address.createdBySurname, &address.updatedByFirstName, &address.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, address)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of AddressesStore.
func New(selecterDatabase database.Database, updaterDatabase database.Database, deletorDatabase database.Database, translationsRepository translations.Repository, countriesRepository countries.Repository, loggerService logger.Loggable) (*AddressesStore, error) {
	addressesStore := &AddressesStore{
		selecterDatabase:       selecterDatabase,
		updaterDatabase:        updaterDatabase,
		deletorDatabase:        deletorDatabase,
		translationsRepository: translationsRepository,
		countriesRepository:    countriesRepository,
		loggerService:          loggerService,
	}
	return addressesStore, nil
}

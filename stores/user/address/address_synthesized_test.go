// Code generated by espal-store-synthesizer. DO NOT EDIT.
package address_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/user/address"
)

func TestAddressTable(t *testing.T) {
	address := address.NewAddressEntity()
	if address.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestAddressTableAlias(t *testing.T) {
	address := address.NewAddressEntity()
	if address.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestAddressIsUpdated(t *testing.T) {
	address := address.NewAddressEntity()
	address.IsUpdated()
}

func TestAddressID(t *testing.T) {
	address := address.NewAddressEntity()
	address.ID()
}

func TestAddressCreatedByID(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetCreatedByID(testValue)
	if testValue != address.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressUpdatedByID(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetUpdatedByID(&testValue)
	if &testValue != address.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressCreatedAt(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := time.Now()
	address.SetCreatedAt(testValue)
	if testValue != address.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressUpdatedAt(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := time.Now()
	address.SetUpdatedAt(&testValue)
	if &testValue != address.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressCreatedByFirstName(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetCreatedByFirstName(&testValue)
	if &testValue != address.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressCreatedBySurname(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetCreatedBySurname(&testValue)
	if &testValue != address.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressUpdatedByFirstName(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetUpdatedByFirstName(&testValue)
	if &testValue != address.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressUpdatedBySurname(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetUpdatedBySurname(&testValue)
	if &testValue != address.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressUserID(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetUserID(testValue)
	if testValue != address.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressActive(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := true
	address.SetActive(testValue)
	if testValue != address.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressFirstName(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetFirstName(&testValue)
	if &testValue != address.FirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressSurname(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetSurname(&testValue)
	if &testValue != address.Surname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressStreet(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetStreet(testValue)
	if testValue != address.Street() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressStreetLine2(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetStreetLine2(&testValue)
	if &testValue != address.StreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressNumber(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetNumber(testValue)
	if testValue != address.Number() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressNumberAddition(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetNumberAddition(&testValue)
	if &testValue != address.NumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressZipCode(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetZipCode(testValue)
	if testValue != address.ZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressCity(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetCity(testValue)
	if testValue != address.City() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressState(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetState(&testValue)
	if &testValue != address.State() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressCountry(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := uint16(65000)
	address.SetCountry(&testValue)
	if &testValue != address.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressPhoneNumber(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetPhoneNumber(&testValue)
	if &testValue != address.PhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestAddressEmail(t *testing.T) {
	address := address.NewAddressEntity()
	testValue := "testValue"
	address.SetEmail(&testValue)
	if &testValue != address.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

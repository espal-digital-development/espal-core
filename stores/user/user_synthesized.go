// Code generated by espal-store-synthesizer. DO NOT EDIT.
package user

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ UserEntity = &User{}

type UserEntity interface {
	database.Model
	DefaultDeliveryAddressID() *string
	SetDefaultDeliveryAddressID(defaultDeliveryAddressID *string)
	DefaultInvoiceAddressID() *string
	SetDefaultInvoiceAddressID(defaultInvoiceAddressID *string)
	Active() bool
	SetActive(active bool)
	Country() *uint16
	SetCountry(country *uint16)
	Language() uint16
	SetLanguage(language uint16)
	FirstName() *string
	SetFirstName(firstName *string)
	Surname() *string
	SetSurname(surname *string)
	DateOfBirth() *time.Time
	SetDateOfBirth(dateOfBirth *time.Time)
	Email() string
	SetEmail(email string)
	Password() string
	SetPassword(password string)
	Avatar() *string
	SetAvatar(avatar *string)
	Priority() uint
	SetPriority(priority uint)
	ActivationHash() *string
	SetActivationHash(activationHash *string)
	ActivatedAt() *time.Time
	SetActivatedAt(activatedAt *time.Time)
	PasswordResetHash() *string
	SetPasswordResetHash(passwordResetHash *string)
	PasswordResetLastSendAt() *time.Time
	SetPasswordResetLastSendAt(passwordResetLastSendAt *time.Time)
	PasswordLastResetAt() *time.Time
	SetPasswordLastResetAt(passwordLastResetAt *time.Time)
	PasswordResetCount() *uint8
	SetPasswordResetCount(passwordResetCount *uint8)
	Biography() *string
	SetBiography(biography *string)
	Comments() *string
	SetComments(comments *string)
	Currencies() string
	SetCurrencies(currencies string)
	CurrenciesCount() uint
}

// TableName returns the table name that belongs to the current model.
func (u *User) TableName() string {
	return "User"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (u *User) TableAlias() string {
	return "ue"
}

// ID returns id.
func (u *User) ID() string {
	return u.id
}

// CreatedByID returns createdByID.
func (u *User) CreatedByID() string {
	return u.createdByID
}

// SetCreatedByID sets the createdByID.
func (u *User) SetCreatedByID(createdByID string) {
	u.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (u *User) UpdatedByID() *string {
	return u.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (u *User) SetUpdatedByID(updatedByID *string) {
	u.updatedByID = updatedByID
}

// DefaultDeliveryAddressID returns defaultDeliveryAddressID.
func (u *User) DefaultDeliveryAddressID() *string {
	return u.defaultDeliveryAddressID
}

// SetDefaultDeliveryAddressID sets the defaultDeliveryAddressID.
func (u *User) SetDefaultDeliveryAddressID(defaultDeliveryAddressID *string) {
	u.defaultDeliveryAddressID = defaultDeliveryAddressID
}

// DefaultInvoiceAddressID returns defaultInvoiceAddressID.
func (u *User) DefaultInvoiceAddressID() *string {
	return u.defaultInvoiceAddressID
}

// SetDefaultInvoiceAddressID sets the defaultInvoiceAddressID.
func (u *User) SetDefaultInvoiceAddressID(defaultInvoiceAddressID *string) {
	u.defaultInvoiceAddressID = defaultInvoiceAddressID
}

// CreatedAt returns createdAt.
func (u *User) CreatedAt() time.Time {
	return u.createdAt
}

// SetCreatedAt sets the createdAt.
func (u *User) SetCreatedAt(createdAt time.Time) {
	u.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (u *User) UpdatedAt() *time.Time {
	return u.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (u *User) SetUpdatedAt(updatedAt *time.Time) {
	u.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (u *User) CreatedByFirstName() *string {
	return u.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (u *User) SetCreatedByFirstName(createdByFirstName *string) {
	u.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (u *User) CreatedBySurname() *string {
	return u.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (u *User) SetCreatedBySurname(createdBySurname *string) {
	u.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (u *User) UpdatedByFirstName() *string {
	return u.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (u *User) SetUpdatedByFirstName(updatedByFirstName *string) {
	u.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (u *User) UpdatedBySurname() *string {
	return u.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (u *User) SetUpdatedBySurname(updatedBySurname *string) {
	u.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (u *User) IsUpdated() bool {
	return u.updatedByID != nil
}

// Active returns active.
func (u *User) Active() bool {
	return u.active
}

// SetActive sets the active.
func (u *User) SetActive(active bool) {
	u.active = active
}

// Country returns country.
func (u *User) Country() *uint16 {
	return u.country
}

// SetCountry sets the country.
func (u *User) SetCountry(country *uint16) {
	u.country = country
}

// Language returns language.
func (u *User) Language() uint16 {
	return u.language
}

// SetLanguage sets the language.
func (u *User) SetLanguage(language uint16) {
	u.language = language
}

// FirstName returns firstName.
func (u *User) FirstName() *string {
	return u.firstName
}

// SetFirstName sets the firstName.
func (u *User) SetFirstName(firstName *string) {
	u.firstName = firstName
}

// Surname returns surname.
func (u *User) Surname() *string {
	return u.surname
}

// SetSurname sets the surname.
func (u *User) SetSurname(surname *string) {
	u.surname = surname
}

// DateOfBirth returns dateOfBirth.
func (u *User) DateOfBirth() *time.Time {
	return u.dateOfBirth
}

// SetDateOfBirth sets the dateOfBirth.
func (u *User) SetDateOfBirth(dateOfBirth *time.Time) {
	u.dateOfBirth = dateOfBirth
}

// Email returns email.
func (u *User) Email() string {
	return u.email
}

// SetEmail sets the email.
func (u *User) SetEmail(email string) {
	u.email = email
}

// Password returns password.
func (u *User) Password() string {
	return u.password
}

// SetPassword sets the password.
func (u *User) SetPassword(password string) {
	u.password = password
}

// Avatar returns avatar.
func (u *User) Avatar() *string {
	return u.avatar
}

// SetAvatar sets the avatar.
func (u *User) SetAvatar(avatar *string) {
	u.avatar = avatar
}

// Priority returns priority.
func (u *User) Priority() uint {
	return u.priority
}

// SetPriority sets the priority.
func (u *User) SetPriority(priority uint) {
	u.priority = priority
}

// ActivationHash returns activationHash.
func (u *User) ActivationHash() *string {
	return u.activationHash
}

// SetActivationHash sets the activationHash.
func (u *User) SetActivationHash(activationHash *string) {
	u.activationHash = activationHash
}

// ActivatedAt returns activatedAt.
func (u *User) ActivatedAt() *time.Time {
	return u.activatedAt
}

// SetActivatedAt sets the activatedAt.
func (u *User) SetActivatedAt(activatedAt *time.Time) {
	u.activatedAt = activatedAt
}

// PasswordResetHash returns passwordResetHash.
func (u *User) PasswordResetHash() *string {
	return u.passwordResetHash
}

// SetPasswordResetHash sets the passwordResetHash.
func (u *User) SetPasswordResetHash(passwordResetHash *string) {
	u.passwordResetHash = passwordResetHash
}

// PasswordResetLastSendAt returns passwordResetLastSendAt.
func (u *User) PasswordResetLastSendAt() *time.Time {
	return u.passwordResetLastSendAt
}

// SetPasswordResetLastSendAt sets the passwordResetLastSendAt.
func (u *User) SetPasswordResetLastSendAt(passwordResetLastSendAt *time.Time) {
	u.passwordResetLastSendAt = passwordResetLastSendAt
}

// PasswordLastResetAt returns passwordLastResetAt.
func (u *User) PasswordLastResetAt() *time.Time {
	return u.passwordLastResetAt
}

// SetPasswordLastResetAt sets the passwordLastResetAt.
func (u *User) SetPasswordLastResetAt(passwordLastResetAt *time.Time) {
	u.passwordLastResetAt = passwordLastResetAt
}

// PasswordResetCount returns passwordResetCount.
func (u *User) PasswordResetCount() *uint8 {
	return u.passwordResetCount
}

// SetPasswordResetCount sets the passwordResetCount.
func (u *User) SetPasswordResetCount(passwordResetCount *uint8) {
	u.passwordResetCount = passwordResetCount
}

// Biography returns biography.
func (u *User) Biography() *string {
	return u.biography
}

// SetBiography sets the biography.
func (u *User) SetBiography(biography *string) {
	u.biography = biography
}

// Comments returns comments.
func (u *User) Comments() *string {
	return u.comments
}

// SetComments sets the comments.
func (u *User) SetComments(comments *string) {
	u.comments = comments
}

// Currencies returns currencies.
func (u *User) Currencies() string {
	return u.currencies
}

// SetCurrencies sets the currencies.
func (u *User) SetCurrencies(currencies string) {
	u.currencies = currencies
}

func newUser() *User {
	return &User{}
}

// New returns a new instance of UserEntity.
func NewUserEntity() UserEntity {
	return newUser()
}

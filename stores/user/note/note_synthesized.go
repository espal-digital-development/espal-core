// Code generated by espal-store-synthesizer. DO NOT EDIT.
package note

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ NoteEntity = &Note{}

type NoteEntity interface {
	database.Model
	UserID() string
	SetUserID(userID string)
	Title() *string
	SetTitle(title *string)
	Contents() string
	SetContents(contents string)
}

// ID returns id.
func (n *Note) ID() string {
	return n.id
}

// CreatedByID returns createdByID.
func (n *Note) CreatedByID() string {
	return n.createdByID
}

// SetCreatedByID sets the createdByID.
func (n *Note) SetCreatedByID(createdByID string) {
	n.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (n *Note) UpdatedByID() *string {
	return n.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (n *Note) SetUpdatedByID(updatedByID *string) {
	n.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (n *Note) CreatedAt() time.Time {
	return n.createdAt
}

// SetCreatedAt sets the createdAt.
func (n *Note) SetCreatedAt(createdAt time.Time) {
	n.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (n *Note) UpdatedAt() *time.Time {
	return n.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (n *Note) SetUpdatedAt(updatedAt *time.Time) {
	n.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (n *Note) CreatedByFirstName() *string {
	return n.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (n *Note) SetCreatedByFirstName(createdByFirstName *string) {
	n.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (n *Note) CreatedBySurname() *string {
	return n.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (n *Note) SetCreatedBySurname(createdBySurname *string) {
	n.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (n *Note) UpdatedByFirstName() *string {
	return n.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (n *Note) SetUpdatedByFirstName(updatedByFirstName *string) {
	n.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (n *Note) UpdatedBySurname() *string {
	return n.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (n *Note) SetUpdatedBySurname(updatedBySurname *string) {
	n.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (n *Note) IsUpdated() bool {
	return n.updatedByID != nil
}

// UserID returns userID.
func (n *Note) UserID() string {
	return n.userID
}

// SetUserID sets the userID.
func (n *Note) SetUserID(userID string) {
	n.userID = userID
}

// Title returns title.
func (n *Note) Title() *string {
	return n.title
}

// SetTitle sets the title.
func (n *Note) SetTitle(title *string) {
	n.title = title
}

// Contents returns contents.
func (n *Note) Contents() string {
	return n.contents
}

// SetContents sets the contents.
func (n *Note) SetContents(contents string) {
	n.contents = contents
}

func newNote() *Note {
	return &Note{}
}

// New returns a new instance of NoteEntity.
func NewNoteEntity() NoteEntity {
	return newNote()
}

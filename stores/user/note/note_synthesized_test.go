// Code generated by espal-store-synthesizer. DO NOT EDIT.
package note_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/user/note"
)

func TestNoteTable(t *testing.T) {
	note := note.NewNoteEntity()
	if note.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestNoteTableAlias(t *testing.T) {
	note := note.NewNoteEntity()
	if note.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestNoteIsUpdated(t *testing.T) {
	note := note.NewNoteEntity()
	note.IsUpdated()
}

func TestNoteID(t *testing.T) {
	note := note.NewNoteEntity()
	note.ID()
}

func TestNoteCreatedByID(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetCreatedByID(testValue)
	if testValue != note.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteUpdatedByID(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetUpdatedByID(&testValue)
	if &testValue != note.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteCreatedAt(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := time.Now()
	note.SetCreatedAt(testValue)
	if testValue != note.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteUpdatedAt(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := time.Now()
	note.SetUpdatedAt(&testValue)
	if &testValue != note.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteCreatedByFirstName(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetCreatedByFirstName(&testValue)
	if &testValue != note.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteCreatedBySurname(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetCreatedBySurname(&testValue)
	if &testValue != note.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteUpdatedByFirstName(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetUpdatedByFirstName(&testValue)
	if &testValue != note.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteUpdatedBySurname(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetUpdatedBySurname(&testValue)
	if &testValue != note.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteUserID(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetUserID(testValue)
	if testValue != note.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteTitle(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetTitle(&testValue)
	if &testValue != note.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestNoteContents(t *testing.T) {
	note := note.NewNoteEntity()
	testValue := "testValue"
	note.SetContents(testValue)
	if testValue != note.Contents() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package shippingwindow

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ ShippingWindowEntity = &ShippingWindow{}

type ShippingWindowEntity interface {
	database.Model
	UserGroupID() *string
	SetUserGroupID(userGroupID *string)
	StartDate() *time.Time
	SetStartDate(startDate *time.Time)
	EndDate() *time.Time
	SetEndDate(endDate *time.Time)
}

// TableName returns the table name that belongs to the current model.
func (shippingWindow *ShippingWindow) TableName() string {
	return "ShippingWindow"
}

// ID returns id.
func (shippingWindow *ShippingWindow) ID() string {
	return shippingWindow.id
}

// CreatedByID returns createdByID.
func (shippingWindow *ShippingWindow) CreatedByID() string {
	return shippingWindow.createdByID
}

// SetCreatedByID sets the createdByID.
func (shippingWindow *ShippingWindow) SetCreatedByID(createdByID string) {
	shippingWindow.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (shippingWindow *ShippingWindow) UpdatedByID() *string {
	return shippingWindow.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (shippingWindow *ShippingWindow) SetUpdatedByID(updatedByID *string) {
	shippingWindow.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (shippingWindow *ShippingWindow) CreatedAt() time.Time {
	return shippingWindow.createdAt
}

// SetCreatedAt sets the createdAt.
func (shippingWindow *ShippingWindow) SetCreatedAt(createdAt time.Time) {
	shippingWindow.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (shippingWindow *ShippingWindow) UpdatedAt() *time.Time {
	return shippingWindow.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (shippingWindow *ShippingWindow) SetUpdatedAt(updatedAt *time.Time) {
	shippingWindow.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (shippingWindow *ShippingWindow) CreatedByFirstName() *string {
	return shippingWindow.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (shippingWindow *ShippingWindow) SetCreatedByFirstName(createdByFirstName *string) {
	shippingWindow.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (shippingWindow *ShippingWindow) CreatedBySurname() *string {
	return shippingWindow.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (shippingWindow *ShippingWindow) SetCreatedBySurname(createdBySurname *string) {
	shippingWindow.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (shippingWindow *ShippingWindow) UpdatedByFirstName() *string {
	return shippingWindow.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (shippingWindow *ShippingWindow) SetUpdatedByFirstName(updatedByFirstName *string) {
	shippingWindow.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (shippingWindow *ShippingWindow) UpdatedBySurname() *string {
	return shippingWindow.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (shippingWindow *ShippingWindow) SetUpdatedBySurname(updatedBySurname *string) {
	shippingWindow.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (shippingWindow *ShippingWindow) IsUpdated() bool {
	return shippingWindow.updatedByID != nil
}

// UserGroupID returns userGroupID.
func (shippingWindow *ShippingWindow) UserGroupID() *string {
	return shippingWindow.userGroupID
}

// SetUserGroupID sets the userGroupID.
func (shippingWindow *ShippingWindow) SetUserGroupID(userGroupID *string) {
	shippingWindow.userGroupID = userGroupID
}

// StartDate returns startDate.
func (shippingWindow *ShippingWindow) StartDate() *time.Time {
	return shippingWindow.startDate
}

// SetStartDate sets the startDate.
func (shippingWindow *ShippingWindow) SetStartDate(startDate *time.Time) {
	shippingWindow.startDate = startDate
}

// EndDate returns endDate.
func (shippingWindow *ShippingWindow) EndDate() *time.Time {
	return shippingWindow.endDate
}

// SetEndDate sets the endDate.
func (shippingWindow *ShippingWindow) SetEndDate(endDate *time.Time) {
	shippingWindow.endDate = endDate
}

func newShippingWindow() *ShippingWindow {
	return &ShippingWindow{}
}

// New returns a new instance of ShippingWindowEntity.
func NewShippingWindowEntity() ShippingWindowEntity {
	return newShippingWindow()
}

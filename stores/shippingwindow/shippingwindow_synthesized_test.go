// Code generated by espal-store-synthesizer. DO NOT EDIT.
package shippingwindow_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/shippingwindow"
)

func TestShippingWindowTable(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	if shippingWindow.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestShippingWindowTableAlias(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	if shippingWindow.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestShippingWindowIsUpdated(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	shippingWindow.IsUpdated()
}

func TestShippingWindowID(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	shippingWindow.ID()
}

func TestShippingWindowCreatedByID(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetCreatedByID(testValue)
	if testValue != shippingWindow.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowUpdatedByID(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetUpdatedByID(&testValue)
	if &testValue != shippingWindow.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowCreatedAt(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := time.Now()
	shippingWindow.SetCreatedAt(testValue)
	if testValue != shippingWindow.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowUpdatedAt(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := time.Now()
	shippingWindow.SetUpdatedAt(&testValue)
	if &testValue != shippingWindow.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowCreatedByFirstName(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetCreatedByFirstName(&testValue)
	if &testValue != shippingWindow.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowCreatedBySurname(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetCreatedBySurname(&testValue)
	if &testValue != shippingWindow.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowUpdatedByFirstName(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetUpdatedByFirstName(&testValue)
	if &testValue != shippingWindow.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowUpdatedBySurname(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetUpdatedBySurname(&testValue)
	if &testValue != shippingWindow.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowUserGroupID(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := "testValue"
	shippingWindow.SetUserGroupID(&testValue)
	if &testValue != shippingWindow.UserGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowStartDate(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := time.Now()
	shippingWindow.SetStartDate(&testValue)
	if &testValue != shippingWindow.StartDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShippingWindowEndDate(t *testing.T) {
	shippingWindow := shippingwindow.NewShippingWindowEntity()
	testValue := time.Now()
	shippingWindow.SetEndDate(&testValue)
	if &testValue != shippingWindow.EndDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

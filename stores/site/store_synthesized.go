// Code generated by espal-store-synthesizer. DO NOT EDIT.
package site

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/espal-digital-development/espal-core/database/filters"
	"github.com/espal-digital-development/espal-core/logger"
	"github.com/espal-digital-development/espal-core/repositories/translations"
	"github.com/juju/errors"
)

var _ Store = &SitesStore{}

// Store represents a data interaction object.
type Store interface {
	GetOne(id string) (*Site, bool, error)
	GetOneOnlineByID(id string) (*Site, bool, error)
	All() ([]*Site, bool, error)
	HasUser(siteID string, userID string) (bool, error)
	GetOneByIDWithCreator(id string) (*Site, bool, error)
	GetTranslatedName(site *Site, languageID uint16) string
	Delete(ids []string) error
	ToggleOnline(ids []string) error
	Search(context filters.QueryReader, language language) (sites []*Site, filter filters.Filter, err error)
	Filter(context filters.QueryReader, language language) (sites []*Site, filter filters.Filter, err error)
}

func (s *SitesStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Site, ok bool, err error) {
	rows, err := s.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Site, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		s := newSite()
		fields := []interface{}{&s.id, &s.createdByID, &s.updatedByID, &s.createdAt, &s.updatedAt, &s.online, &s.language, &s.country, &s.currencies}
		if withCreators {
			fields = append(fields, &s.createdByFirstName, &s.createdBySurname, &s.updatedByFirstName, &s.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, s)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SitesStore.
func New(selecterDatabase database.Database, updaterDatabase database.Database, deletorDatabase database.Database, databaseFiltersFactory filters.Factory, translationsRepository translations.Repository, loggerService logger.Loggable) (*SitesStore, error) {
	s := &SitesStore{
		selecterDatabase:       selecterDatabase,
		updaterDatabase:        updaterDatabase,
		deletorDatabase:        deletorDatabase,
		databaseFiltersFactory: databaseFiltersFactory,
		translationsRepository: translationsRepository,
		loggerService:          loggerService,
	}
	return s, nil
}

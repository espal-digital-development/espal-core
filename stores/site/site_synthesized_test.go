// Code generated by espal-store-synthesizer. DO NOT EDIT.
package site_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/site"
)

func TestSiteTable(t *testing.T) {
	site := site.NewSiteEntity()
	if site.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSiteTableAlias(t *testing.T) {
	site := site.NewSiteEntity()
	if site.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSiteIsUpdated(t *testing.T) {
	site := site.NewSiteEntity()
	site.IsUpdated()
}

func TestSiteID(t *testing.T) {
	site := site.NewSiteEntity()
	site.ID()
}

func TestSiteCreatedByID(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetCreatedByID(testValue)
	if testValue != site.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteUpdatedByID(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetUpdatedByID(&testValue)
	if &testValue != site.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteCreatedAt(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := time.Now()
	site.SetCreatedAt(testValue)
	if testValue != site.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteUpdatedAt(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := time.Now()
	site.SetUpdatedAt(&testValue)
	if &testValue != site.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteCreatedByFirstName(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetCreatedByFirstName(&testValue)
	if &testValue != site.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteCreatedBySurname(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetCreatedBySurname(&testValue)
	if &testValue != site.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteUpdatedByFirstName(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetUpdatedByFirstName(&testValue)
	if &testValue != site.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteUpdatedBySurname(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetUpdatedBySurname(&testValue)
	if &testValue != site.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteOnline(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := true
	site.SetOnline(testValue)
	if testValue != site.Online() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteLanguage(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := uint16(65000)
	site.SetLanguage(&testValue)
	if &testValue != site.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteCountry(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := uint16(65000)
	site.SetCountry(&testValue)
	if &testValue != site.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSiteCurrencies(t *testing.T) {
	site := site.NewSiteEntity()
	testValue := "testValue"
	site.SetCurrencies(testValue)
	if testValue != site.Currencies() {
		t.Fatal("Getter did not return the Set value")
	}
}

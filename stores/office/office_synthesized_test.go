// Code generated by espal-store-synthesizer. DO NOT EDIT.
package office_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/office"
)

func TestOfficeTable(t *testing.T) {
	o := office.NewOfficeEntity()
	if o.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestOfficeTableAlias(t *testing.T) {
	o := office.NewOfficeEntity()
	if o.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestOfficeIsUpdated(t *testing.T) {
	o := office.NewOfficeEntity()
	o.IsUpdated()
}

func TestOfficeID(t *testing.T) {
	o := office.NewOfficeEntity()
	o.ID()
}

func TestOfficeCreatedByID(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetCreatedByID(testValue)
	if testValue != o.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedByID(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetUpdatedByID(&testValue)
	if &testValue != o.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCreatedAt(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := time.Now()
	o.SetCreatedAt(testValue)
	if testValue != o.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedAt(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := time.Now()
	o.SetUpdatedAt(&testValue)
	if &testValue != o.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCreatedByFirstName(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetCreatedByFirstName(&testValue)
	if &testValue != o.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCreatedBySurname(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetCreatedBySurname(&testValue)
	if &testValue != o.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedByFirstName(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetUpdatedByFirstName(&testValue)
	if &testValue != o.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedBySurname(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetUpdatedBySurname(&testValue)
	if &testValue != o.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeActive(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := true
	o.SetActive(testValue)
	if testValue != o.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeSorting(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := uint(1e9)
	o.SetSorting(testValue)
	if testValue != o.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficePrimaryContactPerson(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetPrimaryContactPerson(&testValue)
	if &testValue != o.PrimaryContactPerson() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeStreet(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetStreet(testValue)
	if testValue != o.Street() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeStreetLine2(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetStreetLine2(&testValue)
	if &testValue != o.StreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeNumber(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetNumber(testValue)
	if testValue != o.Number() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeNumberAddition(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetNumberAddition(&testValue)
	if &testValue != o.NumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeZipCode(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetZipCode(testValue)
	if testValue != o.ZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCity(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetCity(testValue)
	if testValue != o.City() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeState(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetState(&testValue)
	if &testValue != o.State() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCountry(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := uint16(65000)
	o.SetCountry(&testValue)
	if &testValue != o.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficePhoneNumber(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetPhoneNumber(&testValue)
	if &testValue != o.PhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeEmail(t *testing.T) {
	o := office.NewOfficeEntity()
	testValue := "testValue"
	o.SetEmail(&testValue)
	if &testValue != o.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

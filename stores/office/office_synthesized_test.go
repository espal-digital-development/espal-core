// Code generated by espal-store-synthesizer. DO NOT EDIT.
package office_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/office"
)

func TestOfficeTable(t *testing.T) {
	office := office.NewOfficeEntity()
	if office.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestOfficeTableAlias(t *testing.T) {
	office := office.NewOfficeEntity()
	if office.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestOfficeIsUpdated(t *testing.T) {
	office := office.NewOfficeEntity()
	office.IsUpdated()
}

func TestOfficeID(t *testing.T) {
	office := office.NewOfficeEntity()
	office.ID()
}

func TestOfficeCreatedByID(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetCreatedByID(testValue)
	if testValue != office.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedByID(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetUpdatedByID(&testValue)
	if &testValue != office.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCreatedAt(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := time.Now()
	office.SetCreatedAt(testValue)
	if testValue != office.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedAt(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := time.Now()
	office.SetUpdatedAt(&testValue)
	if &testValue != office.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCreatedByFirstName(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetCreatedByFirstName(&testValue)
	if &testValue != office.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCreatedBySurname(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetCreatedBySurname(&testValue)
	if &testValue != office.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedByFirstName(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetUpdatedByFirstName(&testValue)
	if &testValue != office.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeUpdatedBySurname(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetUpdatedBySurname(&testValue)
	if &testValue != office.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeActive(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := true
	office.SetActive(testValue)
	if testValue != office.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeSorting(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := uint(1e9)
	office.SetSorting(testValue)
	if testValue != office.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficePrimaryContactPerson(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetPrimaryContactPerson(&testValue)
	if &testValue != office.PrimaryContactPerson() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeStreet(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetStreet(testValue)
	if testValue != office.Street() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeStreetLine2(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetStreetLine2(&testValue)
	if &testValue != office.StreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeNumber(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetNumber(testValue)
	if testValue != office.Number() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeNumberAddition(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetNumberAddition(&testValue)
	if &testValue != office.NumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeZipCode(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetZipCode(testValue)
	if testValue != office.ZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCity(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetCity(testValue)
	if testValue != office.City() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeState(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetState(&testValue)
	if &testValue != office.State() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeCountry(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := uint16(65000)
	office.SetCountry(&testValue)
	if &testValue != office.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficePhoneNumber(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetPhoneNumber(&testValue)
	if &testValue != office.PhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestOfficeEmail(t *testing.T) {
	office := office.NewOfficeEntity()
	testValue := "testValue"
	office.SetEmail(&testValue)
	if &testValue != office.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

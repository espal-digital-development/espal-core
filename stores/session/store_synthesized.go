// Code generated by espal-store-synthesizer. DO NOT EDIT.
package session

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
	"time"
)

var _ Store = &SessionsStore{}

// Store represents a data interaction object.
type Store interface {
	HashExists(hash string) (bool, error)
	GetOne(id string) (*Session, bool, error)
	GetOneByHash(hash string) (*Session, bool, error)
	Create(hash string, timeout time.Duration, dataEntries DataEntries) error
	Update(hash string, timeout time.Duration, dataEntries DataEntries) error
}

func (sessionsStore *SessionsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Session, ok bool, err error) {
	rows, err := sessionsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Session, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		session := newSession()
		fields := []interface{}{&session.id, &session.createdByID, &session.updatedByID, &session.createdAt, &session.updatedAt, &session.timeout, &session.hash, &session.data}
		if withCreators {
			fields = append(fields, &session.createdByFirstName, &session.createdBySurname, &session.updatedByFirstName, &session.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, session)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SessionsStore.
func New(selecterDatabase database.Database, inserterDatabase database.Database, updaterDatabase database.Database) (*SessionsStore, error) {
	sessionsStore := &SessionsStore{
		selecterDatabase: selecterDatabase,
		inserterDatabase: inserterDatabase,
		updaterDatabase:  updaterDatabase,
	}
	return sessionsStore, nil
}

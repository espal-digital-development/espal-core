// Code generated by espal-store-synthesizer. DO NOT EDIT.
package session

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ SessionEntity = &Session{}

type SessionEntity interface {
	database.ModelWithOptionalCreator
	Timeout() time.Duration
	SetTimeout(timeout time.Duration)
	Hash() string
	SetHash(hash string)
	Data() []byte
	SetData(data []byte)
	DataEntries() *dataEntries
	SetDataEntries(dataEntries *dataEntries)
	SetDataFromJSON(entries DataEntries) error
	GetDataAsJSON() (DataEntries, error)
}

// TableName returns the table name that belongs to the current model.
func (session *Session) TableName() string {
	return "Session"
}

// ID returns id.
func (session *Session) ID() string {
	return session.id
}

// CreatedByID returns createdByID.
func (session *Session) CreatedByID() *string {
	return session.createdByID
}

// SetCreatedByID sets the createdByID.
func (session *Session) SetCreatedByID(createdByID *string) {
	session.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (session *Session) UpdatedByID() *string {
	return session.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (session *Session) SetUpdatedByID(updatedByID *string) {
	session.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (session *Session) CreatedAt() time.Time {
	return session.createdAt
}

// SetCreatedAt sets the createdAt.
func (session *Session) SetCreatedAt(createdAt time.Time) {
	session.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (session *Session) UpdatedAt() *time.Time {
	return session.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (session *Session) SetUpdatedAt(updatedAt *time.Time) {
	session.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (session *Session) CreatedByFirstName() *string {
	return session.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (session *Session) SetCreatedByFirstName(createdByFirstName *string) {
	session.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (session *Session) CreatedBySurname() *string {
	return session.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (session *Session) SetCreatedBySurname(createdBySurname *string) {
	session.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (session *Session) UpdatedByFirstName() *string {
	return session.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (session *Session) SetUpdatedByFirstName(updatedByFirstName *string) {
	session.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (session *Session) UpdatedBySurname() *string {
	return session.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (session *Session) SetUpdatedBySurname(updatedBySurname *string) {
	session.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (session *Session) IsUpdated() bool {
	return session.updatedByID != nil
}

// Timeout returns timeout.
func (session *Session) Timeout() time.Duration {
	return session.timeout
}

// SetTimeout sets the timeout.
func (session *Session) SetTimeout(timeout time.Duration) {
	session.timeout = timeout
}

// Hash returns hash.
func (session *Session) Hash() string {
	return session.hash
}

// SetHash sets the hash.
func (session *Session) SetHash(hash string) {
	session.hash = hash
}

// Data returns data.
func (session *Session) Data() []byte {
	return session.data
}

// SetData sets the data.
func (session *Session) SetData(data []byte) {
	session.data = data
}

// DataEntries returns dataEntries.
func (session *Session) DataEntries() *dataEntries {
	return session.dataEntries
}

// SetDataEntries sets the dataEntries.
func (session *Session) SetDataEntries(dataEntries *dataEntries) {
	session.dataEntries = dataEntries
}

// New returns a new instance of SessionEntity.
func NewSessionEntity() SessionEntity {
	return newSession()
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package session_test

import (
	"bytes"
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/session"
)

func TestSessionTable(t *testing.T) {
	session := session.NewSessionEntity()
	if session.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSessionTableAlias(t *testing.T) {
	session := session.NewSessionEntity()
	if session.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSessionIsUpdated(t *testing.T) {
	session := session.NewSessionEntity()
	session.IsUpdated()
}

func TestSessionID(t *testing.T) {
	session := session.NewSessionEntity()
	session.ID()
}

func TestSessionCreatedByID(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetCreatedByID(&testValue)
	if &testValue != session.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionUpdatedByID(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetUpdatedByID(&testValue)
	if &testValue != session.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionCreatedAt(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := time.Now()
	session.SetCreatedAt(testValue)
	if testValue != session.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionUpdatedAt(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := time.Now()
	session.SetUpdatedAt(&testValue)
	if &testValue != session.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionCreatedByFirstName(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetCreatedByFirstName(&testValue)
	if &testValue != session.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionCreatedBySurname(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetCreatedBySurname(&testValue)
	if &testValue != session.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionUpdatedByFirstName(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetUpdatedByFirstName(&testValue)
	if &testValue != session.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionUpdatedBySurname(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetUpdatedBySurname(&testValue)
	if &testValue != session.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionTimeout(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := time.Second * 8
	session.SetTimeout(testValue)
	if testValue != session.Timeout() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionHash(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := "testValue"
	session.SetHash(testValue)
	if testValue != session.Hash() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSessionData(t *testing.T) {
	session := session.NewSessionEntity()
	testValue := []byte("testData")
	session.SetData(testValue)
	if !bytes.Equal(testValue, session.Data()) {
		t.Fatal("Getter did not return the Set value")
	}
}

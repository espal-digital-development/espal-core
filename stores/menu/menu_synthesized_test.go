// Code generated by espal-store-synthesizer. DO NOT EDIT.
package menu_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/menu"
)

func TestMenuTable(t *testing.T) {
	menu := menu.NewMenuEntity()
	if menu.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestMenuTableAlias(t *testing.T) {
	menu := menu.NewMenuEntity()
	if menu.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestMenuIsUpdated(t *testing.T) {
	menu := menu.NewMenuEntity()
	menu.IsUpdated()
}

func TestMenuID(t *testing.T) {
	menu := menu.NewMenuEntity()
	menu.ID()
}

func TestMenuCreatedByID(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetCreatedByID(testValue)
	if testValue != menu.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuUpdatedByID(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetUpdatedByID(&testValue)
	if &testValue != menu.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuCreatedAt(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := time.Now()
	menu.SetCreatedAt(testValue)
	if testValue != menu.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuUpdatedAt(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := time.Now()
	menu.SetUpdatedAt(&testValue)
	if &testValue != menu.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuCreatedByFirstName(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetCreatedByFirstName(&testValue)
	if &testValue != menu.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuCreatedBySurname(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetCreatedBySurname(&testValue)
	if &testValue != menu.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuUpdatedByFirstName(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetUpdatedByFirstName(&testValue)
	if &testValue != menu.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuUpdatedBySurname(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetUpdatedBySurname(&testValue)
	if &testValue != menu.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuActive(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := true
	menu.SetActive(testValue)
	if testValue != menu.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuSorting(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := uint(1e9)
	menu.SetSorting(testValue)
	if testValue != menu.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuSlugID(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetSlugID(&testValue)
	if &testValue != menu.SlugID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuExternalLink(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetExternalLink(&testValue)
	if &testValue != menu.ExternalLink() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuInternalLink(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetInternalLink(&testValue)
	if &testValue != menu.InternalLink() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMenuParentID(t *testing.T) {
	menu := menu.NewMenuEntity()
	testValue := "testValue"
	menu.SetParentID(&testValue)
	if &testValue != menu.ParentID() {
		t.Fatal("Getter did not return the Set value")
	}
}

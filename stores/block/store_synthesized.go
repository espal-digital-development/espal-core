// Code generated by espal-store-synthesizer. DO NOT EDIT.
package block

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &BlocksStore{}

// Store represents a data interaction object.
type Store interface {
}

func (b *BlocksStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Block, ok bool, err error) {
	rows, err := b.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Block, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		b := newBlock()
		fields := []interface{}{&b.id, &b.createdByID, &b.updatedByID, &b.createdAt, &b.updatedAt, &b.domainID, &b.active}
		if withCreators {
			fields = append(fields, &b.createdByFirstName, &b.createdBySurname, &b.updatedByFirstName, &b.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, b)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of BlocksStore.
func New(selecterDatabase database.Database) (*BlocksStore, error) {
	b := &BlocksStore{
		selecterDatabase: selecterDatabase,
	}
	return b, nil
}

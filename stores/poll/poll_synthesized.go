// Code generated by espal-store-synthesizer. DO NOT EDIT.
package poll

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PollEntity = &Poll{}

type PollEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	StartDate() *time.Time
	SetStartDate(startDate *time.Time)
	EndDate() *time.Time
	SetEndDate(endDate *time.Time)
	AllowAnonymousVoting() bool
	SetAllowAnonymousVoting(allowAnonymousVoting bool)
	Comments() *string
	SetComments(comments *string)
}

// TableName returns the table name that belongs to the current model.
func (poll *Poll) TableName() string {
	return "Poll"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (poll *Poll) TableAlias() string {
	return "pe"
}

// ID returns id.
func (poll *Poll) ID() string {
	return poll.id
}

// CreatedByID returns createdByID.
func (poll *Poll) CreatedByID() string {
	return poll.createdByID
}

// SetCreatedByID sets the createdByID.
func (poll *Poll) SetCreatedByID(createdByID string) {
	poll.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (poll *Poll) UpdatedByID() *string {
	return poll.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (poll *Poll) SetUpdatedByID(updatedByID *string) {
	poll.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (poll *Poll) CreatedAt() time.Time {
	return poll.createdAt
}

// SetCreatedAt sets the createdAt.
func (poll *Poll) SetCreatedAt(createdAt time.Time) {
	poll.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (poll *Poll) UpdatedAt() *time.Time {
	return poll.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (poll *Poll) SetUpdatedAt(updatedAt *time.Time) {
	poll.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (poll *Poll) CreatedByFirstName() *string {
	return poll.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (poll *Poll) SetCreatedByFirstName(createdByFirstName *string) {
	poll.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (poll *Poll) CreatedBySurname() *string {
	return poll.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (poll *Poll) SetCreatedBySurname(createdBySurname *string) {
	poll.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (poll *Poll) UpdatedByFirstName() *string {
	return poll.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (poll *Poll) SetUpdatedByFirstName(updatedByFirstName *string) {
	poll.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (poll *Poll) UpdatedBySurname() *string {
	return poll.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (poll *Poll) SetUpdatedBySurname(updatedBySurname *string) {
	poll.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (poll *Poll) IsUpdated() bool {
	return poll.updatedByID != nil
}

// Active returns active.
func (poll *Poll) Active() bool {
	return poll.active
}

// SetActive sets the active.
func (poll *Poll) SetActive(active bool) {
	poll.active = active
}

// StartDate returns startDate.
func (poll *Poll) StartDate() *time.Time {
	return poll.startDate
}

// SetStartDate sets the startDate.
func (poll *Poll) SetStartDate(startDate *time.Time) {
	poll.startDate = startDate
}

// EndDate returns endDate.
func (poll *Poll) EndDate() *time.Time {
	return poll.endDate
}

// SetEndDate sets the endDate.
func (poll *Poll) SetEndDate(endDate *time.Time) {
	poll.endDate = endDate
}

// AllowAnonymousVoting returns allowAnonymousVoting.
func (poll *Poll) AllowAnonymousVoting() bool {
	return poll.allowAnonymousVoting
}

// SetAllowAnonymousVoting sets the allowAnonymousVoting.
func (poll *Poll) SetAllowAnonymousVoting(allowAnonymousVoting bool) {
	poll.allowAnonymousVoting = allowAnonymousVoting
}

// Comments returns comments.
func (poll *Poll) Comments() *string {
	return poll.comments
}

// SetComments sets the comments.
func (poll *Poll) SetComments(comments *string) {
	poll.comments = comments
}

func newPoll() *Poll {
	return &Poll{}
}

// New returns a new instance of PollEntity.
func NewPollEntity() PollEntity {
	return newPoll()
}

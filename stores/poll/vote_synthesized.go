// Code generated by espal-store-synthesizer. DO NOT EDIT.
package poll

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ VoteEntity = &Vote{}

type VoteEntity interface {
	database.Model
	PollOptionID() string
	SetPollOptionID(pollOptionID string)
}

// ID returns id.
func (vote *Vote) ID() string {
	return vote.id
}

// CreatedByID returns createdByID.
func (vote *Vote) CreatedByID() string {
	return vote.createdByID
}

// SetCreatedByID sets the createdByID.
func (vote *Vote) SetCreatedByID(createdByID string) {
	vote.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (vote *Vote) UpdatedByID() *string {
	return vote.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (vote *Vote) SetUpdatedByID(updatedByID *string) {
	vote.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (vote *Vote) CreatedAt() time.Time {
	return vote.createdAt
}

// SetCreatedAt sets the createdAt.
func (vote *Vote) SetCreatedAt(createdAt time.Time) {
	vote.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (vote *Vote) UpdatedAt() *time.Time {
	return vote.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (vote *Vote) SetUpdatedAt(updatedAt *time.Time) {
	vote.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (vote *Vote) CreatedByFirstName() *string {
	return vote.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (vote *Vote) SetCreatedByFirstName(createdByFirstName *string) {
	vote.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (vote *Vote) CreatedBySurname() *string {
	return vote.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (vote *Vote) SetCreatedBySurname(createdBySurname *string) {
	vote.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (vote *Vote) UpdatedByFirstName() *string {
	return vote.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (vote *Vote) SetUpdatedByFirstName(updatedByFirstName *string) {
	vote.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (vote *Vote) UpdatedBySurname() *string {
	return vote.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (vote *Vote) SetUpdatedBySurname(updatedBySurname *string) {
	vote.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (vote *Vote) IsUpdated() bool {
	return vote.updatedByID != nil
}

// PollOptionID returns pollOptionID.
func (vote *Vote) PollOptionID() string {
	return vote.pollOptionID
}

// SetPollOptionID sets the pollOptionID.
func (vote *Vote) SetPollOptionID(pollOptionID string) {
	vote.pollOptionID = pollOptionID
}

func newVote() *Vote {
	return &Vote{}
}

// New returns a new instance of VoteEntity.
func NewVoteEntity() VoteEntity {
	return newVote()
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package poll_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/poll"
)

func TestPollTable(t *testing.T) {
	poll := poll.NewPollEntity()
	if poll.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPollTableAlias(t *testing.T) {
	poll := poll.NewPollEntity()
	if poll.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPollIsUpdated(t *testing.T) {
	poll := poll.NewPollEntity()
	poll.IsUpdated()
}

func TestPollID(t *testing.T) {
	poll := poll.NewPollEntity()
	poll.ID()
}

func TestPollCreatedByID(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetCreatedByID(testValue)
	if testValue != poll.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollUpdatedByID(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetUpdatedByID(&testValue)
	if &testValue != poll.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollCreatedAt(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := time.Now()
	poll.SetCreatedAt(testValue)
	if testValue != poll.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollUpdatedAt(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := time.Now()
	poll.SetUpdatedAt(&testValue)
	if &testValue != poll.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollCreatedByFirstName(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetCreatedByFirstName(&testValue)
	if &testValue != poll.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollCreatedBySurname(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetCreatedBySurname(&testValue)
	if &testValue != poll.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollUpdatedByFirstName(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetUpdatedByFirstName(&testValue)
	if &testValue != poll.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollUpdatedBySurname(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetUpdatedBySurname(&testValue)
	if &testValue != poll.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollActive(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := true
	poll.SetActive(testValue)
	if testValue != poll.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollStartDate(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := time.Now()
	poll.SetStartDate(&testValue)
	if &testValue != poll.StartDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollEndDate(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := time.Now()
	poll.SetEndDate(&testValue)
	if &testValue != poll.EndDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollAllowAnonymousVoting(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := true
	poll.SetAllowAnonymousVoting(testValue)
	if testValue != poll.AllowAnonymousVoting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPollComments(t *testing.T) {
	poll := poll.NewPollEntity()
	testValue := "testValue"
	poll.SetComments(&testValue)
	if &testValue != poll.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

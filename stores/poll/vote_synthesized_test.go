// Code generated by espal-store-synthesizer. DO NOT EDIT.
package poll_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/poll"
)

func TestVoteTable(t *testing.T) {
	vote := poll.NewVoteEntity()
	if vote.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestVoteTableAlias(t *testing.T) {
	vote := poll.NewVoteEntity()
	if vote.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestVoteIsUpdated(t *testing.T) {
	vote := poll.NewVoteEntity()
	vote.IsUpdated()
}

func TestVoteID(t *testing.T) {
	vote := poll.NewVoteEntity()
	vote.ID()
}

func TestVoteCreatedByID(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetCreatedByID(testValue)
	if testValue != vote.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteUpdatedByID(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetUpdatedByID(&testValue)
	if &testValue != vote.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteCreatedAt(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := time.Now()
	vote.SetCreatedAt(testValue)
	if testValue != vote.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteUpdatedAt(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := time.Now()
	vote.SetUpdatedAt(&testValue)
	if &testValue != vote.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteCreatedByFirstName(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetCreatedByFirstName(&testValue)
	if &testValue != vote.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteCreatedBySurname(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetCreatedBySurname(&testValue)
	if &testValue != vote.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteUpdatedByFirstName(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetUpdatedByFirstName(&testValue)
	if &testValue != vote.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVoteUpdatedBySurname(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetUpdatedBySurname(&testValue)
	if &testValue != vote.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVotePollOptionID(t *testing.T) {
	vote := poll.NewVoteEntity()
	testValue := "testValue"
	vote.SetPollOptionID(testValue)
	if testValue != vote.PollOptionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

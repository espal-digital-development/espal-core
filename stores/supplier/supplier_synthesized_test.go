// Code generated by espal-store-synthesizer. DO NOT EDIT.
package supplier_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/supplier"
)

func TestSupplierTable(t *testing.T) {
	s := supplier.NewSupplierEntity()
	if s.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSupplierTableAlias(t *testing.T) {
	s := supplier.NewSupplierEntity()
	if s.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSupplierIsUpdated(t *testing.T) {
	s := supplier.NewSupplierEntity()
	s.IsUpdated()
}

func TestSupplierID(t *testing.T) {
	s := supplier.NewSupplierEntity()
	s.ID()
}

func TestSupplierCreatedByID(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetCreatedByID(testValue)
	if testValue != s.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedByID(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetUpdatedByID(&testValue)
	if &testValue != s.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCreatedAt(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := time.Now()
	s.SetCreatedAt(testValue)
	if testValue != s.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedAt(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := time.Now()
	s.SetUpdatedAt(&testValue)
	if &testValue != s.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCreatedByFirstName(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetCreatedByFirstName(&testValue)
	if &testValue != s.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCreatedBySurname(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetCreatedBySurname(&testValue)
	if &testValue != s.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedByFirstName(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetUpdatedByFirstName(&testValue)
	if &testValue != s.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedBySurname(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetUpdatedBySurname(&testValue)
	if &testValue != s.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierActive(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := true
	s.SetActive(testValue)
	if testValue != s.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierKey(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetKey(&testValue)
	if &testValue != s.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierName(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetName(testValue)
	if testValue != s.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierContactFirstName(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetContactFirstName(&testValue)
	if &testValue != s.ContactFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierContactSurname(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetContactSurname(&testValue)
	if &testValue != s.ContactSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierStreet(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetStreet(&testValue)
	if &testValue != s.Street() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierStreetLine2(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetStreetLine2(&testValue)
	if &testValue != s.StreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierNumber(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetNumber(&testValue)
	if &testValue != s.Number() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierNumberAddition(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetNumberAddition(&testValue)
	if &testValue != s.NumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierZipCode(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetZipCode(&testValue)
	if &testValue != s.ZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCity(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetCity(&testValue)
	if &testValue != s.City() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierState(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetState(&testValue)
	if &testValue != s.State() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCountry(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := uint16(65000)
	s.SetCountry(&testValue)
	if &testValue != s.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierPhoneNumber(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetPhoneNumber(&testValue)
	if &testValue != s.PhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierEmail(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetEmail(&testValue)
	if &testValue != s.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierComments(t *testing.T) {
	s := supplier.NewSupplierEntity()
	testValue := "testValue"
	s.SetComments(&testValue)
	if &testValue != s.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

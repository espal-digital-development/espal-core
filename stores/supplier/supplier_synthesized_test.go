// Code generated by espal-store-synthesizer. DO NOT EDIT.
package supplier_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/supplier"
)

func TestSupplierTable(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	if supplier.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSupplierTableAlias(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	if supplier.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSupplierIsUpdated(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	supplier.IsUpdated()
}

func TestSupplierID(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	supplier.ID()
}

func TestSupplierCreatedByID(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetCreatedByID(testValue)
	if testValue != supplier.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedByID(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetUpdatedByID(&testValue)
	if &testValue != supplier.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCreatedAt(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := time.Now()
	supplier.SetCreatedAt(testValue)
	if testValue != supplier.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedAt(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := time.Now()
	supplier.SetUpdatedAt(&testValue)
	if &testValue != supplier.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCreatedByFirstName(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetCreatedByFirstName(&testValue)
	if &testValue != supplier.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCreatedBySurname(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetCreatedBySurname(&testValue)
	if &testValue != supplier.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedByFirstName(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetUpdatedByFirstName(&testValue)
	if &testValue != supplier.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierUpdatedBySurname(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetUpdatedBySurname(&testValue)
	if &testValue != supplier.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierActive(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := true
	supplier.SetActive(testValue)
	if testValue != supplier.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierKey(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetKey(&testValue)
	if &testValue != supplier.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierName(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetName(testValue)
	if testValue != supplier.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierContactFirstName(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetContactFirstName(&testValue)
	if &testValue != supplier.ContactFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierContactSurname(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetContactSurname(&testValue)
	if &testValue != supplier.ContactSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierStreet(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetStreet(&testValue)
	if &testValue != supplier.Street() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierStreetLine2(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetStreetLine2(&testValue)
	if &testValue != supplier.StreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierNumber(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetNumber(&testValue)
	if &testValue != supplier.Number() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierNumberAddition(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetNumberAddition(&testValue)
	if &testValue != supplier.NumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierZipCode(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetZipCode(&testValue)
	if &testValue != supplier.ZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCity(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetCity(&testValue)
	if &testValue != supplier.City() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierState(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetState(&testValue)
	if &testValue != supplier.State() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierCountry(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := uint16(65000)
	supplier.SetCountry(&testValue)
	if &testValue != supplier.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierPhoneNumber(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetPhoneNumber(&testValue)
	if &testValue != supplier.PhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierEmail(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetEmail(&testValue)
	if &testValue != supplier.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSupplierComments(t *testing.T) {
	supplier := supplier.NewSupplierEntity()
	testValue := "testValue"
	supplier.SetComments(&testValue)
	if &testValue != supplier.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

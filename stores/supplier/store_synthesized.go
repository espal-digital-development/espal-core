// Code generated by espal-store-synthesizer. DO NOT EDIT.
package supplier

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &SuppliersStore{}

// Store represents a data interaction object.
type Store interface {
}

func (s *SuppliersStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Supplier, ok bool, err error) {
	rows, err := s.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Supplier, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		s := newSupplier()
		fields := []interface{}{&s.id, &s.createdByID, &s.updatedByID, &s.createdAt, &s.updatedAt, &s.active, &s.key, &s.name, &s.contactFirstName, &s.contactSurname, &s.street, &s.streetLine2, &s.number, &s.numberAddition, &s.zipCode, &s.city, &s.state, &s.country, &s.phoneNumber, &s.email, &s.comments}
		if withCreators {
			fields = append(fields, &s.createdByFirstName, &s.createdBySurname, &s.updatedByFirstName, &s.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, s)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SuppliersStore.
func New(selecterDatabase database.Database) (*SuppliersStore, error) {
	s := &SuppliersStore{
		selecterDatabase: selecterDatabase,
	}
	return s, nil
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package supplier

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &SuppliersStore{}

// Store represents a data interaction object.
type Store interface {
}

func (suppliersStore *SuppliersStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Supplier, ok bool, err error) {
	rows, err := suppliersStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Supplier, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		supplier := newSupplier()
		fields := []interface{}{&supplier.id, &supplier.createdByID, &supplier.updatedByID, &supplier.createdAt, &supplier.updatedAt, &supplier.active, &supplier.key, &supplier.name, &supplier.contactFirstName, &supplier.contactSurname, &supplier.street, &supplier.streetLine2, &supplier.number, &supplier.numberAddition, &supplier.zipCode, &supplier.city, &supplier.state, &supplier.country, &supplier.phoneNumber, &supplier.email, &supplier.comments}
		if withCreators {
			fields = append(fields, &supplier.createdByFirstName, &supplier.createdBySurname, &supplier.updatedByFirstName, &supplier.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, supplier)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SuppliersStore.
func New(selecterDatabase database.Database) (*SuppliersStore, error) {
	suppliersStore := &SuppliersStore{
		selecterDatabase: selecterDatabase,
	}
	return suppliersStore, nil
}

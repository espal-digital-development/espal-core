// Code generated by espal-store-synthesizer. DO NOT EDIT.
package tax_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/tax"
)

func TestTaxTable(t *testing.T) {
	tax := tax.NewTaxEntity()
	if tax.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestTaxTableAlias(t *testing.T) {
	tax := tax.NewTaxEntity()
	if tax.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestTaxIsUpdated(t *testing.T) {
	tax := tax.NewTaxEntity()
	tax.IsUpdated()
}

func TestTaxID(t *testing.T) {
	tax := tax.NewTaxEntity()
	tax.ID()
}

func TestTaxCreatedByID(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetCreatedByID(testValue)
	if testValue != tax.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxUpdatedByID(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetUpdatedByID(&testValue)
	if &testValue != tax.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxCreatedAt(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := time.Now()
	tax.SetCreatedAt(testValue)
	if testValue != tax.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxUpdatedAt(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := time.Now()
	tax.SetUpdatedAt(&testValue)
	if &testValue != tax.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxCreatedByFirstName(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetCreatedByFirstName(&testValue)
	if &testValue != tax.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxCreatedBySurname(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetCreatedBySurname(&testValue)
	if &testValue != tax.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxUpdatedByFirstName(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetUpdatedByFirstName(&testValue)
	if &testValue != tax.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxUpdatedBySurname(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetUpdatedBySurname(&testValue)
	if &testValue != tax.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxTaxGroupID(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := "testValue"
	tax.SetTaxGroupID(testValue)
	if testValue != tax.TaxGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxCountry(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := uint16(65000)
	tax.SetCountry(testValue)
	if testValue != tax.Country() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTaxRate(t *testing.T) {
	tax := tax.NewTaxEntity()
	testValue := float32(3.14)
	tax.SetRate(testValue)
	if testValue != tax.Rate() {
		t.Fatal("Getter did not return the Set value")
	}
}

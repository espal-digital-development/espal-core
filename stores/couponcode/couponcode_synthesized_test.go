// Code generated by espal-store-synthesizer. DO NOT EDIT.
package couponcode_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/couponcode"
)

func TestCouponCodeTable(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	if couponCode.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestCouponCodeTableAlias(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	if couponCode.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestCouponCodeIsUpdated(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	couponCode.IsUpdated()
}

func TestCouponCodeID(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	couponCode.ID()
}

func TestCouponCodeCreatedByID(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetCreatedByID(testValue)
	if testValue != couponCode.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeUpdatedByID(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetUpdatedByID(&testValue)
	if &testValue != couponCode.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeCreatedAt(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := time.Now()
	couponCode.SetCreatedAt(testValue)
	if testValue != couponCode.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeUpdatedAt(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := time.Now()
	couponCode.SetUpdatedAt(&testValue)
	if &testValue != couponCode.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeCreatedByFirstName(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetCreatedByFirstName(&testValue)
	if &testValue != couponCode.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeCreatedBySurname(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetCreatedBySurname(&testValue)
	if &testValue != couponCode.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeUpdatedByFirstName(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetUpdatedByFirstName(&testValue)
	if &testValue != couponCode.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeUpdatedBySurname(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetUpdatedBySurname(&testValue)
	if &testValue != couponCode.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeClaimedByID(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetClaimedByID(&testValue)
	if &testValue != couponCode.ClaimedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCouponCodeKey(t *testing.T) {
	couponCode := couponcode.NewCouponCodeEntity()
	testValue := "testValue"
	couponCode.SetKey(testValue)
	if testValue != couponCode.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

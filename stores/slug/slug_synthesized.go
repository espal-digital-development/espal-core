// Code generated by espal-store-synthesizer. DO NOT EDIT.
package slug

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ SlugEntity = &Slug{}

type SlugEntity interface {
	database.Model
	DomainID() string
	SetDomainID(domainID string)
	Language() uint16
	SetLanguage(language uint16)
	Path() string
	SetPath(path string)
	RerouteTo() string
	SetRerouteTo(rerouteTo string)
	InvalidWithStatus() *uint16
	SetInvalidWithStatus(invalidWithStatus *uint16)
	InvalidMessage() *string
	SetInvalidMessage(invalidMessage *string)
	RedirectToRawPath() *string
	SetRedirectToRawPath(redirectToRawPath *string)
	RedirectStatusCode() *uint16
	SetRedirectStatusCode(redirectStatusCode *uint16)
}

// TableName returns the table name that belongs to the current model.
func (slug *Slug) TableName() string {
	return "Slug"
}

// ID returns id.
func (slug *Slug) ID() string {
	return slug.id
}

// CreatedByID returns createdByID.
func (slug *Slug) CreatedByID() string {
	return slug.createdByID
}

// SetCreatedByID sets the createdByID.
func (slug *Slug) SetCreatedByID(createdByID string) {
	slug.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (slug *Slug) UpdatedByID() *string {
	return slug.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (slug *Slug) SetUpdatedByID(updatedByID *string) {
	slug.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (slug *Slug) CreatedAt() time.Time {
	return slug.createdAt
}

// SetCreatedAt sets the createdAt.
func (slug *Slug) SetCreatedAt(createdAt time.Time) {
	slug.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (slug *Slug) UpdatedAt() *time.Time {
	return slug.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (slug *Slug) SetUpdatedAt(updatedAt *time.Time) {
	slug.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (slug *Slug) CreatedByFirstName() *string {
	return slug.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (slug *Slug) SetCreatedByFirstName(createdByFirstName *string) {
	slug.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (slug *Slug) CreatedBySurname() *string {
	return slug.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (slug *Slug) SetCreatedBySurname(createdBySurname *string) {
	slug.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (slug *Slug) UpdatedByFirstName() *string {
	return slug.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (slug *Slug) SetUpdatedByFirstName(updatedByFirstName *string) {
	slug.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (slug *Slug) UpdatedBySurname() *string {
	return slug.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (slug *Slug) SetUpdatedBySurname(updatedBySurname *string) {
	slug.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (slug *Slug) IsUpdated() bool {
	return slug.updatedByID != nil
}

// DomainID returns domainID.
func (slug *Slug) DomainID() string {
	return slug.domainID
}

// SetDomainID sets the domainID.
func (slug *Slug) SetDomainID(domainID string) {
	slug.domainID = domainID
}

// Language returns language.
func (slug *Slug) Language() uint16 {
	return slug.language
}

// SetLanguage sets the language.
func (slug *Slug) SetLanguage(language uint16) {
	slug.language = language
}

// Path returns path.
func (slug *Slug) Path() string {
	return slug.path
}

// SetPath sets the path.
func (slug *Slug) SetPath(path string) {
	slug.path = path
}

// RerouteTo returns rerouteTo.
func (slug *Slug) RerouteTo() string {
	return slug.rerouteTo
}

// SetRerouteTo sets the rerouteTo.
func (slug *Slug) SetRerouteTo(rerouteTo string) {
	slug.rerouteTo = rerouteTo
}

// InvalidWithStatus returns invalidWithStatus.
func (slug *Slug) InvalidWithStatus() *uint16 {
	return slug.invalidWithStatus
}

// SetInvalidWithStatus sets the invalidWithStatus.
func (slug *Slug) SetInvalidWithStatus(invalidWithStatus *uint16) {
	slug.invalidWithStatus = invalidWithStatus
}

// InvalidMessage returns invalidMessage.
func (slug *Slug) InvalidMessage() *string {
	return slug.invalidMessage
}

// SetInvalidMessage sets the invalidMessage.
func (slug *Slug) SetInvalidMessage(invalidMessage *string) {
	slug.invalidMessage = invalidMessage
}

// RedirectToRawPath returns redirectToRawPath.
func (slug *Slug) RedirectToRawPath() *string {
	return slug.redirectToRawPath
}

// SetRedirectToRawPath sets the redirectToRawPath.
func (slug *Slug) SetRedirectToRawPath(redirectToRawPath *string) {
	slug.redirectToRawPath = redirectToRawPath
}

// RedirectStatusCode returns redirectStatusCode.
func (slug *Slug) RedirectStatusCode() *uint16 {
	return slug.redirectStatusCode
}

// SetRedirectStatusCode sets the redirectStatusCode.
func (slug *Slug) SetRedirectStatusCode(redirectStatusCode *uint16) {
	slug.redirectStatusCode = redirectStatusCode
}

func newSlug() *Slug {
	return &Slug{}
}

// New returns a new instance of SlugEntity.
func NewSlugEntity() SlugEntity {
	return newSlug()
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package slug_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/slug"
)

func TestSlugTable(t *testing.T) {
	slug := slug.NewSlugEntity()
	if slug.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSlugTableAlias(t *testing.T) {
	slug := slug.NewSlugEntity()
	if slug.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSlugIsUpdated(t *testing.T) {
	slug := slug.NewSlugEntity()
	slug.IsUpdated()
}

func TestSlugID(t *testing.T) {
	slug := slug.NewSlugEntity()
	slug.ID()
}

func TestSlugCreatedByID(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetCreatedByID(testValue)
	if testValue != slug.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedByID(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetUpdatedByID(&testValue)
	if &testValue != slug.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugCreatedAt(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := time.Now()
	slug.SetCreatedAt(testValue)
	if testValue != slug.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedAt(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := time.Now()
	slug.SetUpdatedAt(&testValue)
	if &testValue != slug.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugCreatedByFirstName(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetCreatedByFirstName(&testValue)
	if &testValue != slug.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugCreatedBySurname(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetCreatedBySurname(&testValue)
	if &testValue != slug.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedByFirstName(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetUpdatedByFirstName(&testValue)
	if &testValue != slug.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedBySurname(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetUpdatedBySurname(&testValue)
	if &testValue != slug.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugDomainID(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetDomainID(testValue)
	if testValue != slug.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugLanguage(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := uint16(65000)
	slug.SetLanguage(testValue)
	if testValue != slug.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugPath(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetPath(testValue)
	if testValue != slug.Path() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugRerouteTo(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetRerouteTo(testValue)
	if testValue != slug.RerouteTo() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugInvalidWithStatus(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := uint16(65000)
	slug.SetInvalidWithStatus(&testValue)
	if &testValue != slug.InvalidWithStatus() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugInvalidMessage(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetInvalidMessage(&testValue)
	if &testValue != slug.InvalidMessage() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugRedirectToRawPath(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := "testValue"
	slug.SetRedirectToRawPath(&testValue)
	if &testValue != slug.RedirectToRawPath() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugRedirectStatusCode(t *testing.T) {
	slug := slug.NewSlugEntity()
	testValue := uint16(65000)
	slug.SetRedirectStatusCode(&testValue)
	if &testValue != slug.RedirectStatusCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

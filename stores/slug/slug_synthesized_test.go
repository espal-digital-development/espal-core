// Code generated by espal-store-synthesizer. DO NOT EDIT.
package slug_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/slug"
)

func TestSlugTable(t *testing.T) {
	s := slug.NewSlugEntity()
	if s.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSlugTableAlias(t *testing.T) {
	s := slug.NewSlugEntity()
	if s.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSlugIsUpdated(t *testing.T) {
	s := slug.NewSlugEntity()
	s.IsUpdated()
}

func TestSlugID(t *testing.T) {
	s := slug.NewSlugEntity()
	s.ID()
}

func TestSlugCreatedByID(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetCreatedByID(testValue)
	if testValue != s.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedByID(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetUpdatedByID(&testValue)
	if &testValue != s.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugCreatedAt(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := time.Now()
	s.SetCreatedAt(testValue)
	if testValue != s.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedAt(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := time.Now()
	s.SetUpdatedAt(&testValue)
	if &testValue != s.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugCreatedByFirstName(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetCreatedByFirstName(&testValue)
	if &testValue != s.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugCreatedBySurname(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetCreatedBySurname(&testValue)
	if &testValue != s.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedByFirstName(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetUpdatedByFirstName(&testValue)
	if &testValue != s.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugUpdatedBySurname(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetUpdatedBySurname(&testValue)
	if &testValue != s.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugDomainID(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetDomainID(testValue)
	if testValue != s.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugLanguage(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := uint16(65000)
	s.SetLanguage(testValue)
	if testValue != s.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugPath(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetPath(testValue)
	if testValue != s.Path() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugRerouteTo(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetRerouteTo(testValue)
	if testValue != s.RerouteTo() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugInvalidWithStatus(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := uint16(65000)
	s.SetInvalidWithStatus(&testValue)
	if &testValue != s.InvalidWithStatus() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugInvalidMessage(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetInvalidMessage(&testValue)
	if &testValue != s.InvalidMessage() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugRedirectToRawPath(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := "testValue"
	s.SetRedirectToRawPath(&testValue)
	if &testValue != s.RedirectToRawPath() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSlugRedirectStatusCode(t *testing.T) {
	s := slug.NewSlugEntity()
	testValue := uint16(65000)
	s.SetRedirectStatusCode(&testValue)
	if &testValue != s.RedirectStatusCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package slug

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &SlugsStore{}

// Store represents a data interaction object.
type Store interface {
	GetOneByDomainIDAndPath(domainID string, path string) (*Slug, bool, error)
}

func (slugsStore *SlugsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Slug, ok bool, err error) {
	rows, err := slugsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Slug, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		slug := newSlug()
		fields := []interface{}{&slug.id, &slug.createdByID, &slug.updatedByID, &slug.createdAt, &slug.updatedAt, &slug.domainID, &slug.language, &slug.path, &slug.rerouteTo, &slug.invalidWithStatus, &slug.invalidMessage, &slug.redirectToRawPath, &slug.redirectStatusCode}
		if withCreators {
			fields = append(fields, &slug.createdByFirstName, &slug.createdBySurname, &slug.updatedByFirstName, &slug.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, slug)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of SlugsStore.
func New(selecterDatabase database.Database) (*SlugsStore, error) {
	slugsStore := &SlugsStore{
		selecterDatabase: selecterDatabase,
	}
	return slugsStore, nil
}

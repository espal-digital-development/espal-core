// Code generated by espal-store-synthesizer. DO NOT EDIT.
package paymentaccount

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PaymentAccountEntity = &PaymentAccount{}

type PaymentAccountEntity interface {
	database.Model
	PaymentMethodID() string
	SetPaymentMethodID(paymentMethodID string)
	Active() bool
	SetActive(active bool)
	Name() string
	SetName(name string)
	Username() *string
	SetUsername(username *string)
	Passphrase() *string
	SetPassphrase(passphrase *string)
	SecretKey() *string
	SetSecretKey(secretKey *string)
	PublicKey() *string
	SetPublicKey(publicKey *string)
	Certificate() *string
	SetCertificate(certificate *string)
}

// TableName returns the table name that belongs to the current model.
func (paymentAccount *PaymentAccount) TableName() string {
	return "PaymentAccount"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (paymentAccount *PaymentAccount) TableAlias() string {
	return "pae"
}

// ID returns id.
func (paymentAccount *PaymentAccount) ID() string {
	return paymentAccount.id
}

// CreatedByID returns createdByID.
func (paymentAccount *PaymentAccount) CreatedByID() string {
	return paymentAccount.createdByID
}

// SetCreatedByID sets the createdByID.
func (paymentAccount *PaymentAccount) SetCreatedByID(createdByID string) {
	paymentAccount.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (paymentAccount *PaymentAccount) UpdatedByID() *string {
	return paymentAccount.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (paymentAccount *PaymentAccount) SetUpdatedByID(updatedByID *string) {
	paymentAccount.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (paymentAccount *PaymentAccount) CreatedAt() time.Time {
	return paymentAccount.createdAt
}

// SetCreatedAt sets the createdAt.
func (paymentAccount *PaymentAccount) SetCreatedAt(createdAt time.Time) {
	paymentAccount.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (paymentAccount *PaymentAccount) UpdatedAt() *time.Time {
	return paymentAccount.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (paymentAccount *PaymentAccount) SetUpdatedAt(updatedAt *time.Time) {
	paymentAccount.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (paymentAccount *PaymentAccount) CreatedByFirstName() *string {
	return paymentAccount.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (paymentAccount *PaymentAccount) SetCreatedByFirstName(createdByFirstName *string) {
	paymentAccount.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (paymentAccount *PaymentAccount) CreatedBySurname() *string {
	return paymentAccount.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (paymentAccount *PaymentAccount) SetCreatedBySurname(createdBySurname *string) {
	paymentAccount.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (paymentAccount *PaymentAccount) UpdatedByFirstName() *string {
	return paymentAccount.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (paymentAccount *PaymentAccount) SetUpdatedByFirstName(updatedByFirstName *string) {
	paymentAccount.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (paymentAccount *PaymentAccount) UpdatedBySurname() *string {
	return paymentAccount.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (paymentAccount *PaymentAccount) SetUpdatedBySurname(updatedBySurname *string) {
	paymentAccount.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (paymentAccount *PaymentAccount) IsUpdated() bool {
	return paymentAccount.updatedByID != nil
}

// PaymentMethodID returns paymentMethodID.
func (paymentAccount *PaymentAccount) PaymentMethodID() string {
	return paymentAccount.paymentMethodID
}

// SetPaymentMethodID sets the paymentMethodID.
func (paymentAccount *PaymentAccount) SetPaymentMethodID(paymentMethodID string) {
	paymentAccount.paymentMethodID = paymentMethodID
}

// Active returns active.
func (paymentAccount *PaymentAccount) Active() bool {
	return paymentAccount.active
}

// SetActive sets the active.
func (paymentAccount *PaymentAccount) SetActive(active bool) {
	paymentAccount.active = active
}

// Name returns name.
func (paymentAccount *PaymentAccount) Name() string {
	return paymentAccount.name
}

// SetName sets the name.
func (paymentAccount *PaymentAccount) SetName(name string) {
	paymentAccount.name = name
}

// Username returns username.
func (paymentAccount *PaymentAccount) Username() *string {
	return paymentAccount.username
}

// SetUsername sets the username.
func (paymentAccount *PaymentAccount) SetUsername(username *string) {
	paymentAccount.username = username
}

// Passphrase returns passphrase.
func (paymentAccount *PaymentAccount) Passphrase() *string {
	return paymentAccount.passphrase
}

// SetPassphrase sets the passphrase.
func (paymentAccount *PaymentAccount) SetPassphrase(passphrase *string) {
	paymentAccount.passphrase = passphrase
}

// SecretKey returns secretKey.
func (paymentAccount *PaymentAccount) SecretKey() *string {
	return paymentAccount.secretKey
}

// SetSecretKey sets the secretKey.
func (paymentAccount *PaymentAccount) SetSecretKey(secretKey *string) {
	paymentAccount.secretKey = secretKey
}

// PublicKey returns publicKey.
func (paymentAccount *PaymentAccount) PublicKey() *string {
	return paymentAccount.publicKey
}

// SetPublicKey sets the publicKey.
func (paymentAccount *PaymentAccount) SetPublicKey(publicKey *string) {
	paymentAccount.publicKey = publicKey
}

// Certificate returns certificate.
func (paymentAccount *PaymentAccount) Certificate() *string {
	return paymentAccount.certificate
}

// SetCertificate sets the certificate.
func (paymentAccount *PaymentAccount) SetCertificate(certificate *string) {
	paymentAccount.certificate = certificate
}

func newPaymentAccount() *PaymentAccount {
	return &PaymentAccount{}
}

// New returns a new instance of PaymentAccountEntity.
func NewPaymentAccountEntity() PaymentAccountEntity {
	return newPaymentAccount()
}

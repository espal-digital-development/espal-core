// Code generated by espal-store-synthesizer. DO NOT EDIT.
package paymentaccount_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/paymentaccount"
)

func TestPaymentAccountTable(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	if paymentAccount.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPaymentAccountTableAlias(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	if paymentAccount.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPaymentAccountIsUpdated(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	paymentAccount.IsUpdated()
}

func TestPaymentAccountID(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	paymentAccount.ID()
}

func TestPaymentAccountCreatedByID(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetCreatedByID(testValue)
	if testValue != paymentAccount.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedByID(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetUpdatedByID(&testValue)
	if &testValue != paymentAccount.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCreatedAt(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := time.Now()
	paymentAccount.SetCreatedAt(testValue)
	if testValue != paymentAccount.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedAt(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := time.Now()
	paymentAccount.SetUpdatedAt(&testValue)
	if &testValue != paymentAccount.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCreatedByFirstName(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetCreatedByFirstName(&testValue)
	if &testValue != paymentAccount.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCreatedBySurname(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetCreatedBySurname(&testValue)
	if &testValue != paymentAccount.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedByFirstName(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetUpdatedByFirstName(&testValue)
	if &testValue != paymentAccount.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedBySurname(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetUpdatedBySurname(&testValue)
	if &testValue != paymentAccount.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountPaymentMethodID(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetPaymentMethodID(testValue)
	if testValue != paymentAccount.PaymentMethodID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountActive(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := true
	paymentAccount.SetActive(testValue)
	if testValue != paymentAccount.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountName(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetName(testValue)
	if testValue != paymentAccount.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUsername(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetUsername(&testValue)
	if &testValue != paymentAccount.Username() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountPassphrase(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetPassphrase(&testValue)
	if &testValue != paymentAccount.Passphrase() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountSecretKey(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetSecretKey(&testValue)
	if &testValue != paymentAccount.SecretKey() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountPublicKey(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetPublicKey(&testValue)
	if &testValue != paymentAccount.PublicKey() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCertificate(t *testing.T) {
	paymentAccount := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	paymentAccount.SetCertificate(&testValue)
	if &testValue != paymentAccount.Certificate() {
		t.Fatal("Getter did not return the Set value")
	}
}

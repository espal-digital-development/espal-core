// Code generated by espal-store-synthesizer. DO NOT EDIT.
package paymentaccount_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/paymentaccount"
)

func TestPaymentAccountTable(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	if p.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPaymentAccountTableAlias(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	if p.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPaymentAccountIsUpdated(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	p.IsUpdated()
}

func TestPaymentAccountID(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	p.ID()
}

func TestPaymentAccountCreatedByID(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetCreatedByID(testValue)
	if testValue != p.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedByID(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetUpdatedByID(&testValue)
	if &testValue != p.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCreatedAt(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := time.Now()
	p.SetCreatedAt(testValue)
	if testValue != p.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedAt(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := time.Now()
	p.SetUpdatedAt(&testValue)
	if &testValue != p.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCreatedByFirstName(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetCreatedByFirstName(&testValue)
	if &testValue != p.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCreatedBySurname(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetCreatedBySurname(&testValue)
	if &testValue != p.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedByFirstName(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetUpdatedByFirstName(&testValue)
	if &testValue != p.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUpdatedBySurname(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetUpdatedBySurname(&testValue)
	if &testValue != p.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountPaymentMethodID(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetPaymentMethodID(testValue)
	if testValue != p.PaymentMethodID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountActive(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := true
	p.SetActive(testValue)
	if testValue != p.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountName(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetName(testValue)
	if testValue != p.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountUsername(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetUsername(&testValue)
	if &testValue != p.Username() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountPassphrase(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetPassphrase(&testValue)
	if &testValue != p.Passphrase() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountSecretKey(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetSecretKey(&testValue)
	if &testValue != p.SecretKey() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountPublicKey(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetPublicKey(&testValue)
	if &testValue != p.PublicKey() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentAccountCertificate(t *testing.T) {
	p := paymentaccount.NewPaymentAccountEntity()
	testValue := "testValue"
	p.SetCertificate(&testValue)
	if &testValue != p.Certificate() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package paymentmethod_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/paymentmethod"
)

func TestPaymentMethodTable(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	if paymentMethod.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPaymentMethodTableAlias(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	if paymentMethod.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPaymentMethodIsUpdated(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	paymentMethod.IsUpdated()
}

func TestPaymentMethodID(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	paymentMethod.ID()
}

func TestPaymentMethodCreatedByID(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetCreatedByID(testValue)
	if testValue != paymentMethod.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodUpdatedByID(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetUpdatedByID(&testValue)
	if &testValue != paymentMethod.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodCreatedAt(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := time.Now()
	paymentMethod.SetCreatedAt(testValue)
	if testValue != paymentMethod.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodUpdatedAt(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := time.Now()
	paymentMethod.SetUpdatedAt(&testValue)
	if &testValue != paymentMethod.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodCreatedByFirstName(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetCreatedByFirstName(&testValue)
	if &testValue != paymentMethod.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodCreatedBySurname(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetCreatedBySurname(&testValue)
	if &testValue != paymentMethod.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodUpdatedByFirstName(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetUpdatedByFirstName(&testValue)
	if &testValue != paymentMethod.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodUpdatedBySurname(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetUpdatedBySurname(&testValue)
	if &testValue != paymentMethod.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodName(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetName(testValue)
	if testValue != paymentMethod.Name() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPaymentMethodDescription(t *testing.T) {
	paymentMethod := paymentmethod.NewPaymentMethodEntity()
	testValue := "testValue"
	paymentMethod.SetDescription(&testValue)
	if &testValue != paymentMethod.Description() {
		t.Fatal("Getter did not return the Set value")
	}
}

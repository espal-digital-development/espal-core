// Code generated by espal-store-synthesizer. DO NOT EDIT.
package returnorder_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/returnorder"
)

func TestReturnOrderTable(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	if r.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestReturnOrderTableAlias(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	if r.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestReturnOrderIsUpdated(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	r.IsUpdated()
}

func TestReturnOrderID(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	r.ID()
}

func TestReturnOrderCreatedByID(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetCreatedByID(testValue)
	if testValue != r.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderUpdatedByID(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetUpdatedByID(&testValue)
	if &testValue != r.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderCreatedAt(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := time.Now()
	r.SetCreatedAt(testValue)
	if testValue != r.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderUpdatedAt(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := time.Now()
	r.SetUpdatedAt(&testValue)
	if &testValue != r.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderCreatedByFirstName(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetCreatedByFirstName(&testValue)
	if &testValue != r.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderCreatedBySurname(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetCreatedBySurname(&testValue)
	if &testValue != r.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderUpdatedByFirstName(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetUpdatedByFirstName(&testValue)
	if &testValue != r.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderUpdatedBySurname(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetUpdatedBySurname(&testValue)
	if &testValue != r.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderDomainID(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetDomainID(testValue)
	if testValue != r.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderUserID(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetUserID(testValue)
	if testValue != r.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReturnOrderComments(t *testing.T) {
	r := returnorder.NewReturnOrderEntity()
	testValue := "testValue"
	r.SetComments(&testValue)
	if &testValue != r.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

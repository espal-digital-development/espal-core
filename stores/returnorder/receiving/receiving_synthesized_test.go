// Code generated by espal-store-synthesizer. DO NOT EDIT.
package receiving_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/returnorder/receiving"
)

func TestReceivingTable(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	if receiving.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestReceivingTableAlias(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	if receiving.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestReceivingIsUpdated(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	receiving.IsUpdated()
}

func TestReceivingID(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	receiving.ID()
}

func TestReceivingCreatedByID(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetCreatedByID(testValue)
	if testValue != receiving.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingUpdatedByID(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetUpdatedByID(&testValue)
	if &testValue != receiving.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingCreatedAt(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := time.Now()
	receiving.SetCreatedAt(testValue)
	if testValue != receiving.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingUpdatedAt(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := time.Now()
	receiving.SetUpdatedAt(&testValue)
	if &testValue != receiving.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingCreatedByFirstName(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetCreatedByFirstName(&testValue)
	if &testValue != receiving.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingCreatedBySurname(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetCreatedBySurname(&testValue)
	if &testValue != receiving.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingUpdatedByFirstName(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetUpdatedByFirstName(&testValue)
	if &testValue != receiving.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingUpdatedBySurname(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetUpdatedBySurname(&testValue)
	if &testValue != receiving.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingDomainID(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetDomainID(testValue)
	if testValue != receiving.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestReceivingComments(t *testing.T) {
	receiving := receiving.NewReceivingEntity()
	testValue := "testValue"
	receiving.SetComments(&testValue)
	if &testValue != receiving.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

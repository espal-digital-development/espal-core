// Code generated by espal-store-synthesizer. DO NOT EDIT.
package wishlist_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/wishlist"
)

func TestWishlistTable(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	if w.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestWishlistTableAlias(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	if w.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestWishlistIsUpdated(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	w.IsUpdated()
}

func TestWishlistID(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	w.ID()
}

func TestWishlistCreatedByID(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetCreatedByID(testValue)
	if testValue != w.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistUpdatedByID(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetUpdatedByID(&testValue)
	if &testValue != w.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistCreatedAt(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := time.Now()
	w.SetCreatedAt(testValue)
	if testValue != w.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistUpdatedAt(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := time.Now()
	w.SetUpdatedAt(&testValue)
	if &testValue != w.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistCreatedByFirstName(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetCreatedByFirstName(&testValue)
	if &testValue != w.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistCreatedBySurname(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetCreatedBySurname(&testValue)
	if &testValue != w.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistUpdatedByFirstName(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetUpdatedByFirstName(&testValue)
	if &testValue != w.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistUpdatedBySurname(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetUpdatedBySurname(&testValue)
	if &testValue != w.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistDomainID(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetDomainID(testValue)
	if testValue != w.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistUserID(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := "testValue"
	w.SetUserID(testValue)
	if testValue != w.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWishlistSorting(t *testing.T) {
	w := wishlist.NewWishlistEntity()
	testValue := uint(1e9)
	w.SetSorting(testValue)
	if testValue != w.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package wishlist

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ WishlistEntity = &Wishlist{}

type WishlistEntity interface {
	database.Model
	DomainID() string
	SetDomainID(domainID string)
	UserID() string
	SetUserID(userID string)
	Sorting() uint
	SetSorting(sorting uint)
}

// TableName returns the table name that belongs to the current model.
func (wishlist *Wishlist) TableName() string {
	return "Wishlist"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (wishlist *Wishlist) TableAlias() string {
	return "we"
}

// ID returns id.
func (wishlist *Wishlist) ID() string {
	return wishlist.id
}

// CreatedByID returns createdByID.
func (wishlist *Wishlist) CreatedByID() string {
	return wishlist.createdByID
}

// SetCreatedByID sets the createdByID.
func (wishlist *Wishlist) SetCreatedByID(createdByID string) {
	wishlist.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (wishlist *Wishlist) UpdatedByID() *string {
	return wishlist.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (wishlist *Wishlist) SetUpdatedByID(updatedByID *string) {
	wishlist.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (wishlist *Wishlist) CreatedAt() time.Time {
	return wishlist.createdAt
}

// SetCreatedAt sets the createdAt.
func (wishlist *Wishlist) SetCreatedAt(createdAt time.Time) {
	wishlist.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (wishlist *Wishlist) UpdatedAt() *time.Time {
	return wishlist.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (wishlist *Wishlist) SetUpdatedAt(updatedAt *time.Time) {
	wishlist.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (wishlist *Wishlist) CreatedByFirstName() *string {
	return wishlist.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (wishlist *Wishlist) SetCreatedByFirstName(createdByFirstName *string) {
	wishlist.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (wishlist *Wishlist) CreatedBySurname() *string {
	return wishlist.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (wishlist *Wishlist) SetCreatedBySurname(createdBySurname *string) {
	wishlist.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (wishlist *Wishlist) UpdatedByFirstName() *string {
	return wishlist.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (wishlist *Wishlist) SetUpdatedByFirstName(updatedByFirstName *string) {
	wishlist.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (wishlist *Wishlist) UpdatedBySurname() *string {
	return wishlist.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (wishlist *Wishlist) SetUpdatedBySurname(updatedBySurname *string) {
	wishlist.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (wishlist *Wishlist) IsUpdated() bool {
	return wishlist.updatedByID != nil
}

// DomainID returns domainID.
func (wishlist *Wishlist) DomainID() string {
	return wishlist.domainID
}

// SetDomainID sets the domainID.
func (wishlist *Wishlist) SetDomainID(domainID string) {
	wishlist.domainID = domainID
}

// UserID returns userID.
func (wishlist *Wishlist) UserID() string {
	return wishlist.userID
}

// SetUserID sets the userID.
func (wishlist *Wishlist) SetUserID(userID string) {
	wishlist.userID = userID
}

// Sorting returns sorting.
func (wishlist *Wishlist) Sorting() uint {
	return wishlist.sorting
}

// SetSorting sets the sorting.
func (wishlist *Wishlist) SetSorting(sorting uint) {
	wishlist.sorting = sorting
}

func newWishlist() *Wishlist {
	return &Wishlist{}
}

// New returns a new instance of WishlistEntity.
func NewWishlistEntity() WishlistEntity {
	return newWishlist()
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ BundledVariantEntity = &BundledVariant{}

type BundledVariantEntity interface {
	database.Model
	BundledID() string
	SetBundledID(bundledID string)
	VariantID() string
	SetVariantID(variantID string)
	Quantity() uint
	SetQuantity(quantity uint)
}

// ID returns id.
func (bundledVariant *BundledVariant) ID() string {
	return bundledVariant.id
}

// CreatedByID returns createdByID.
func (bundledVariant *BundledVariant) CreatedByID() string {
	return bundledVariant.createdByID
}

// SetCreatedByID sets the createdByID.
func (bundledVariant *BundledVariant) SetCreatedByID(createdByID string) {
	bundledVariant.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (bundledVariant *BundledVariant) UpdatedByID() *string {
	return bundledVariant.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (bundledVariant *BundledVariant) SetUpdatedByID(updatedByID *string) {
	bundledVariant.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (bundledVariant *BundledVariant) CreatedAt() time.Time {
	return bundledVariant.createdAt
}

// SetCreatedAt sets the createdAt.
func (bundledVariant *BundledVariant) SetCreatedAt(createdAt time.Time) {
	bundledVariant.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (bundledVariant *BundledVariant) UpdatedAt() *time.Time {
	return bundledVariant.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (bundledVariant *BundledVariant) SetUpdatedAt(updatedAt *time.Time) {
	bundledVariant.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (bundledVariant *BundledVariant) CreatedByFirstName() *string {
	return bundledVariant.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (bundledVariant *BundledVariant) SetCreatedByFirstName(createdByFirstName *string) {
	bundledVariant.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (bundledVariant *BundledVariant) CreatedBySurname() *string {
	return bundledVariant.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (bundledVariant *BundledVariant) SetCreatedBySurname(createdBySurname *string) {
	bundledVariant.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (bundledVariant *BundledVariant) UpdatedByFirstName() *string {
	return bundledVariant.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (bundledVariant *BundledVariant) SetUpdatedByFirstName(updatedByFirstName *string) {
	bundledVariant.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (bundledVariant *BundledVariant) UpdatedBySurname() *string {
	return bundledVariant.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (bundledVariant *BundledVariant) SetUpdatedBySurname(updatedBySurname *string) {
	bundledVariant.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (bundledVariant *BundledVariant) IsUpdated() bool {
	return bundledVariant.updatedByID != nil
}

// BundledID returns bundledID.
func (bundledVariant *BundledVariant) BundledID() string {
	return bundledVariant.bundledID
}

// SetBundledID sets the bundledID.
func (bundledVariant *BundledVariant) SetBundledID(bundledID string) {
	bundledVariant.bundledID = bundledID
}

// VariantID returns variantID.
func (bundledVariant *BundledVariant) VariantID() string {
	return bundledVariant.variantID
}

// SetVariantID sets the variantID.
func (bundledVariant *BundledVariant) SetVariantID(variantID string) {
	bundledVariant.variantID = variantID
}

// Quantity returns quantity.
func (bundledVariant *BundledVariant) Quantity() uint {
	return bundledVariant.quantity
}

// SetQuantity sets the quantity.
func (bundledVariant *BundledVariant) SetQuantity(quantity uint) {
	bundledVariant.quantity = quantity
}

func newBundledVariant() *BundledVariant {
	return &BundledVariant{}
}

// New returns a new instance of BundledVariantEntity.
func NewBundledVariantEntity() BundledVariantEntity {
	return newBundledVariant()
}

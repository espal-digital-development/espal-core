// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ VariantEntity = &Variant{}

type VariantEntity interface {
	database.Model
	ModelID() string
	SetModelID(modelID string)
	Active() bool
	SetActive(active bool)
	Key() *string
	SetKey(key *string)
	Sorting() uint
	SetSorting(sorting uint)
	TaxGroupID() string
	SetTaxGroupID(taxGroupID string)
	NameRepresentationID() *string
	SetNameRepresentationID(nameRepresentationID *string)
	DescriptionRepresentationID() *string
	SetDescriptionRepresentationID(descriptionRepresentationID *string)
	ImageRepresentationID() *string
	SetImageRepresentationID(imageRepresentationID *string)
}

// ID returns id.
func (variant *Variant) ID() string {
	return variant.id
}

// CreatedByID returns createdByID.
func (variant *Variant) CreatedByID() string {
	return variant.createdByID
}

// SetCreatedByID sets the createdByID.
func (variant *Variant) SetCreatedByID(createdByID string) {
	variant.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (variant *Variant) UpdatedByID() *string {
	return variant.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (variant *Variant) SetUpdatedByID(updatedByID *string) {
	variant.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (variant *Variant) CreatedAt() time.Time {
	return variant.createdAt
}

// SetCreatedAt sets the createdAt.
func (variant *Variant) SetCreatedAt(createdAt time.Time) {
	variant.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (variant *Variant) UpdatedAt() *time.Time {
	return variant.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (variant *Variant) SetUpdatedAt(updatedAt *time.Time) {
	variant.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (variant *Variant) CreatedByFirstName() *string {
	return variant.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (variant *Variant) SetCreatedByFirstName(createdByFirstName *string) {
	variant.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (variant *Variant) CreatedBySurname() *string {
	return variant.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (variant *Variant) SetCreatedBySurname(createdBySurname *string) {
	variant.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (variant *Variant) UpdatedByFirstName() *string {
	return variant.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (variant *Variant) SetUpdatedByFirstName(updatedByFirstName *string) {
	variant.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (variant *Variant) UpdatedBySurname() *string {
	return variant.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (variant *Variant) SetUpdatedBySurname(updatedBySurname *string) {
	variant.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (variant *Variant) IsUpdated() bool {
	return variant.updatedByID != nil
}

// ModelID returns modelID.
func (variant *Variant) ModelID() string {
	return variant.modelID
}

// SetModelID sets the modelID.
func (variant *Variant) SetModelID(modelID string) {
	variant.modelID = modelID
}

// Active returns active.
func (variant *Variant) Active() bool {
	return variant.active
}

// SetActive sets the active.
func (variant *Variant) SetActive(active bool) {
	variant.active = active
}

// Key returns key.
func (variant *Variant) Key() *string {
	return variant.key
}

// SetKey sets the key.
func (variant *Variant) SetKey(key *string) {
	variant.key = key
}

// Sorting returns sorting.
func (variant *Variant) Sorting() uint {
	return variant.sorting
}

// SetSorting sets the sorting.
func (variant *Variant) SetSorting(sorting uint) {
	variant.sorting = sorting
}

// TaxGroupID returns taxGroupID.
func (variant *Variant) TaxGroupID() string {
	return variant.taxGroupID
}

// SetTaxGroupID sets the taxGroupID.
func (variant *Variant) SetTaxGroupID(taxGroupID string) {
	variant.taxGroupID = taxGroupID
}

// NameRepresentationID returns nameRepresentationID.
func (variant *Variant) NameRepresentationID() *string {
	return variant.nameRepresentationID
}

// SetNameRepresentationID sets the nameRepresentationID.
func (variant *Variant) SetNameRepresentationID(nameRepresentationID *string) {
	variant.nameRepresentationID = nameRepresentationID
}

// DescriptionRepresentationID returns descriptionRepresentationID.
func (variant *Variant) DescriptionRepresentationID() *string {
	return variant.descriptionRepresentationID
}

// SetDescriptionRepresentationID sets the descriptionRepresentationID.
func (variant *Variant) SetDescriptionRepresentationID(descriptionRepresentationID *string) {
	variant.descriptionRepresentationID = descriptionRepresentationID
}

// ImageRepresentationID returns imageRepresentationID.
func (variant *Variant) ImageRepresentationID() *string {
	return variant.imageRepresentationID
}

// SetImageRepresentationID sets the imageRepresentationID.
func (variant *Variant) SetImageRepresentationID(imageRepresentationID *string) {
	variant.imageRepresentationID = imageRepresentationID
}

func newVariant() *Variant {
	return &Variant{}
}

// New returns a new instance of VariantEntity.
func NewVariantEntity() VariantEntity {
	return newVariant()
}

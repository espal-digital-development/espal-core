// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestVariantReviewTable(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	if variantReview.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestVariantReviewTableAlias(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	if variantReview.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestVariantReviewIsUpdated(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	variantReview.IsUpdated()
}

func TestVariantReviewID(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	variantReview.ID()
}

func TestVariantReviewCreatedByID(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetCreatedByID(testValue)
	if testValue != variantReview.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewUpdatedByID(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetUpdatedByID(&testValue)
	if &testValue != variantReview.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewCreatedAt(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := time.Now()
	variantReview.SetCreatedAt(testValue)
	if testValue != variantReview.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewUpdatedAt(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := time.Now()
	variantReview.SetUpdatedAt(&testValue)
	if &testValue != variantReview.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewCreatedByFirstName(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetCreatedByFirstName(&testValue)
	if &testValue != variantReview.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewCreatedBySurname(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetCreatedBySurname(&testValue)
	if &testValue != variantReview.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewUpdatedByFirstName(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetUpdatedByFirstName(&testValue)
	if &testValue != variantReview.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewUpdatedBySurname(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetUpdatedBySurname(&testValue)
	if &testValue != variantReview.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewReviewedByID(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetReviewedByID(&testValue)
	if &testValue != variantReview.ReviewedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewReviewedOnDate(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := time.Now()
	variantReview.SetReviewedOnDate(&testValue)
	if &testValue != variantReview.ReviewedOnDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewReviewNotes(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetReviewNotes(&testValue)
	if &testValue != variantReview.ReviewNotes() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewApproved(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := true
	variantReview.SetApproved(&testValue)
	if &testValue != variantReview.Approved() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewRating(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := float32(3.14)
	variantReview.SetRating(testValue)
	if testValue != variantReview.Rating() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewTitle(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetTitle(testValue)
	if testValue != variantReview.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewDescription(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetDescription(testValue)
	if testValue != variantReview.Description() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantReviewVariantID(t *testing.T) {
	variantReview := product.NewVariantReviewEntity()
	testValue := "testValue"
	variantReview.SetVariantID(testValue)
	if testValue != variantReview.VariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

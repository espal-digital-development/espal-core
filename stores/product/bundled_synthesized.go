// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ BundledEntity = &Bundled{}

type BundledEntity interface {
	database.Model
	Active() bool
	SetActive(active bool)
	Sorting() uint
	SetSorting(sorting uint)
	Key() *string
	SetKey(key *string)
	VariantsCanBeSoldSeperately() bool
	SetVariantsCanBeSoldSeperately(variantsCanBeSoldSeperately bool)
	TaxGroupID() string
	SetTaxGroupID(taxGroupID string)
	NameRepresentationID() *string
	SetNameRepresentationID(nameRepresentationID *string)
	DescriptionRepresentationID() *string
	SetDescriptionRepresentationID(descriptionRepresentationID *string)
	ImageRepresentationID() *string
	SetImageRepresentationID(imageRepresentationID *string)
}

// ID returns id.
func (bundled *Bundled) ID() string {
	return bundled.id
}

// CreatedByID returns createdByID.
func (bundled *Bundled) CreatedByID() string {
	return bundled.createdByID
}

// SetCreatedByID sets the createdByID.
func (bundled *Bundled) SetCreatedByID(createdByID string) {
	bundled.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (bundled *Bundled) UpdatedByID() *string {
	return bundled.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (bundled *Bundled) SetUpdatedByID(updatedByID *string) {
	bundled.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (bundled *Bundled) CreatedAt() time.Time {
	return bundled.createdAt
}

// SetCreatedAt sets the createdAt.
func (bundled *Bundled) SetCreatedAt(createdAt time.Time) {
	bundled.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (bundled *Bundled) UpdatedAt() *time.Time {
	return bundled.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (bundled *Bundled) SetUpdatedAt(updatedAt *time.Time) {
	bundled.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (bundled *Bundled) CreatedByFirstName() *string {
	return bundled.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (bundled *Bundled) SetCreatedByFirstName(createdByFirstName *string) {
	bundled.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (bundled *Bundled) CreatedBySurname() *string {
	return bundled.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (bundled *Bundled) SetCreatedBySurname(createdBySurname *string) {
	bundled.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (bundled *Bundled) UpdatedByFirstName() *string {
	return bundled.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (bundled *Bundled) SetUpdatedByFirstName(updatedByFirstName *string) {
	bundled.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (bundled *Bundled) UpdatedBySurname() *string {
	return bundled.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (bundled *Bundled) SetUpdatedBySurname(updatedBySurname *string) {
	bundled.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (bundled *Bundled) IsUpdated() bool {
	return bundled.updatedByID != nil
}

// Active returns active.
func (bundled *Bundled) Active() bool {
	return bundled.active
}

// SetActive sets the active.
func (bundled *Bundled) SetActive(active bool) {
	bundled.active = active
}

// Sorting returns sorting.
func (bundled *Bundled) Sorting() uint {
	return bundled.sorting
}

// SetSorting sets the sorting.
func (bundled *Bundled) SetSorting(sorting uint) {
	bundled.sorting = sorting
}

// Key returns key.
func (bundled *Bundled) Key() *string {
	return bundled.key
}

// SetKey sets the key.
func (bundled *Bundled) SetKey(key *string) {
	bundled.key = key
}

// VariantsCanBeSoldSeperately returns variantsCanBeSoldSeperately.
func (bundled *Bundled) VariantsCanBeSoldSeperately() bool {
	return bundled.variantsCanBeSoldSeperately
}

// SetVariantsCanBeSoldSeperately sets the variantsCanBeSoldSeperately.
func (bundled *Bundled) SetVariantsCanBeSoldSeperately(variantsCanBeSoldSeperately bool) {
	bundled.variantsCanBeSoldSeperately = variantsCanBeSoldSeperately
}

// TaxGroupID returns taxGroupID.
func (bundled *Bundled) TaxGroupID() string {
	return bundled.taxGroupID
}

// SetTaxGroupID sets the taxGroupID.
func (bundled *Bundled) SetTaxGroupID(taxGroupID string) {
	bundled.taxGroupID = taxGroupID
}

// NameRepresentationID returns nameRepresentationID.
func (bundled *Bundled) NameRepresentationID() *string {
	return bundled.nameRepresentationID
}

// SetNameRepresentationID sets the nameRepresentationID.
func (bundled *Bundled) SetNameRepresentationID(nameRepresentationID *string) {
	bundled.nameRepresentationID = nameRepresentationID
}

// DescriptionRepresentationID returns descriptionRepresentationID.
func (bundled *Bundled) DescriptionRepresentationID() *string {
	return bundled.descriptionRepresentationID
}

// SetDescriptionRepresentationID sets the descriptionRepresentationID.
func (bundled *Bundled) SetDescriptionRepresentationID(descriptionRepresentationID *string) {
	bundled.descriptionRepresentationID = descriptionRepresentationID
}

// ImageRepresentationID returns imageRepresentationID.
func (bundled *Bundled) ImageRepresentationID() *string {
	return bundled.imageRepresentationID
}

// SetImageRepresentationID sets the imageRepresentationID.
func (bundled *Bundled) SetImageRepresentationID(imageRepresentationID *string) {
	bundled.imageRepresentationID = imageRepresentationID
}

func newBundled() *Bundled {
	return &Bundled{}
}

// New returns a new instance of BundledEntity.
func NewBundledEntity() BundledEntity {
	return newBundled()
}

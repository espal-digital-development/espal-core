// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestBundledReviewTable(t *testing.T) {
	b := product.NewBundledReviewEntity()
	if b.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBundledReviewTableAlias(t *testing.T) {
	b := product.NewBundledReviewEntity()
	if b.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBundledReviewIsUpdated(t *testing.T) {
	b := product.NewBundledReviewEntity()
	b.IsUpdated()
}

func TestBundledReviewID(t *testing.T) {
	b := product.NewBundledReviewEntity()
	b.ID()
}

func TestBundledReviewCreatedByID(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetCreatedByID(testValue)
	if testValue != b.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedByID(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetUpdatedByID(&testValue)
	if &testValue != b.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewCreatedAt(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := time.Now()
	b.SetCreatedAt(testValue)
	if testValue != b.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedAt(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := time.Now()
	b.SetUpdatedAt(&testValue)
	if &testValue != b.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewCreatedByFirstName(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetCreatedByFirstName(&testValue)
	if &testValue != b.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewCreatedBySurname(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetCreatedBySurname(&testValue)
	if &testValue != b.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedByFirstName(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetUpdatedByFirstName(&testValue)
	if &testValue != b.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedBySurname(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetUpdatedBySurname(&testValue)
	if &testValue != b.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewReviewedByID(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetReviewedByID(&testValue)
	if &testValue != b.ReviewedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewReviewedOnDate(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := time.Now()
	b.SetReviewedOnDate(&testValue)
	if &testValue != b.ReviewedOnDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewReviewNotes(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetReviewNotes(&testValue)
	if &testValue != b.ReviewNotes() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewApproved(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := true
	b.SetApproved(&testValue)
	if &testValue != b.Approved() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewRating(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := float32(3.14)
	b.SetRating(testValue)
	if testValue != b.Rating() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewTitle(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetTitle(testValue)
	if testValue != b.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewDescription(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetDescription(testValue)
	if testValue != b.Description() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewBundledID(t *testing.T) {
	b := product.NewBundledReviewEntity()
	testValue := "testValue"
	b.SetBundledID(testValue)
	if testValue != b.BundledID() {
		t.Fatal("Getter did not return the Set value")
	}
}

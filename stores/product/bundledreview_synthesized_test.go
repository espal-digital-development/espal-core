// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestBundledReviewTable(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	if bundledReview.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBundledReviewTableAlias(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	if bundledReview.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBundledReviewIsUpdated(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	bundledReview.IsUpdated()
}

func TestBundledReviewID(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	bundledReview.ID()
}

func TestBundledReviewCreatedByID(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetCreatedByID(testValue)
	if testValue != bundledReview.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedByID(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetUpdatedByID(&testValue)
	if &testValue != bundledReview.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewCreatedAt(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := time.Now()
	bundledReview.SetCreatedAt(testValue)
	if testValue != bundledReview.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedAt(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := time.Now()
	bundledReview.SetUpdatedAt(&testValue)
	if &testValue != bundledReview.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewCreatedByFirstName(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetCreatedByFirstName(&testValue)
	if &testValue != bundledReview.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewCreatedBySurname(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetCreatedBySurname(&testValue)
	if &testValue != bundledReview.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedByFirstName(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetUpdatedByFirstName(&testValue)
	if &testValue != bundledReview.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewUpdatedBySurname(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetUpdatedBySurname(&testValue)
	if &testValue != bundledReview.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewReviewedByID(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetReviewedByID(&testValue)
	if &testValue != bundledReview.ReviewedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewReviewedOnDate(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := time.Now()
	bundledReview.SetReviewedOnDate(&testValue)
	if &testValue != bundledReview.ReviewedOnDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewReviewNotes(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetReviewNotes(&testValue)
	if &testValue != bundledReview.ReviewNotes() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewApproved(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := true
	bundledReview.SetApproved(&testValue)
	if &testValue != bundledReview.Approved() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewRating(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := float32(3.14)
	bundledReview.SetRating(testValue)
	if testValue != bundledReview.Rating() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewTitle(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetTitle(testValue)
	if testValue != bundledReview.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewDescription(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetDescription(testValue)
	if testValue != bundledReview.Description() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledReviewBundledID(t *testing.T) {
	bundledReview := product.NewBundledReviewEntity()
	testValue := "testValue"
	bundledReview.SetBundledID(testValue)
	if testValue != bundledReview.BundledID() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestBundledPropertyTable(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	if b.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBundledPropertyTableAlias(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	if b.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBundledPropertyIsUpdated(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	b.IsUpdated()
}

func TestBundledPropertyID(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	b.ID()
}

func TestBundledPropertyCreatedByID(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetCreatedByID(testValue)
	if testValue != b.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyUpdatedByID(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetUpdatedByID(&testValue)
	if &testValue != b.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyCreatedAt(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := time.Now()
	b.SetCreatedAt(testValue)
	if testValue != b.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyUpdatedAt(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := time.Now()
	b.SetUpdatedAt(&testValue)
	if &testValue != b.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyCreatedByFirstName(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetCreatedByFirstName(&testValue)
	if &testValue != b.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyCreatedBySurname(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetCreatedBySurname(&testValue)
	if &testValue != b.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyUpdatedByFirstName(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetUpdatedByFirstName(&testValue)
	if &testValue != b.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyUpdatedBySurname(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetUpdatedBySurname(&testValue)
	if &testValue != b.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertySorting(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := uint(1e9)
	b.SetSorting(testValue)
	if testValue != b.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyKey(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetKey(&testValue)
	if &testValue != b.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyBundledProductID(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetBundledProductID(testValue)
	if testValue != b.BundledProductID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledPropertyPropertyID(t *testing.T) {
	b := product.NewBundledPropertyEntity()
	testValue := "testValue"
	b.SetPropertyID(testValue)
	if testValue != b.PropertyID() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestModelTable(t *testing.T) {
	m := product.NewModelEntity()
	if m.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestModelTableAlias(t *testing.T) {
	m := product.NewModelEntity()
	if m.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestModelIsUpdated(t *testing.T) {
	m := product.NewModelEntity()
	m.IsUpdated()
}

func TestModelID(t *testing.T) {
	m := product.NewModelEntity()
	m.ID()
}

func TestModelCreatedByID(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetCreatedByID(testValue)
	if testValue != m.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelUpdatedByID(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetUpdatedByID(&testValue)
	if &testValue != m.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelCreatedAt(t *testing.T) {
	m := product.NewModelEntity()
	testValue := time.Now()
	m.SetCreatedAt(testValue)
	if testValue != m.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelUpdatedAt(t *testing.T) {
	m := product.NewModelEntity()
	testValue := time.Now()
	m.SetUpdatedAt(&testValue)
	if &testValue != m.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelCreatedByFirstName(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetCreatedByFirstName(&testValue)
	if &testValue != m.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelCreatedBySurname(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetCreatedBySurname(&testValue)
	if &testValue != m.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelUpdatedByFirstName(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetUpdatedByFirstName(&testValue)
	if &testValue != m.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelUpdatedBySurname(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetUpdatedBySurname(&testValue)
	if &testValue != m.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelActive(t *testing.T) {
	m := product.NewModelEntity()
	testValue := true
	m.SetActive(testValue)
	if testValue != m.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelSorting(t *testing.T) {
	m := product.NewModelEntity()
	testValue := uint(1e9)
	m.SetSorting(testValue)
	if testValue != m.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelKey(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetKey(&testValue)
	if &testValue != m.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelTaxGroupID(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetTaxGroupID(testValue)
	if testValue != m.TaxGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelNameRepresentationID(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetNameRepresentationID(&testValue)
	if &testValue != m.NameRepresentationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDescriptionRepresentationID(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetDescriptionRepresentationID(&testValue)
	if &testValue != m.DescriptionRepresentationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelImageRepresentationID(t *testing.T) {
	m := product.NewModelEntity()
	testValue := "testValue"
	m.SetImageRepresentationID(&testValue)
	if &testValue != m.ImageRepresentationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

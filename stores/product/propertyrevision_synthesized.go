// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ PropertyRevisionEntity = &PropertyRevision{}

type PropertyRevisionEntity interface {
	database.Model
	DomainID() *string
	SetDomainID(domainID *string)
	Language() *uint16
	SetLanguage(language *uint16)
	BundledID() *string
	SetBundledID(bundledID *string)
	ModelID() *string
	SetModelID(modelID *string)
	VariantID() *string
	SetVariantID(variantID *string)
	PropertyID() string
	SetPropertyID(propertyID string)
	PropertyOptionID() *string
	SetPropertyOptionID(propertyOptionID *string)
	RevertedFromID() *string
	SetRevertedFromID(revertedFromID *string)
	Revision() uint
	SetRevision(revision uint)
	Value() *string
	SetValue(value *string)
}

// ID returns id.
func (p *PropertyRevision) ID() string {
	return p.id
}

// CreatedByID returns createdByID.
func (p *PropertyRevision) CreatedByID() string {
	return p.createdByID
}

// SetCreatedByID sets the createdByID.
func (p *PropertyRevision) SetCreatedByID(createdByID string) {
	p.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (p *PropertyRevision) UpdatedByID() *string {
	return p.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (p *PropertyRevision) SetUpdatedByID(updatedByID *string) {
	p.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (p *PropertyRevision) CreatedAt() time.Time {
	return p.createdAt
}

// SetCreatedAt sets the createdAt.
func (p *PropertyRevision) SetCreatedAt(createdAt time.Time) {
	p.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (p *PropertyRevision) UpdatedAt() *time.Time {
	return p.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (p *PropertyRevision) SetUpdatedAt(updatedAt *time.Time) {
	p.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (p *PropertyRevision) CreatedByFirstName() *string {
	return p.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (p *PropertyRevision) SetCreatedByFirstName(createdByFirstName *string) {
	p.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (p *PropertyRevision) CreatedBySurname() *string {
	return p.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (p *PropertyRevision) SetCreatedBySurname(createdBySurname *string) {
	p.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (p *PropertyRevision) UpdatedByFirstName() *string {
	return p.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (p *PropertyRevision) SetUpdatedByFirstName(updatedByFirstName *string) {
	p.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (p *PropertyRevision) UpdatedBySurname() *string {
	return p.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (p *PropertyRevision) SetUpdatedBySurname(updatedBySurname *string) {
	p.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (p *PropertyRevision) IsUpdated() bool {
	return p.updatedByID != nil
}

// DomainID returns domainID.
func (p *PropertyRevision) DomainID() *string {
	return p.domainID
}

// SetDomainID sets the domainID.
func (p *PropertyRevision) SetDomainID(domainID *string) {
	p.domainID = domainID
}

// Language returns language.
func (p *PropertyRevision) Language() *uint16 {
	return p.language
}

// SetLanguage sets the language.
func (p *PropertyRevision) SetLanguage(language *uint16) {
	p.language = language
}

// BundledID returns bundledID.
func (p *PropertyRevision) BundledID() *string {
	return p.bundledID
}

// SetBundledID sets the bundledID.
func (p *PropertyRevision) SetBundledID(bundledID *string) {
	p.bundledID = bundledID
}

// ModelID returns modelID.
func (p *PropertyRevision) ModelID() *string {
	return p.modelID
}

// SetModelID sets the modelID.
func (p *PropertyRevision) SetModelID(modelID *string) {
	p.modelID = modelID
}

// VariantID returns variantID.
func (p *PropertyRevision) VariantID() *string {
	return p.variantID
}

// SetVariantID sets the variantID.
func (p *PropertyRevision) SetVariantID(variantID *string) {
	p.variantID = variantID
}

// PropertyID returns propertyID.
func (p *PropertyRevision) PropertyID() string {
	return p.propertyID
}

// SetPropertyID sets the propertyID.
func (p *PropertyRevision) SetPropertyID(propertyID string) {
	p.propertyID = propertyID
}

// PropertyOptionID returns propertyOptionID.
func (p *PropertyRevision) PropertyOptionID() *string {
	return p.propertyOptionID
}

// SetPropertyOptionID sets the propertyOptionID.
func (p *PropertyRevision) SetPropertyOptionID(propertyOptionID *string) {
	p.propertyOptionID = propertyOptionID
}

// RevertedFromID returns revertedFromID.
func (p *PropertyRevision) RevertedFromID() *string {
	return p.revertedFromID
}

// SetRevertedFromID sets the revertedFromID.
func (p *PropertyRevision) SetRevertedFromID(revertedFromID *string) {
	p.revertedFromID = revertedFromID
}

// Revision returns revision.
func (p *PropertyRevision) Revision() uint {
	return p.revision
}

// SetRevision sets the revision.
func (p *PropertyRevision) SetRevision(revision uint) {
	p.revision = revision
}

// Value returns value.
func (p *PropertyRevision) Value() *string {
	return p.value
}

// SetValue sets the value.
func (p *PropertyRevision) SetValue(value *string) {
	p.value = value
}

func newPropertyRevision() *PropertyRevision {
	return &PropertyRevision{}
}

// New returns a new instance of PropertyRevisionEntity.
func NewPropertyRevisionEntity() PropertyRevisionEntity {
	return newPropertyRevision()
}

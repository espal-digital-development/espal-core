// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestBundledTable(t *testing.T) {
	b := product.NewBundledEntity()
	if b.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBundledTableAlias(t *testing.T) {
	b := product.NewBundledEntity()
	if b.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBundledIsUpdated(t *testing.T) {
	b := product.NewBundledEntity()
	b.IsUpdated()
}

func TestBundledID(t *testing.T) {
	b := product.NewBundledEntity()
	b.ID()
}

func TestBundledCreatedByID(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetCreatedByID(testValue)
	if testValue != b.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledUpdatedByID(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetUpdatedByID(&testValue)
	if &testValue != b.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledCreatedAt(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := time.Now()
	b.SetCreatedAt(testValue)
	if testValue != b.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledUpdatedAt(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := time.Now()
	b.SetUpdatedAt(&testValue)
	if &testValue != b.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledCreatedByFirstName(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetCreatedByFirstName(&testValue)
	if &testValue != b.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledCreatedBySurname(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetCreatedBySurname(&testValue)
	if &testValue != b.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledUpdatedByFirstName(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetUpdatedByFirstName(&testValue)
	if &testValue != b.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledUpdatedBySurname(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetUpdatedBySurname(&testValue)
	if &testValue != b.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledActive(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := true
	b.SetActive(testValue)
	if testValue != b.Active() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledSorting(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := uint(1e9)
	b.SetSorting(testValue)
	if testValue != b.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledKey(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetKey(&testValue)
	if &testValue != b.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantsCanBeSoldSeperately(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := true
	b.SetVariantsCanBeSoldSeperately(testValue)
	if testValue != b.VariantsCanBeSoldSeperately() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledTaxGroupID(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetTaxGroupID(testValue)
	if testValue != b.TaxGroupID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledNameRepresentationID(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetNameRepresentationID(&testValue)
	if &testValue != b.NameRepresentationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledDescriptionRepresentationID(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetDescriptionRepresentationID(&testValue)
	if &testValue != b.DescriptionRepresentationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledImageRepresentationID(t *testing.T) {
	b := product.NewBundledEntity()
	testValue := "testValue"
	b.SetImageRepresentationID(&testValue)
	if &testValue != b.ImageRepresentationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

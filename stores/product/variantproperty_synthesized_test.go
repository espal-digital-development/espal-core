// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestVariantPropertyTable(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	if v.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestVariantPropertyTableAlias(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	if v.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestVariantPropertyIsUpdated(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	v.IsUpdated()
}

func TestVariantPropertyID(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	v.ID()
}

func TestVariantPropertyCreatedByID(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetCreatedByID(testValue)
	if testValue != v.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyUpdatedByID(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetUpdatedByID(&testValue)
	if &testValue != v.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyCreatedAt(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := time.Now()
	v.SetCreatedAt(testValue)
	if testValue != v.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyUpdatedAt(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := time.Now()
	v.SetUpdatedAt(&testValue)
	if &testValue != v.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyCreatedByFirstName(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetCreatedByFirstName(&testValue)
	if &testValue != v.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyCreatedBySurname(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetCreatedBySurname(&testValue)
	if &testValue != v.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyUpdatedByFirstName(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetUpdatedByFirstName(&testValue)
	if &testValue != v.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyUpdatedBySurname(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetUpdatedBySurname(&testValue)
	if &testValue != v.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyVariantID(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetVariantID(testValue)
	if testValue != v.VariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyPropertyID(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetPropertyID(testValue)
	if testValue != v.PropertyID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertySorting(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := uint(1e9)
	v.SetSorting(testValue)
	if testValue != v.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestVariantPropertyKey(t *testing.T) {
	v := product.NewVariantPropertyEntity()
	testValue := "testValue"
	v.SetKey(&testValue)
	if &testValue != v.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestModelDimensionTable(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	if modelDimension.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestModelDimensionTableAlias(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	if modelDimension.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestModelDimensionIsUpdated(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	modelDimension.IsUpdated()
}

func TestModelDimensionID(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	modelDimension.ID()
}

func TestModelDimensionCreatedByID(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetCreatedByID(testValue)
	if testValue != modelDimension.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionUpdatedByID(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetUpdatedByID(&testValue)
	if &testValue != modelDimension.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionCreatedAt(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := time.Now()
	modelDimension.SetCreatedAt(testValue)
	if testValue != modelDimension.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionUpdatedAt(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := time.Now()
	modelDimension.SetUpdatedAt(&testValue)
	if &testValue != modelDimension.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionCreatedByFirstName(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetCreatedByFirstName(&testValue)
	if &testValue != modelDimension.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionCreatedBySurname(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetCreatedBySurname(&testValue)
	if &testValue != modelDimension.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionUpdatedByFirstName(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetUpdatedByFirstName(&testValue)
	if &testValue != modelDimension.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionUpdatedBySurname(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetUpdatedBySurname(&testValue)
	if &testValue != modelDimension.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionSorting(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := uint(1e9)
	modelDimension.SetSorting(testValue)
	if testValue != modelDimension.Sorting() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionKey(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetKey(&testValue)
	if &testValue != modelDimension.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionModelID(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetModelID(testValue)
	if testValue != modelDimension.ModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelDimensionPropertyID(t *testing.T) {
	modelDimension := product.NewModelDimensionEntity()
	testValue := "testValue"
	modelDimension.SetPropertyID(testValue)
	if testValue != modelDimension.PropertyID() {
		t.Fatal("Getter did not return the Set value")
	}
}

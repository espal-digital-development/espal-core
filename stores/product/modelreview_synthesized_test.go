// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestModelReviewTable(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	if modelReview.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestModelReviewTableAlias(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	if modelReview.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestModelReviewIsUpdated(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	modelReview.IsUpdated()
}

func TestModelReviewID(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	modelReview.ID()
}

func TestModelReviewCreatedByID(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetCreatedByID(testValue)
	if testValue != modelReview.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewUpdatedByID(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetUpdatedByID(&testValue)
	if &testValue != modelReview.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewCreatedAt(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := time.Now()
	modelReview.SetCreatedAt(testValue)
	if testValue != modelReview.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewUpdatedAt(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := time.Now()
	modelReview.SetUpdatedAt(&testValue)
	if &testValue != modelReview.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewCreatedByFirstName(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetCreatedByFirstName(&testValue)
	if &testValue != modelReview.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewCreatedBySurname(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetCreatedBySurname(&testValue)
	if &testValue != modelReview.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewUpdatedByFirstName(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetUpdatedByFirstName(&testValue)
	if &testValue != modelReview.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewUpdatedBySurname(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetUpdatedBySurname(&testValue)
	if &testValue != modelReview.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewReviewedByID(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetReviewedByID(&testValue)
	if &testValue != modelReview.ReviewedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewReviewedOnDate(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := time.Now()
	modelReview.SetReviewedOnDate(&testValue)
	if &testValue != modelReview.ReviewedOnDate() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewReviewNotes(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetReviewNotes(&testValue)
	if &testValue != modelReview.ReviewNotes() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewApproved(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := true
	modelReview.SetApproved(&testValue)
	if &testValue != modelReview.Approved() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewRating(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := float32(3.14)
	modelReview.SetRating(testValue)
	if testValue != modelReview.Rating() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewTitle(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetTitle(testValue)
	if testValue != modelReview.Title() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewDescription(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetDescription(testValue)
	if testValue != modelReview.Description() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestModelReviewModelID(t *testing.T) {
	modelReview := product.NewModelReviewEntity()
	testValue := "testValue"
	modelReview.SetModelID(testValue)
	if testValue != modelReview.ModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

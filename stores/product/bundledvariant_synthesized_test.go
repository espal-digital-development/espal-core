// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestBundledVariantTable(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	if bundledVariant.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestBundledVariantTableAlias(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	if bundledVariant.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestBundledVariantIsUpdated(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	bundledVariant.IsUpdated()
}

func TestBundledVariantID(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	bundledVariant.ID()
}

func TestBundledVariantCreatedByID(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetCreatedByID(testValue)
	if testValue != bundledVariant.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantUpdatedByID(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetUpdatedByID(&testValue)
	if &testValue != bundledVariant.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantCreatedAt(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := time.Now()
	bundledVariant.SetCreatedAt(testValue)
	if testValue != bundledVariant.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantUpdatedAt(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := time.Now()
	bundledVariant.SetUpdatedAt(&testValue)
	if &testValue != bundledVariant.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantCreatedByFirstName(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetCreatedByFirstName(&testValue)
	if &testValue != bundledVariant.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantCreatedBySurname(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetCreatedBySurname(&testValue)
	if &testValue != bundledVariant.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantUpdatedByFirstName(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetUpdatedByFirstName(&testValue)
	if &testValue != bundledVariant.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantUpdatedBySurname(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetUpdatedBySurname(&testValue)
	if &testValue != bundledVariant.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantBundledID(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetBundledID(testValue)
	if testValue != bundledVariant.BundledID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantVariantID(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := "testValue"
	bundledVariant.SetVariantID(testValue)
	if testValue != bundledVariant.VariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestBundledVariantQuantity(t *testing.T) {
	bundledVariant := product.NewBundledVariantEntity()
	testValue := uint(1e9)
	bundledVariant.SetQuantity(testValue)
	if testValue != bundledVariant.Quantity() {
		t.Fatal("Getter did not return the Set value")
	}
}

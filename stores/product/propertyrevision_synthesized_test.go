// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestPropertyRevisionTable(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	if propertyRevision.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPropertyRevisionTableAlias(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	if propertyRevision.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPropertyRevisionIsUpdated(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	propertyRevision.IsUpdated()
}

func TestPropertyRevisionID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	propertyRevision.ID()
}

func TestPropertyRevisionCreatedByID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetCreatedByID(testValue)
	if testValue != propertyRevision.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedByID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetUpdatedByID(&testValue)
	if &testValue != propertyRevision.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionCreatedAt(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := time.Now()
	propertyRevision.SetCreatedAt(testValue)
	if testValue != propertyRevision.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedAt(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := time.Now()
	propertyRevision.SetUpdatedAt(&testValue)
	if &testValue != propertyRevision.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionCreatedByFirstName(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetCreatedByFirstName(&testValue)
	if &testValue != propertyRevision.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionCreatedBySurname(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetCreatedBySurname(&testValue)
	if &testValue != propertyRevision.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedByFirstName(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetUpdatedByFirstName(&testValue)
	if &testValue != propertyRevision.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedBySurname(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetUpdatedBySurname(&testValue)
	if &testValue != propertyRevision.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionDomainID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetDomainID(&testValue)
	if &testValue != propertyRevision.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionLanguage(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := uint16(65000)
	propertyRevision.SetLanguage(&testValue)
	if &testValue != propertyRevision.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionBundledID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetBundledID(&testValue)
	if &testValue != propertyRevision.BundledID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionModelID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetModelID(&testValue)
	if &testValue != propertyRevision.ModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionVariantID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetVariantID(&testValue)
	if &testValue != propertyRevision.VariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionPropertyID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetPropertyID(testValue)
	if testValue != propertyRevision.PropertyID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionPropertyOptionID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetPropertyOptionID(&testValue)
	if &testValue != propertyRevision.PropertyOptionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionRevertedFromID(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetRevertedFromID(&testValue)
	if &testValue != propertyRevision.RevertedFromID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionRevision(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := uint(1e9)
	propertyRevision.SetRevision(testValue)
	if testValue != propertyRevision.Revision() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionValue(t *testing.T) {
	propertyRevision := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	propertyRevision.SetValue(&testValue)
	if &testValue != propertyRevision.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package product_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/product"
)

func TestPropertyRevisionTable(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	if p.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestPropertyRevisionTableAlias(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	if p.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestPropertyRevisionIsUpdated(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	p.IsUpdated()
}

func TestPropertyRevisionID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	p.ID()
}

func TestPropertyRevisionCreatedByID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetCreatedByID(testValue)
	if testValue != p.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedByID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetUpdatedByID(&testValue)
	if &testValue != p.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionCreatedAt(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := time.Now()
	p.SetCreatedAt(testValue)
	if testValue != p.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedAt(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := time.Now()
	p.SetUpdatedAt(&testValue)
	if &testValue != p.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionCreatedByFirstName(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetCreatedByFirstName(&testValue)
	if &testValue != p.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionCreatedBySurname(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetCreatedBySurname(&testValue)
	if &testValue != p.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedByFirstName(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetUpdatedByFirstName(&testValue)
	if &testValue != p.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionUpdatedBySurname(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetUpdatedBySurname(&testValue)
	if &testValue != p.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionDomainID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetDomainID(&testValue)
	if &testValue != p.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionLanguage(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := uint16(65000)
	p.SetLanguage(&testValue)
	if &testValue != p.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionBundledID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetBundledID(&testValue)
	if &testValue != p.BundledID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionModelID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetModelID(&testValue)
	if &testValue != p.ModelID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionVariantID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetVariantID(&testValue)
	if &testValue != p.VariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionPropertyID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetPropertyID(testValue)
	if testValue != p.PropertyID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionPropertyOptionID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetPropertyOptionID(&testValue)
	if &testValue != p.PropertyOptionID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionRevertedFromID(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetRevertedFromID(&testValue)
	if &testValue != p.RevertedFromID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionRevision(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := uint(1e9)
	p.SetRevision(testValue)
	if testValue != p.Revision() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestPropertyRevisionValue(t *testing.T) {
	p := product.NewPropertyRevisionEntity()
	testValue := "testValue"
	p.SetValue(&testValue)
	if &testValue != p.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

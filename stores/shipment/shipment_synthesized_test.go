// Code generated by espal-store-synthesizer. DO NOT EDIT.
package shipment_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/shipment"
)

func TestShipmentTable(t *testing.T) {
	s := shipment.NewShipmentEntity()
	if s.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestShipmentTableAlias(t *testing.T) {
	s := shipment.NewShipmentEntity()
	if s.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestShipmentIsUpdated(t *testing.T) {
	s := shipment.NewShipmentEntity()
	s.IsUpdated()
}

func TestShipmentID(t *testing.T) {
	s := shipment.NewShipmentEntity()
	s.ID()
}

func TestShipmentCreatedByID(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetCreatedByID(testValue)
	if testValue != s.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUpdatedByID(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUpdatedByID(&testValue)
	if &testValue != s.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentCreatedAt(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := time.Now()
	s.SetCreatedAt(testValue)
	if testValue != s.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUpdatedAt(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := time.Now()
	s.SetUpdatedAt(&testValue)
	if &testValue != s.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentCreatedByFirstName(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetCreatedByFirstName(&testValue)
	if &testValue != s.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentCreatedBySurname(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetCreatedBySurname(&testValue)
	if &testValue != s.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUpdatedByFirstName(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUpdatedByFirstName(&testValue)
	if &testValue != s.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUpdatedBySurname(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUpdatedBySurname(&testValue)
	if &testValue != s.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentDomainID(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetDomainID(testValue)
	if testValue != s.DomainID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserID(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserID(testValue)
	if testValue != s.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentSaleOrderID(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetSaleOrderID(testValue)
	if testValue != s.SaleOrderID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentCode(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetCode(&testValue)
	if &testValue != s.Code() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoBusiness(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := true
	s.SetUserInfoBusiness(testValue)
	if testValue != s.UserInfoBusiness() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoBusinessCocNumber(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoBusinessCocNumber(&testValue)
	if &testValue != s.UserInfoBusinessCocNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoFirstName(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoFirstName(testValue)
	if testValue != s.UserInfoFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoSurname(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoSurname(testValue)
	if testValue != s.UserInfoSurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoStreet(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoStreet(testValue)
	if testValue != s.UserInfoStreet() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoStreetLine2(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoStreetLine2(&testValue)
	if &testValue != s.UserInfoStreetLine2() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoNumber(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoNumber(testValue)
	if testValue != s.UserInfoNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoNumberAddition(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoNumberAddition(&testValue)
	if &testValue != s.UserInfoNumberAddition() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoZipCode(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoZipCode(testValue)
	if testValue != s.UserInfoZipCode() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoCity(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoCity(testValue)
	if testValue != s.UserInfoCity() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoState(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := uint(1e9)
	s.SetUserInfoState(&testValue)
	if &testValue != s.UserInfoState() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoCountry(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := uint16(65000)
	s.SetUserInfoCountry(&testValue)
	if &testValue != s.UserInfoCountry() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoPhoneNumber(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoPhoneNumber(&testValue)
	if &testValue != s.UserInfoPhoneNumber() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentUserInfoEmail(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetUserInfoEmail(&testValue)
	if &testValue != s.UserInfoEmail() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentComments(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetComments(&testValue)
	if &testValue != s.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentSellingPartyAutograph(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetSellingPartyAutograph(&testValue)
	if &testValue != s.SellingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestShipmentBuyingPartyAutograph(t *testing.T) {
	s := shipment.NewShipmentEntity()
	testValue := "testValue"
	s.SetBuyingPartyAutograph(&testValue)
	if &testValue != s.BuyingPartyAutograph() {
		t.Fatal("Getter did not return the Set value")
	}
}

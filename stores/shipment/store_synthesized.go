// Code generated by espal-store-synthesizer. DO NOT EDIT.
package shipment

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &ShipmentsStore{}

// Store represents a data interaction object.
type Store interface {
}

func (shipmentsStore *ShipmentsStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Shipment, ok bool, err error) {
	rows, err := shipmentsStore.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Shipment, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		shipment := newShipment()
		fields := []interface{}{&shipment.id, &shipment.createdByID, &shipment.updatedByID, &shipment.createdAt, &shipment.updatedAt, &shipment.domainID, &shipment.userID, &shipment.saleOrderID, &shipment.code, &shipment.userInfoBusiness, &shipment.userInfoBusinessCocNumber, &shipment.userInfoFirstName, &shipment.userInfoSurname, &shipment.userInfoStreet, &shipment.userInfoStreetLine2, &shipment.userInfoNumber, &shipment.userInfoNumberAddition, &shipment.userInfoZipCode, &shipment.userInfoCity, &shipment.userInfoState, &shipment.userInfoCountry, &shipment.userInfoPhoneNumber, &shipment.userInfoEmail, &shipment.comments, &shipment.sellingPartyAutograph, &shipment.buyingPartyAutograph}
		if withCreators {
			fields = append(fields, &shipment.createdByFirstName, &shipment.createdBySurname, &shipment.updatedByFirstName, &shipment.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, shipment)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of ShipmentsStore.
func New(selecterDatabase database.Database) (*ShipmentsStore, error) {
	shipmentsStore := &ShipmentsStore{
		selecterDatabase: selecterDatabase,
	}
	return shipmentsStore, nil
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package shipment_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/shipment"
)

func TestCostTable(t *testing.T) {
	cost := shipment.NewCostEntity()
	if cost.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestCostTableAlias(t *testing.T) {
	cost := shipment.NewCostEntity()
	if cost.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestCostIsUpdated(t *testing.T) {
	cost := shipment.NewCostEntity()
	cost.IsUpdated()
}

func TestCostID(t *testing.T) {
	cost := shipment.NewCostEntity()
	cost.ID()
}

func TestCostCreatedByID(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := "testValue"
	cost.SetCreatedByID(testValue)
	if testValue != cost.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostUpdatedByID(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := "testValue"
	cost.SetUpdatedByID(&testValue)
	if &testValue != cost.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostCreatedAt(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := time.Now()
	cost.SetCreatedAt(testValue)
	if testValue != cost.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostUpdatedAt(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := time.Now()
	cost.SetUpdatedAt(&testValue)
	if &testValue != cost.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostCreatedByFirstName(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := "testValue"
	cost.SetCreatedByFirstName(&testValue)
	if &testValue != cost.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostCreatedBySurname(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := "testValue"
	cost.SetCreatedBySurname(&testValue)
	if &testValue != cost.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostUpdatedByFirstName(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := "testValue"
	cost.SetUpdatedByFirstName(&testValue)
	if &testValue != cost.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCostUpdatedBySurname(t *testing.T) {
	cost := shipment.NewCostEntity()
	testValue := "testValue"
	cost.SetUpdatedBySurname(&testValue)
	if &testValue != cost.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

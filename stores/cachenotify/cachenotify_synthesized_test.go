// Code generated by espal-store-synthesizer. DO NOT EDIT.
package cachenotify_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/cachenotify"
)

func TestCacheNotifyTable(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	if cacheNotify.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestCacheNotifyTableAlias(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	if cacheNotify.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestCacheNotifyIsUpdated(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	cacheNotify.IsUpdated()
}

func TestCacheNotifyID(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	cacheNotify.ID()
}

func TestCacheNotifyCreatedByID(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetCreatedByID(&testValue)
	if &testValue != cacheNotify.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyUpdatedByID(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetUpdatedByID(&testValue)
	if &testValue != cacheNotify.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyCreatedAt(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := time.Now()
	cacheNotify.SetCreatedAt(testValue)
	if testValue != cacheNotify.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyUpdatedAt(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := time.Now()
	cacheNotify.SetUpdatedAt(&testValue)
	if &testValue != cacheNotify.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyCreatedByFirstName(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetCreatedByFirstName(&testValue)
	if &testValue != cacheNotify.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyCreatedBySurname(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetCreatedBySurname(&testValue)
	if &testValue != cacheNotify.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyUpdatedByFirstName(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetUpdatedByFirstName(&testValue)
	if &testValue != cacheNotify.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyUpdatedBySurname(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetUpdatedBySurname(&testValue)
	if &testValue != cacheNotify.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyTarget(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := uint(1e9)
	cacheNotify.SetTarget(testValue)
	if testValue != cacheNotify.Target() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestCacheNotifyKey(t *testing.T) {
	cacheNotify := cachenotify.NewCacheNotifyEntity()
	testValue := "testValue"
	cacheNotify.SetKey(testValue)
	if testValue != cacheNotify.Key() {
		t.Fatal("Getter did not return the Set value")
	}
}

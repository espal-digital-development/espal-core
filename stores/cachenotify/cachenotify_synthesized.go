// Code generated by espal-store-synthesizer. DO NOT EDIT.
package cachenotify

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ CacheNotifyEntity = &CacheNotify{}

type CacheNotifyEntity interface {
	database.ModelWithOptionalCreator
	Target() uint
	SetTarget(target uint)
	Key() string
	SetKey(key string)
}

// TableName returns the table name that belongs to the current model.
func (cacheNotify *CacheNotify) TableName() string {
	return "CacheNotify"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (cacheNotify *CacheNotify) TableAlias() string {
	return "cne"
}

// ID returns id.
func (cacheNotify *CacheNotify) ID() string {
	return cacheNotify.id
}

// CreatedByID returns createdByID.
func (cacheNotify *CacheNotify) CreatedByID() *string {
	return cacheNotify.createdByID
}

// SetCreatedByID sets the createdByID.
func (cacheNotify *CacheNotify) SetCreatedByID(createdByID *string) {
	cacheNotify.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (cacheNotify *CacheNotify) UpdatedByID() *string {
	return cacheNotify.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (cacheNotify *CacheNotify) SetUpdatedByID(updatedByID *string) {
	cacheNotify.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (cacheNotify *CacheNotify) CreatedAt() time.Time {
	return cacheNotify.createdAt
}

// SetCreatedAt sets the createdAt.
func (cacheNotify *CacheNotify) SetCreatedAt(createdAt time.Time) {
	cacheNotify.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (cacheNotify *CacheNotify) UpdatedAt() *time.Time {
	return cacheNotify.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (cacheNotify *CacheNotify) SetUpdatedAt(updatedAt *time.Time) {
	cacheNotify.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (cacheNotify *CacheNotify) CreatedByFirstName() *string {
	return cacheNotify.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (cacheNotify *CacheNotify) SetCreatedByFirstName(createdByFirstName *string) {
	cacheNotify.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (cacheNotify *CacheNotify) CreatedBySurname() *string {
	return cacheNotify.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (cacheNotify *CacheNotify) SetCreatedBySurname(createdBySurname *string) {
	cacheNotify.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (cacheNotify *CacheNotify) UpdatedByFirstName() *string {
	return cacheNotify.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (cacheNotify *CacheNotify) SetUpdatedByFirstName(updatedByFirstName *string) {
	cacheNotify.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (cacheNotify *CacheNotify) UpdatedBySurname() *string {
	return cacheNotify.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (cacheNotify *CacheNotify) SetUpdatedBySurname(updatedBySurname *string) {
	cacheNotify.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (cacheNotify *CacheNotify) IsUpdated() bool {
	return cacheNotify.updatedByID != nil
}

// Target returns target.
func (cacheNotify *CacheNotify) Target() uint {
	return cacheNotify.target
}

// SetTarget sets the target.
func (cacheNotify *CacheNotify) SetTarget(target uint) {
	cacheNotify.target = target
}

// Key returns key.
func (cacheNotify *CacheNotify) Key() string {
	return cacheNotify.key
}

// SetKey sets the key.
func (cacheNotify *CacheNotify) SetKey(key string) {
	cacheNotify.key = key
}

func newCacheNotify() *CacheNotify {
	return &CacheNotify{}
}

// New returns a new instance of CacheNotifyEntity.
func NewCacheNotifyEntity() CacheNotifyEntity {
	return newCacheNotify()
}

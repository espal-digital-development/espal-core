// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cachenotifymock

import (
	"github.com/espal-digital-development/espal-core/stores/cachenotify"
	"sync"
	"time"
)

var (
	lockCacheNotifyEntityMockCreatedAt             sync.RWMutex
	lockCacheNotifyEntityMockCreatedByFirstName    sync.RWMutex
	lockCacheNotifyEntityMockCreatedByID           sync.RWMutex
	lockCacheNotifyEntityMockCreatedBySurname      sync.RWMutex
	lockCacheNotifyEntityMockID                    sync.RWMutex
	lockCacheNotifyEntityMockIsUpdated             sync.RWMutex
	lockCacheNotifyEntityMockKey                   sync.RWMutex
	lockCacheNotifyEntityMockSetCreatedAt          sync.RWMutex
	lockCacheNotifyEntityMockSetCreatedByFirstName sync.RWMutex
	lockCacheNotifyEntityMockSetCreatedByID        sync.RWMutex
	lockCacheNotifyEntityMockSetCreatedBySurname   sync.RWMutex
	lockCacheNotifyEntityMockSetKey                sync.RWMutex
	lockCacheNotifyEntityMockSetTarget             sync.RWMutex
	lockCacheNotifyEntityMockSetUpdatedAt          sync.RWMutex
	lockCacheNotifyEntityMockSetUpdatedByFirstName sync.RWMutex
	lockCacheNotifyEntityMockSetUpdatedByID        sync.RWMutex
	lockCacheNotifyEntityMockSetUpdatedBySurname   sync.RWMutex
	lockCacheNotifyEntityMockTableAlias            sync.RWMutex
	lockCacheNotifyEntityMockTableName             sync.RWMutex
	lockCacheNotifyEntityMockTarget                sync.RWMutex
	lockCacheNotifyEntityMockUpdatedAt             sync.RWMutex
	lockCacheNotifyEntityMockUpdatedByFirstName    sync.RWMutex
	lockCacheNotifyEntityMockUpdatedByID           sync.RWMutex
	lockCacheNotifyEntityMockUpdatedBySurname      sync.RWMutex
)

// Ensure, that CacheNotifyEntityMock does implement CacheNotifyEntity.
// If this is not the case, regenerate this file with moq.
var _ cachenotify.CacheNotifyEntity = &CacheNotifyEntityMock{}

// CacheNotifyEntityMock is a mock implementation of CacheNotifyEntity.
//
//     func TestSomethingThatUsesCacheNotifyEntity(t *testing.T) {
//
//         // make and configure a mocked CacheNotifyEntity
//         mockedCacheNotifyEntity := &CacheNotifyEntityMock{
//             CreatedAtFunc: func() time.Time {
// 	               panic("mock out the CreatedAt method")
//             },
//             CreatedByFirstNameFunc: func() *string {
// 	               panic("mock out the CreatedByFirstName method")
//             },
//             CreatedByIDFunc: func() *string {
// 	               panic("mock out the CreatedByID method")
//             },
//             CreatedBySurnameFunc: func() *string {
// 	               panic("mock out the CreatedBySurname method")
//             },
//             IDFunc: func() string {
// 	               panic("mock out the ID method")
//             },
//             IsUpdatedFunc: func() bool {
// 	               panic("mock out the IsUpdated method")
//             },
//             KeyFunc: func() string {
// 	               panic("mock out the Key method")
//             },
//             SetCreatedAtFunc: func(createdAt time.Time)  {
// 	               panic("mock out the SetCreatedAt method")
//             },
//             SetCreatedByFirstNameFunc: func(updatedByFirstName *string)  {
// 	               panic("mock out the SetCreatedByFirstName method")
//             },
//             SetCreatedByIDFunc: func(createdByID *string)  {
// 	               panic("mock out the SetCreatedByID method")
//             },
//             SetCreatedBySurnameFunc: func(createdBySurname *string)  {
// 	               panic("mock out the SetCreatedBySurname method")
//             },
//             SetKeyFunc: func(key string)  {
// 	               panic("mock out the SetKey method")
//             },
//             SetTargetFunc: func(target uint)  {
// 	               panic("mock out the SetTarget method")
//             },
//             SetUpdatedAtFunc: func(updatedAt *time.Time)  {
// 	               panic("mock out the SetUpdatedAt method")
//             },
//             SetUpdatedByFirstNameFunc: func(updatedByFirstName *string)  {
// 	               panic("mock out the SetUpdatedByFirstName method")
//             },
//             SetUpdatedByIDFunc: func(updatedByID *string)  {
// 	               panic("mock out the SetUpdatedByID method")
//             },
//             SetUpdatedBySurnameFunc: func(updatedBySurname *string)  {
// 	               panic("mock out the SetUpdatedBySurname method")
//             },
//             TableAliasFunc: func() string {
// 	               panic("mock out the TableAlias method")
//             },
//             TableNameFunc: func() string {
// 	               panic("mock out the TableName method")
//             },
//             TargetFunc: func() uint {
// 	               panic("mock out the Target method")
//             },
//             UpdatedAtFunc: func() *time.Time {
// 	               panic("mock out the UpdatedAt method")
//             },
//             UpdatedByFirstNameFunc: func() *string {
// 	               panic("mock out the UpdatedByFirstName method")
//             },
//             UpdatedByIDFunc: func() *string {
// 	               panic("mock out the UpdatedByID method")
//             },
//             UpdatedBySurnameFunc: func() *string {
// 	               panic("mock out the UpdatedBySurname method")
//             },
//         }
//
//         // use mockedCacheNotifyEntity in code that requires CacheNotifyEntity
//         // and then make assertions.
//
//     }
type CacheNotifyEntityMock struct {
	// CreatedAtFunc mocks the CreatedAt method.
	CreatedAtFunc func() time.Time

	// CreatedByFirstNameFunc mocks the CreatedByFirstName method.
	CreatedByFirstNameFunc func() *string

	// CreatedByIDFunc mocks the CreatedByID method.
	CreatedByIDFunc func() *string

	// CreatedBySurnameFunc mocks the CreatedBySurname method.
	CreatedBySurnameFunc func() *string

	// IDFunc mocks the ID method.
	IDFunc func() string

	// IsUpdatedFunc mocks the IsUpdated method.
	IsUpdatedFunc func() bool

	// KeyFunc mocks the Key method.
	KeyFunc func() string

	// SetCreatedAtFunc mocks the SetCreatedAt method.
	SetCreatedAtFunc func(createdAt time.Time)

	// SetCreatedByFirstNameFunc mocks the SetCreatedByFirstName method.
	SetCreatedByFirstNameFunc func(updatedByFirstName *string)

	// SetCreatedByIDFunc mocks the SetCreatedByID method.
	SetCreatedByIDFunc func(createdByID *string)

	// SetCreatedBySurnameFunc mocks the SetCreatedBySurname method.
	SetCreatedBySurnameFunc func(createdBySurname *string)

	// SetKeyFunc mocks the SetKey method.
	SetKeyFunc func(key string)

	// SetTargetFunc mocks the SetTarget method.
	SetTargetFunc func(target uint)

	// SetUpdatedAtFunc mocks the SetUpdatedAt method.
	SetUpdatedAtFunc func(updatedAt *time.Time)

	// SetUpdatedByFirstNameFunc mocks the SetUpdatedByFirstName method.
	SetUpdatedByFirstNameFunc func(updatedByFirstName *string)

	// SetUpdatedByIDFunc mocks the SetUpdatedByID method.
	SetUpdatedByIDFunc func(updatedByID *string)

	// SetUpdatedBySurnameFunc mocks the SetUpdatedBySurname method.
	SetUpdatedBySurnameFunc func(updatedBySurname *string)

	// TableAliasFunc mocks the TableAlias method.
	TableAliasFunc func() string

	// TableNameFunc mocks the TableName method.
	TableNameFunc func() string

	// TargetFunc mocks the Target method.
	TargetFunc func() uint

	// UpdatedAtFunc mocks the UpdatedAt method.
	UpdatedAtFunc func() *time.Time

	// UpdatedByFirstNameFunc mocks the UpdatedByFirstName method.
	UpdatedByFirstNameFunc func() *string

	// UpdatedByIDFunc mocks the UpdatedByID method.
	UpdatedByIDFunc func() *string

	// UpdatedBySurnameFunc mocks the UpdatedBySurname method.
	UpdatedBySurnameFunc func() *string

	// calls tracks calls to the methods.
	calls struct {
		// CreatedAt holds details about calls to the CreatedAt method.
		CreatedAt []struct {
		}
		// CreatedByFirstName holds details about calls to the CreatedByFirstName method.
		CreatedByFirstName []struct {
		}
		// CreatedByID holds details about calls to the CreatedByID method.
		CreatedByID []struct {
		}
		// CreatedBySurname holds details about calls to the CreatedBySurname method.
		CreatedBySurname []struct {
		}
		// ID holds details about calls to the ID method.
		ID []struct {
		}
		// IsUpdated holds details about calls to the IsUpdated method.
		IsUpdated []struct {
		}
		// Key holds details about calls to the Key method.
		Key []struct {
		}
		// SetCreatedAt holds details about calls to the SetCreatedAt method.
		SetCreatedAt []struct {
			// CreatedAt is the createdAt argument value.
			CreatedAt time.Time
		}
		// SetCreatedByFirstName holds details about calls to the SetCreatedByFirstName method.
		SetCreatedByFirstName []struct {
			// UpdatedByFirstName is the updatedByFirstName argument value.
			UpdatedByFirstName *string
		}
		// SetCreatedByID holds details about calls to the SetCreatedByID method.
		SetCreatedByID []struct {
			// CreatedByID is the createdByID argument value.
			CreatedByID *string
		}
		// SetCreatedBySurname holds details about calls to the SetCreatedBySurname method.
		SetCreatedBySurname []struct {
			// CreatedBySurname is the createdBySurname argument value.
			CreatedBySurname *string
		}
		// SetKey holds details about calls to the SetKey method.
		SetKey []struct {
			// Key is the key argument value.
			Key string
		}
		// SetTarget holds details about calls to the SetTarget method.
		SetTarget []struct {
			// Target is the target argument value.
			Target uint
		}
		// SetUpdatedAt holds details about calls to the SetUpdatedAt method.
		SetUpdatedAt []struct {
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt *time.Time
		}
		// SetUpdatedByFirstName holds details about calls to the SetUpdatedByFirstName method.
		SetUpdatedByFirstName []struct {
			// UpdatedByFirstName is the updatedByFirstName argument value.
			UpdatedByFirstName *string
		}
		// SetUpdatedByID holds details about calls to the SetUpdatedByID method.
		SetUpdatedByID []struct {
			// UpdatedByID is the updatedByID argument value.
			UpdatedByID *string
		}
		// SetUpdatedBySurname holds details about calls to the SetUpdatedBySurname method.
		SetUpdatedBySurname []struct {
			// UpdatedBySurname is the updatedBySurname argument value.
			UpdatedBySurname *string
		}
		// TableAlias holds details about calls to the TableAlias method.
		TableAlias []struct {
		}
		// TableName holds details about calls to the TableName method.
		TableName []struct {
		}
		// Target holds details about calls to the Target method.
		Target []struct {
		}
		// UpdatedAt holds details about calls to the UpdatedAt method.
		UpdatedAt []struct {
		}
		// UpdatedByFirstName holds details about calls to the UpdatedByFirstName method.
		UpdatedByFirstName []struct {
		}
		// UpdatedByID holds details about calls to the UpdatedByID method.
		UpdatedByID []struct {
		}
		// UpdatedBySurname holds details about calls to the UpdatedBySurname method.
		UpdatedBySurname []struct {
		}
	}
}

// CreatedAt calls CreatedAtFunc.
func (mock *CacheNotifyEntityMock) CreatedAt() time.Time {
	if mock.CreatedAtFunc == nil {
		panic("CacheNotifyEntityMock.CreatedAtFunc: method is nil but CacheNotifyEntity.CreatedAt was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockCreatedAt.Lock()
	mock.calls.CreatedAt = append(mock.calls.CreatedAt, callInfo)
	lockCacheNotifyEntityMockCreatedAt.Unlock()
	return mock.CreatedAtFunc()
}

// CreatedAtCalls gets all the calls that were made to CreatedAt.
// Check the length with:
//     len(mockedCacheNotifyEntity.CreatedAtCalls())
func (mock *CacheNotifyEntityMock) CreatedAtCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockCreatedAt.RLock()
	calls = mock.calls.CreatedAt
	lockCacheNotifyEntityMockCreatedAt.RUnlock()
	return calls
}

// CreatedByFirstName calls CreatedByFirstNameFunc.
func (mock *CacheNotifyEntityMock) CreatedByFirstName() *string {
	if mock.CreatedByFirstNameFunc == nil {
		panic("CacheNotifyEntityMock.CreatedByFirstNameFunc: method is nil but CacheNotifyEntity.CreatedByFirstName was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockCreatedByFirstName.Lock()
	mock.calls.CreatedByFirstName = append(mock.calls.CreatedByFirstName, callInfo)
	lockCacheNotifyEntityMockCreatedByFirstName.Unlock()
	return mock.CreatedByFirstNameFunc()
}

// CreatedByFirstNameCalls gets all the calls that were made to CreatedByFirstName.
// Check the length with:
//     len(mockedCacheNotifyEntity.CreatedByFirstNameCalls())
func (mock *CacheNotifyEntityMock) CreatedByFirstNameCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockCreatedByFirstName.RLock()
	calls = mock.calls.CreatedByFirstName
	lockCacheNotifyEntityMockCreatedByFirstName.RUnlock()
	return calls
}

// CreatedByID calls CreatedByIDFunc.
func (mock *CacheNotifyEntityMock) CreatedByID() *string {
	if mock.CreatedByIDFunc == nil {
		panic("CacheNotifyEntityMock.CreatedByIDFunc: method is nil but CacheNotifyEntity.CreatedByID was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockCreatedByID.Lock()
	mock.calls.CreatedByID = append(mock.calls.CreatedByID, callInfo)
	lockCacheNotifyEntityMockCreatedByID.Unlock()
	return mock.CreatedByIDFunc()
}

// CreatedByIDCalls gets all the calls that were made to CreatedByID.
// Check the length with:
//     len(mockedCacheNotifyEntity.CreatedByIDCalls())
func (mock *CacheNotifyEntityMock) CreatedByIDCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockCreatedByID.RLock()
	calls = mock.calls.CreatedByID
	lockCacheNotifyEntityMockCreatedByID.RUnlock()
	return calls
}

// CreatedBySurname calls CreatedBySurnameFunc.
func (mock *CacheNotifyEntityMock) CreatedBySurname() *string {
	if mock.CreatedBySurnameFunc == nil {
		panic("CacheNotifyEntityMock.CreatedBySurnameFunc: method is nil but CacheNotifyEntity.CreatedBySurname was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockCreatedBySurname.Lock()
	mock.calls.CreatedBySurname = append(mock.calls.CreatedBySurname, callInfo)
	lockCacheNotifyEntityMockCreatedBySurname.Unlock()
	return mock.CreatedBySurnameFunc()
}

// CreatedBySurnameCalls gets all the calls that were made to CreatedBySurname.
// Check the length with:
//     len(mockedCacheNotifyEntity.CreatedBySurnameCalls())
func (mock *CacheNotifyEntityMock) CreatedBySurnameCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockCreatedBySurname.RLock()
	calls = mock.calls.CreatedBySurname
	lockCacheNotifyEntityMockCreatedBySurname.RUnlock()
	return calls
}

// ID calls IDFunc.
func (mock *CacheNotifyEntityMock) ID() string {
	if mock.IDFunc == nil {
		panic("CacheNotifyEntityMock.IDFunc: method is nil but CacheNotifyEntity.ID was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockID.Lock()
	mock.calls.ID = append(mock.calls.ID, callInfo)
	lockCacheNotifyEntityMockID.Unlock()
	return mock.IDFunc()
}

// IDCalls gets all the calls that were made to ID.
// Check the length with:
//     len(mockedCacheNotifyEntity.IDCalls())
func (mock *CacheNotifyEntityMock) IDCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockID.RLock()
	calls = mock.calls.ID
	lockCacheNotifyEntityMockID.RUnlock()
	return calls
}

// IsUpdated calls IsUpdatedFunc.
func (mock *CacheNotifyEntityMock) IsUpdated() bool {
	if mock.IsUpdatedFunc == nil {
		panic("CacheNotifyEntityMock.IsUpdatedFunc: method is nil but CacheNotifyEntity.IsUpdated was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockIsUpdated.Lock()
	mock.calls.IsUpdated = append(mock.calls.IsUpdated, callInfo)
	lockCacheNotifyEntityMockIsUpdated.Unlock()
	return mock.IsUpdatedFunc()
}

// IsUpdatedCalls gets all the calls that were made to IsUpdated.
// Check the length with:
//     len(mockedCacheNotifyEntity.IsUpdatedCalls())
func (mock *CacheNotifyEntityMock) IsUpdatedCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockIsUpdated.RLock()
	calls = mock.calls.IsUpdated
	lockCacheNotifyEntityMockIsUpdated.RUnlock()
	return calls
}

// Key calls KeyFunc.
func (mock *CacheNotifyEntityMock) Key() string {
	if mock.KeyFunc == nil {
		panic("CacheNotifyEntityMock.KeyFunc: method is nil but CacheNotifyEntity.Key was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockKey.Lock()
	mock.calls.Key = append(mock.calls.Key, callInfo)
	lockCacheNotifyEntityMockKey.Unlock()
	return mock.KeyFunc()
}

// KeyCalls gets all the calls that were made to Key.
// Check the length with:
//     len(mockedCacheNotifyEntity.KeyCalls())
func (mock *CacheNotifyEntityMock) KeyCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockKey.RLock()
	calls = mock.calls.Key
	lockCacheNotifyEntityMockKey.RUnlock()
	return calls
}

// SetCreatedAt calls SetCreatedAtFunc.
func (mock *CacheNotifyEntityMock) SetCreatedAt(createdAt time.Time) {
	if mock.SetCreatedAtFunc == nil {
		panic("CacheNotifyEntityMock.SetCreatedAtFunc: method is nil but CacheNotifyEntity.SetCreatedAt was just called")
	}
	callInfo := struct {
		CreatedAt time.Time
	}{
		CreatedAt: createdAt,
	}
	lockCacheNotifyEntityMockSetCreatedAt.Lock()
	mock.calls.SetCreatedAt = append(mock.calls.SetCreatedAt, callInfo)
	lockCacheNotifyEntityMockSetCreatedAt.Unlock()
	mock.SetCreatedAtFunc(createdAt)
}

// SetCreatedAtCalls gets all the calls that were made to SetCreatedAt.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetCreatedAtCalls())
func (mock *CacheNotifyEntityMock) SetCreatedAtCalls() []struct {
	CreatedAt time.Time
} {
	var calls []struct {
		CreatedAt time.Time
	}
	lockCacheNotifyEntityMockSetCreatedAt.RLock()
	calls = mock.calls.SetCreatedAt
	lockCacheNotifyEntityMockSetCreatedAt.RUnlock()
	return calls
}

// SetCreatedByFirstName calls SetCreatedByFirstNameFunc.
func (mock *CacheNotifyEntityMock) SetCreatedByFirstName(updatedByFirstName *string) {
	if mock.SetCreatedByFirstNameFunc == nil {
		panic("CacheNotifyEntityMock.SetCreatedByFirstNameFunc: method is nil but CacheNotifyEntity.SetCreatedByFirstName was just called")
	}
	callInfo := struct {
		UpdatedByFirstName *string
	}{
		UpdatedByFirstName: updatedByFirstName,
	}
	lockCacheNotifyEntityMockSetCreatedByFirstName.Lock()
	mock.calls.SetCreatedByFirstName = append(mock.calls.SetCreatedByFirstName, callInfo)
	lockCacheNotifyEntityMockSetCreatedByFirstName.Unlock()
	mock.SetCreatedByFirstNameFunc(updatedByFirstName)
}

// SetCreatedByFirstNameCalls gets all the calls that were made to SetCreatedByFirstName.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetCreatedByFirstNameCalls())
func (mock *CacheNotifyEntityMock) SetCreatedByFirstNameCalls() []struct {
	UpdatedByFirstName *string
} {
	var calls []struct {
		UpdatedByFirstName *string
	}
	lockCacheNotifyEntityMockSetCreatedByFirstName.RLock()
	calls = mock.calls.SetCreatedByFirstName
	lockCacheNotifyEntityMockSetCreatedByFirstName.RUnlock()
	return calls
}

// SetCreatedByID calls SetCreatedByIDFunc.
func (mock *CacheNotifyEntityMock) SetCreatedByID(createdByID *string) {
	if mock.SetCreatedByIDFunc == nil {
		panic("CacheNotifyEntityMock.SetCreatedByIDFunc: method is nil but CacheNotifyEntity.SetCreatedByID was just called")
	}
	callInfo := struct {
		CreatedByID *string
	}{
		CreatedByID: createdByID,
	}
	lockCacheNotifyEntityMockSetCreatedByID.Lock()
	mock.calls.SetCreatedByID = append(mock.calls.SetCreatedByID, callInfo)
	lockCacheNotifyEntityMockSetCreatedByID.Unlock()
	mock.SetCreatedByIDFunc(createdByID)
}

// SetCreatedByIDCalls gets all the calls that were made to SetCreatedByID.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetCreatedByIDCalls())
func (mock *CacheNotifyEntityMock) SetCreatedByIDCalls() []struct {
	CreatedByID *string
} {
	var calls []struct {
		CreatedByID *string
	}
	lockCacheNotifyEntityMockSetCreatedByID.RLock()
	calls = mock.calls.SetCreatedByID
	lockCacheNotifyEntityMockSetCreatedByID.RUnlock()
	return calls
}

// SetCreatedBySurname calls SetCreatedBySurnameFunc.
func (mock *CacheNotifyEntityMock) SetCreatedBySurname(createdBySurname *string) {
	if mock.SetCreatedBySurnameFunc == nil {
		panic("CacheNotifyEntityMock.SetCreatedBySurnameFunc: method is nil but CacheNotifyEntity.SetCreatedBySurname was just called")
	}
	callInfo := struct {
		CreatedBySurname *string
	}{
		CreatedBySurname: createdBySurname,
	}
	lockCacheNotifyEntityMockSetCreatedBySurname.Lock()
	mock.calls.SetCreatedBySurname = append(mock.calls.SetCreatedBySurname, callInfo)
	lockCacheNotifyEntityMockSetCreatedBySurname.Unlock()
	mock.SetCreatedBySurnameFunc(createdBySurname)
}

// SetCreatedBySurnameCalls gets all the calls that were made to SetCreatedBySurname.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetCreatedBySurnameCalls())
func (mock *CacheNotifyEntityMock) SetCreatedBySurnameCalls() []struct {
	CreatedBySurname *string
} {
	var calls []struct {
		CreatedBySurname *string
	}
	lockCacheNotifyEntityMockSetCreatedBySurname.RLock()
	calls = mock.calls.SetCreatedBySurname
	lockCacheNotifyEntityMockSetCreatedBySurname.RUnlock()
	return calls
}

// SetKey calls SetKeyFunc.
func (mock *CacheNotifyEntityMock) SetKey(key string) {
	if mock.SetKeyFunc == nil {
		panic("CacheNotifyEntityMock.SetKeyFunc: method is nil but CacheNotifyEntity.SetKey was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockCacheNotifyEntityMockSetKey.Lock()
	mock.calls.SetKey = append(mock.calls.SetKey, callInfo)
	lockCacheNotifyEntityMockSetKey.Unlock()
	mock.SetKeyFunc(key)
}

// SetKeyCalls gets all the calls that were made to SetKey.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetKeyCalls())
func (mock *CacheNotifyEntityMock) SetKeyCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockCacheNotifyEntityMockSetKey.RLock()
	calls = mock.calls.SetKey
	lockCacheNotifyEntityMockSetKey.RUnlock()
	return calls
}

// SetTarget calls SetTargetFunc.
func (mock *CacheNotifyEntityMock) SetTarget(target uint) {
	if mock.SetTargetFunc == nil {
		panic("CacheNotifyEntityMock.SetTargetFunc: method is nil but CacheNotifyEntity.SetTarget was just called")
	}
	callInfo := struct {
		Target uint
	}{
		Target: target,
	}
	lockCacheNotifyEntityMockSetTarget.Lock()
	mock.calls.SetTarget = append(mock.calls.SetTarget, callInfo)
	lockCacheNotifyEntityMockSetTarget.Unlock()
	mock.SetTargetFunc(target)
}

// SetTargetCalls gets all the calls that were made to SetTarget.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetTargetCalls())
func (mock *CacheNotifyEntityMock) SetTargetCalls() []struct {
	Target uint
} {
	var calls []struct {
		Target uint
	}
	lockCacheNotifyEntityMockSetTarget.RLock()
	calls = mock.calls.SetTarget
	lockCacheNotifyEntityMockSetTarget.RUnlock()
	return calls
}

// SetUpdatedAt calls SetUpdatedAtFunc.
func (mock *CacheNotifyEntityMock) SetUpdatedAt(updatedAt *time.Time) {
	if mock.SetUpdatedAtFunc == nil {
		panic("CacheNotifyEntityMock.SetUpdatedAtFunc: method is nil but CacheNotifyEntity.SetUpdatedAt was just called")
	}
	callInfo := struct {
		UpdatedAt *time.Time
	}{
		UpdatedAt: updatedAt,
	}
	lockCacheNotifyEntityMockSetUpdatedAt.Lock()
	mock.calls.SetUpdatedAt = append(mock.calls.SetUpdatedAt, callInfo)
	lockCacheNotifyEntityMockSetUpdatedAt.Unlock()
	mock.SetUpdatedAtFunc(updatedAt)
}

// SetUpdatedAtCalls gets all the calls that were made to SetUpdatedAt.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetUpdatedAtCalls())
func (mock *CacheNotifyEntityMock) SetUpdatedAtCalls() []struct {
	UpdatedAt *time.Time
} {
	var calls []struct {
		UpdatedAt *time.Time
	}
	lockCacheNotifyEntityMockSetUpdatedAt.RLock()
	calls = mock.calls.SetUpdatedAt
	lockCacheNotifyEntityMockSetUpdatedAt.RUnlock()
	return calls
}

// SetUpdatedByFirstName calls SetUpdatedByFirstNameFunc.
func (mock *CacheNotifyEntityMock) SetUpdatedByFirstName(updatedByFirstName *string) {
	if mock.SetUpdatedByFirstNameFunc == nil {
		panic("CacheNotifyEntityMock.SetUpdatedByFirstNameFunc: method is nil but CacheNotifyEntity.SetUpdatedByFirstName was just called")
	}
	callInfo := struct {
		UpdatedByFirstName *string
	}{
		UpdatedByFirstName: updatedByFirstName,
	}
	lockCacheNotifyEntityMockSetUpdatedByFirstName.Lock()
	mock.calls.SetUpdatedByFirstName = append(mock.calls.SetUpdatedByFirstName, callInfo)
	lockCacheNotifyEntityMockSetUpdatedByFirstName.Unlock()
	mock.SetUpdatedByFirstNameFunc(updatedByFirstName)
}

// SetUpdatedByFirstNameCalls gets all the calls that were made to SetUpdatedByFirstName.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetUpdatedByFirstNameCalls())
func (mock *CacheNotifyEntityMock) SetUpdatedByFirstNameCalls() []struct {
	UpdatedByFirstName *string
} {
	var calls []struct {
		UpdatedByFirstName *string
	}
	lockCacheNotifyEntityMockSetUpdatedByFirstName.RLock()
	calls = mock.calls.SetUpdatedByFirstName
	lockCacheNotifyEntityMockSetUpdatedByFirstName.RUnlock()
	return calls
}

// SetUpdatedByID calls SetUpdatedByIDFunc.
func (mock *CacheNotifyEntityMock) SetUpdatedByID(updatedByID *string) {
	if mock.SetUpdatedByIDFunc == nil {
		panic("CacheNotifyEntityMock.SetUpdatedByIDFunc: method is nil but CacheNotifyEntity.SetUpdatedByID was just called")
	}
	callInfo := struct {
		UpdatedByID *string
	}{
		UpdatedByID: updatedByID,
	}
	lockCacheNotifyEntityMockSetUpdatedByID.Lock()
	mock.calls.SetUpdatedByID = append(mock.calls.SetUpdatedByID, callInfo)
	lockCacheNotifyEntityMockSetUpdatedByID.Unlock()
	mock.SetUpdatedByIDFunc(updatedByID)
}

// SetUpdatedByIDCalls gets all the calls that were made to SetUpdatedByID.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetUpdatedByIDCalls())
func (mock *CacheNotifyEntityMock) SetUpdatedByIDCalls() []struct {
	UpdatedByID *string
} {
	var calls []struct {
		UpdatedByID *string
	}
	lockCacheNotifyEntityMockSetUpdatedByID.RLock()
	calls = mock.calls.SetUpdatedByID
	lockCacheNotifyEntityMockSetUpdatedByID.RUnlock()
	return calls
}

// SetUpdatedBySurname calls SetUpdatedBySurnameFunc.
func (mock *CacheNotifyEntityMock) SetUpdatedBySurname(updatedBySurname *string) {
	if mock.SetUpdatedBySurnameFunc == nil {
		panic("CacheNotifyEntityMock.SetUpdatedBySurnameFunc: method is nil but CacheNotifyEntity.SetUpdatedBySurname was just called")
	}
	callInfo := struct {
		UpdatedBySurname *string
	}{
		UpdatedBySurname: updatedBySurname,
	}
	lockCacheNotifyEntityMockSetUpdatedBySurname.Lock()
	mock.calls.SetUpdatedBySurname = append(mock.calls.SetUpdatedBySurname, callInfo)
	lockCacheNotifyEntityMockSetUpdatedBySurname.Unlock()
	mock.SetUpdatedBySurnameFunc(updatedBySurname)
}

// SetUpdatedBySurnameCalls gets all the calls that were made to SetUpdatedBySurname.
// Check the length with:
//     len(mockedCacheNotifyEntity.SetUpdatedBySurnameCalls())
func (mock *CacheNotifyEntityMock) SetUpdatedBySurnameCalls() []struct {
	UpdatedBySurname *string
} {
	var calls []struct {
		UpdatedBySurname *string
	}
	lockCacheNotifyEntityMockSetUpdatedBySurname.RLock()
	calls = mock.calls.SetUpdatedBySurname
	lockCacheNotifyEntityMockSetUpdatedBySurname.RUnlock()
	return calls
}

// TableAlias calls TableAliasFunc.
func (mock *CacheNotifyEntityMock) TableAlias() string {
	if mock.TableAliasFunc == nil {
		panic("CacheNotifyEntityMock.TableAliasFunc: method is nil but CacheNotifyEntity.TableAlias was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockTableAlias.Lock()
	mock.calls.TableAlias = append(mock.calls.TableAlias, callInfo)
	lockCacheNotifyEntityMockTableAlias.Unlock()
	return mock.TableAliasFunc()
}

// TableAliasCalls gets all the calls that were made to TableAlias.
// Check the length with:
//     len(mockedCacheNotifyEntity.TableAliasCalls())
func (mock *CacheNotifyEntityMock) TableAliasCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockTableAlias.RLock()
	calls = mock.calls.TableAlias
	lockCacheNotifyEntityMockTableAlias.RUnlock()
	return calls
}

// TableName calls TableNameFunc.
func (mock *CacheNotifyEntityMock) TableName() string {
	if mock.TableNameFunc == nil {
		panic("CacheNotifyEntityMock.TableNameFunc: method is nil but CacheNotifyEntity.TableName was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockTableName.Lock()
	mock.calls.TableName = append(mock.calls.TableName, callInfo)
	lockCacheNotifyEntityMockTableName.Unlock()
	return mock.TableNameFunc()
}

// TableNameCalls gets all the calls that were made to TableName.
// Check the length with:
//     len(mockedCacheNotifyEntity.TableNameCalls())
func (mock *CacheNotifyEntityMock) TableNameCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockTableName.RLock()
	calls = mock.calls.TableName
	lockCacheNotifyEntityMockTableName.RUnlock()
	return calls
}

// Target calls TargetFunc.
func (mock *CacheNotifyEntityMock) Target() uint {
	if mock.TargetFunc == nil {
		panic("CacheNotifyEntityMock.TargetFunc: method is nil but CacheNotifyEntity.Target was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockTarget.Lock()
	mock.calls.Target = append(mock.calls.Target, callInfo)
	lockCacheNotifyEntityMockTarget.Unlock()
	return mock.TargetFunc()
}

// TargetCalls gets all the calls that were made to Target.
// Check the length with:
//     len(mockedCacheNotifyEntity.TargetCalls())
func (mock *CacheNotifyEntityMock) TargetCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockTarget.RLock()
	calls = mock.calls.Target
	lockCacheNotifyEntityMockTarget.RUnlock()
	return calls
}

// UpdatedAt calls UpdatedAtFunc.
func (mock *CacheNotifyEntityMock) UpdatedAt() *time.Time {
	if mock.UpdatedAtFunc == nil {
		panic("CacheNotifyEntityMock.UpdatedAtFunc: method is nil but CacheNotifyEntity.UpdatedAt was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockUpdatedAt.Lock()
	mock.calls.UpdatedAt = append(mock.calls.UpdatedAt, callInfo)
	lockCacheNotifyEntityMockUpdatedAt.Unlock()
	return mock.UpdatedAtFunc()
}

// UpdatedAtCalls gets all the calls that were made to UpdatedAt.
// Check the length with:
//     len(mockedCacheNotifyEntity.UpdatedAtCalls())
func (mock *CacheNotifyEntityMock) UpdatedAtCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockUpdatedAt.RLock()
	calls = mock.calls.UpdatedAt
	lockCacheNotifyEntityMockUpdatedAt.RUnlock()
	return calls
}

// UpdatedByFirstName calls UpdatedByFirstNameFunc.
func (mock *CacheNotifyEntityMock) UpdatedByFirstName() *string {
	if mock.UpdatedByFirstNameFunc == nil {
		panic("CacheNotifyEntityMock.UpdatedByFirstNameFunc: method is nil but CacheNotifyEntity.UpdatedByFirstName was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockUpdatedByFirstName.Lock()
	mock.calls.UpdatedByFirstName = append(mock.calls.UpdatedByFirstName, callInfo)
	lockCacheNotifyEntityMockUpdatedByFirstName.Unlock()
	return mock.UpdatedByFirstNameFunc()
}

// UpdatedByFirstNameCalls gets all the calls that were made to UpdatedByFirstName.
// Check the length with:
//     len(mockedCacheNotifyEntity.UpdatedByFirstNameCalls())
func (mock *CacheNotifyEntityMock) UpdatedByFirstNameCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockUpdatedByFirstName.RLock()
	calls = mock.calls.UpdatedByFirstName
	lockCacheNotifyEntityMockUpdatedByFirstName.RUnlock()
	return calls
}

// UpdatedByID calls UpdatedByIDFunc.
func (mock *CacheNotifyEntityMock) UpdatedByID() *string {
	if mock.UpdatedByIDFunc == nil {
		panic("CacheNotifyEntityMock.UpdatedByIDFunc: method is nil but CacheNotifyEntity.UpdatedByID was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockUpdatedByID.Lock()
	mock.calls.UpdatedByID = append(mock.calls.UpdatedByID, callInfo)
	lockCacheNotifyEntityMockUpdatedByID.Unlock()
	return mock.UpdatedByIDFunc()
}

// UpdatedByIDCalls gets all the calls that were made to UpdatedByID.
// Check the length with:
//     len(mockedCacheNotifyEntity.UpdatedByIDCalls())
func (mock *CacheNotifyEntityMock) UpdatedByIDCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockUpdatedByID.RLock()
	calls = mock.calls.UpdatedByID
	lockCacheNotifyEntityMockUpdatedByID.RUnlock()
	return calls
}

// UpdatedBySurname calls UpdatedBySurnameFunc.
func (mock *CacheNotifyEntityMock) UpdatedBySurname() *string {
	if mock.UpdatedBySurnameFunc == nil {
		panic("CacheNotifyEntityMock.UpdatedBySurnameFunc: method is nil but CacheNotifyEntity.UpdatedBySurname was just called")
	}
	callInfo := struct {
	}{}
	lockCacheNotifyEntityMockUpdatedBySurname.Lock()
	mock.calls.UpdatedBySurname = append(mock.calls.UpdatedBySurname, callInfo)
	lockCacheNotifyEntityMockUpdatedBySurname.Unlock()
	return mock.UpdatedBySurnameFunc()
}

// UpdatedBySurnameCalls gets all the calls that were made to UpdatedBySurname.
// Check the length with:
//     len(mockedCacheNotifyEntity.UpdatedBySurnameCalls())
func (mock *CacheNotifyEntityMock) UpdatedBySurnameCalls() []struct {
} {
	var calls []struct {
	}
	lockCacheNotifyEntityMockUpdatedBySurname.RLock()
	calls = mock.calls.UpdatedBySurname
	lockCacheNotifyEntityMockUpdatedBySurname.RUnlock()
	return calls
}

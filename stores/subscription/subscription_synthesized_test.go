// Code generated by espal-store-synthesizer. DO NOT EDIT.
package subscription_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/subscription"
)

func TestSubscriptionTable(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	if subscription.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSubscriptionTableAlias(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	if subscription.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSubscriptionIsUpdated(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	subscription.IsUpdated()
}

func TestSubscriptionID(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	subscription.ID()
}

func TestSubscriptionCreatedByID(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := "testValue"
	subscription.SetCreatedByID(testValue)
	if testValue != subscription.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionUpdatedByID(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := "testValue"
	subscription.SetUpdatedByID(&testValue)
	if &testValue != subscription.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionCreatedAt(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := time.Now()
	subscription.SetCreatedAt(testValue)
	if testValue != subscription.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionUpdatedAt(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := time.Now()
	subscription.SetUpdatedAt(&testValue)
	if &testValue != subscription.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionCreatedByFirstName(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := "testValue"
	subscription.SetCreatedByFirstName(&testValue)
	if &testValue != subscription.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionCreatedBySurname(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := "testValue"
	subscription.SetCreatedBySurname(&testValue)
	if &testValue != subscription.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionUpdatedByFirstName(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := "testValue"
	subscription.SetUpdatedByFirstName(&testValue)
	if &testValue != subscription.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriptionUpdatedBySurname(t *testing.T) {
	subscription := subscription.NewSubscriptionEntity()
	testValue := "testValue"
	subscription.SetUpdatedBySurname(&testValue)
	if &testValue != subscription.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package stocklocation_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/stocklocation"
)

func TestMutationTable(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	if m.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestMutationTableAlias(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	if m.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestMutationIsUpdated(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	m.IsUpdated()
}

func TestMutationID(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	m.ID()
}

func TestMutationCreatedByID(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetCreatedByID(testValue)
	if testValue != m.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedByID(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetUpdatedByID(&testValue)
	if &testValue != m.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationCreatedAt(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := time.Now()
	m.SetCreatedAt(testValue)
	if testValue != m.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedAt(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := time.Now()
	m.SetUpdatedAt(&testValue)
	if &testValue != m.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationCreatedByFirstName(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetCreatedByFirstName(&testValue)
	if &testValue != m.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationCreatedBySurname(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetCreatedBySurname(&testValue)
	if &testValue != m.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedByFirstName(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetUpdatedByFirstName(&testValue)
	if &testValue != m.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationUpdatedBySurname(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetUpdatedBySurname(&testValue)
	if &testValue != m.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationSourceID(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetSourceID(&testValue)
	if &testValue != m.SourceID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationTargetID(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetTargetID(testValue)
	if testValue != m.TargetID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationProductVariantID(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetProductVariantID(testValue)
	if testValue != m.ProductVariantID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationModifier(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := int(1e8)
	m.SetModifier(testValue)
	if testValue != m.Modifier() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationBallanceAfterModifier(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := int(1e8)
	m.SetBallanceAfterModifier(testValue)
	if testValue != m.BallanceAfterModifier() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestMutationComments(t *testing.T) {
	m := stocklocation.NewMutationEntity()
	testValue := "testValue"
	m.SetComments(&testValue)
	if &testValue != m.Comments() {
		t.Fatal("Getter did not return the Set value")
	}
}

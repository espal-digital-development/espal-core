// Code generated by espal-store-synthesizer. DO NOT EDIT.
package stocklocation_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/stocklocation"
)

func TestTranslationTable(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	if tt.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestTranslationTableAlias(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	if tt.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestTranslationIsUpdated(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	tt.IsUpdated()
}

func TestTranslationID(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	tt.ID()
}

func TestTranslationCreatedByID(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetCreatedByID(testValue)
	if testValue != tt.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationUpdatedByID(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetUpdatedByID(&testValue)
	if &testValue != tt.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationCreatedAt(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := time.Now()
	tt.SetCreatedAt(testValue)
	if testValue != tt.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationUpdatedAt(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := time.Now()
	tt.SetUpdatedAt(&testValue)
	if &testValue != tt.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationCreatedByFirstName(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetCreatedByFirstName(&testValue)
	if &testValue != tt.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationCreatedBySurname(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetCreatedBySurname(&testValue)
	if &testValue != tt.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationUpdatedByFirstName(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetUpdatedByFirstName(&testValue)
	if &testValue != tt.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationUpdatedBySurname(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetUpdatedBySurname(&testValue)
	if &testValue != tt.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationLanguage(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := uint16(65000)
	tt.SetLanguage(testValue)
	if testValue != tt.Language() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationField(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := uint16(65000)
	tt.SetField(testValue)
	if testValue != tt.Field() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationValue(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetValue(testValue)
	if testValue != tt.Value() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestTranslationStockLocationID(t *testing.T) {
	tt := stocklocation.NewTranslationEntity()
	testValue := "testValue"
	tt.SetStockLocationID(testValue)
	if testValue != tt.StockLocationID() {
		t.Fatal("Getter did not return the Set value")
	}
}

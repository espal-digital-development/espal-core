// Code generated by espal-store-synthesizer. DO NOT EDIT.
package stocklocation

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ MutationEntity = &Mutation{}

type MutationEntity interface {
	database.Model
	SourceID() *string
	SetSourceID(sourceID *string)
	TargetID() string
	SetTargetID(targetID string)
	ProductVariantID() string
	SetProductVariantID(productVariantID string)
	Modifier() int
	SetModifier(modifier int)
	BallanceAfterModifier() int
	SetBallanceAfterModifier(ballanceAfterModifier int)
	Comments() *string
	SetComments(comments *string)
}

// ID returns id.
func (m *Mutation) ID() string {
	return m.id
}

// CreatedByID returns createdByID.
func (m *Mutation) CreatedByID() string {
	return m.createdByID
}

// SetCreatedByID sets the createdByID.
func (m *Mutation) SetCreatedByID(createdByID string) {
	m.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (m *Mutation) UpdatedByID() *string {
	return m.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (m *Mutation) SetUpdatedByID(updatedByID *string) {
	m.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (m *Mutation) CreatedAt() time.Time {
	return m.createdAt
}

// SetCreatedAt sets the createdAt.
func (m *Mutation) SetCreatedAt(createdAt time.Time) {
	m.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (m *Mutation) UpdatedAt() *time.Time {
	return m.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (m *Mutation) SetUpdatedAt(updatedAt *time.Time) {
	m.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (m *Mutation) CreatedByFirstName() *string {
	return m.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (m *Mutation) SetCreatedByFirstName(createdByFirstName *string) {
	m.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (m *Mutation) CreatedBySurname() *string {
	return m.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (m *Mutation) SetCreatedBySurname(createdBySurname *string) {
	m.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (m *Mutation) UpdatedByFirstName() *string {
	return m.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (m *Mutation) SetUpdatedByFirstName(updatedByFirstName *string) {
	m.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (m *Mutation) UpdatedBySurname() *string {
	return m.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (m *Mutation) SetUpdatedBySurname(updatedBySurname *string) {
	m.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (m *Mutation) IsUpdated() bool {
	return m.updatedByID != nil
}

// SourceID returns sourceID.
func (m *Mutation) SourceID() *string {
	return m.sourceID
}

// SetSourceID sets the sourceID.
func (m *Mutation) SetSourceID(sourceID *string) {
	m.sourceID = sourceID
}

// TargetID returns targetID.
func (m *Mutation) TargetID() string {
	return m.targetID
}

// SetTargetID sets the targetID.
func (m *Mutation) SetTargetID(targetID string) {
	m.targetID = targetID
}

// ProductVariantID returns productVariantID.
func (m *Mutation) ProductVariantID() string {
	return m.productVariantID
}

// SetProductVariantID sets the productVariantID.
func (m *Mutation) SetProductVariantID(productVariantID string) {
	m.productVariantID = productVariantID
}

// Modifier returns modifier.
func (m *Mutation) Modifier() int {
	return m.modifier
}

// SetModifier sets the modifier.
func (m *Mutation) SetModifier(modifier int) {
	m.modifier = modifier
}

// BallanceAfterModifier returns ballanceAfterModifier.
func (m *Mutation) BallanceAfterModifier() int {
	return m.ballanceAfterModifier
}

// SetBallanceAfterModifier sets the ballanceAfterModifier.
func (m *Mutation) SetBallanceAfterModifier(ballanceAfterModifier int) {
	m.ballanceAfterModifier = ballanceAfterModifier
}

// Comments returns comments.
func (m *Mutation) Comments() *string {
	return m.comments
}

// SetComments sets the comments.
func (m *Mutation) SetComments(comments *string) {
	m.comments = comments
}

func newMutation() *Mutation {
	return &Mutation{}
}

// New returns a new instance of MutationEntity.
func NewMutationEntity() MutationEntity {
	return newMutation()
}

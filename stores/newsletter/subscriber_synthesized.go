// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsletter

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ SubscriberEntity = &Subscriber{}

type SubscriberEntity interface {
	database.Model
	NewsletterID() string
	SetNewsletterID(newsletterID string)
	UserID() *string
	SetUserID(userID *string)
	Email() *string
	SetEmail(email *string)
}

// ID returns id.
func (subscriber *Subscriber) ID() string {
	return subscriber.id
}

// CreatedByID returns createdByID.
func (subscriber *Subscriber) CreatedByID() string {
	return subscriber.createdByID
}

// SetCreatedByID sets the createdByID.
func (subscriber *Subscriber) SetCreatedByID(createdByID string) {
	subscriber.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (subscriber *Subscriber) UpdatedByID() *string {
	return subscriber.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (subscriber *Subscriber) SetUpdatedByID(updatedByID *string) {
	subscriber.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (subscriber *Subscriber) CreatedAt() time.Time {
	return subscriber.createdAt
}

// SetCreatedAt sets the createdAt.
func (subscriber *Subscriber) SetCreatedAt(createdAt time.Time) {
	subscriber.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (subscriber *Subscriber) UpdatedAt() *time.Time {
	return subscriber.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (subscriber *Subscriber) SetUpdatedAt(updatedAt *time.Time) {
	subscriber.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (subscriber *Subscriber) CreatedByFirstName() *string {
	return subscriber.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (subscriber *Subscriber) SetCreatedByFirstName(createdByFirstName *string) {
	subscriber.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (subscriber *Subscriber) CreatedBySurname() *string {
	return subscriber.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (subscriber *Subscriber) SetCreatedBySurname(createdBySurname *string) {
	subscriber.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (subscriber *Subscriber) UpdatedByFirstName() *string {
	return subscriber.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (subscriber *Subscriber) SetUpdatedByFirstName(updatedByFirstName *string) {
	subscriber.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (subscriber *Subscriber) UpdatedBySurname() *string {
	return subscriber.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (subscriber *Subscriber) SetUpdatedBySurname(updatedBySurname *string) {
	subscriber.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (subscriber *Subscriber) IsUpdated() bool {
	return subscriber.updatedByID != nil
}

// NewsletterID returns newsletterID.
func (subscriber *Subscriber) NewsletterID() string {
	return subscriber.newsletterID
}

// SetNewsletterID sets the newsletterID.
func (subscriber *Subscriber) SetNewsletterID(newsletterID string) {
	subscriber.newsletterID = newsletterID
}

// UserID returns userID.
func (subscriber *Subscriber) UserID() *string {
	return subscriber.userID
}

// SetUserID sets the userID.
func (subscriber *Subscriber) SetUserID(userID *string) {
	subscriber.userID = userID
}

// Email returns email.
func (subscriber *Subscriber) Email() *string {
	return subscriber.email
}

// SetEmail sets the email.
func (subscriber *Subscriber) SetEmail(email *string) {
	subscriber.email = email
}

func newSubscriber() *Subscriber {
	return &Subscriber{}
}

// New returns a new instance of SubscriberEntity.
func NewSubscriberEntity() SubscriberEntity {
	return newSubscriber()
}

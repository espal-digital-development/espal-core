// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsletter

import (
	"time"

	"github.com/espal-digital-development/espal-core/database"
)

var _ NewsletterEntity = &Newsletter{}

type NewsletterEntity interface {
	database.Model
	DomainID() string
	SetDomainID(domainID string)
	Active() bool
	SetActive(active bool)
	SendAt() *time.Time
	SetSendAt(sendAt *time.Time)
}

// TableName returns the table name that belongs to the current model.
func (newsletter *Newsletter) TableName() string {
	return "Newsletter"
}

// TableAlias returns the unique resolved table alias for use in queries.
func (newsletter *Newsletter) TableAlias() string {
	return "ne"
}

// ID returns id.
func (newsletter *Newsletter) ID() string {
	return newsletter.id
}

// CreatedByID returns createdByID.
func (newsletter *Newsletter) CreatedByID() string {
	return newsletter.createdByID
}

// SetCreatedByID sets the createdByID.
func (newsletter *Newsletter) SetCreatedByID(createdByID string) {
	newsletter.createdByID = createdByID
}

// UpdatedByID returns updatedByID.
func (newsletter *Newsletter) UpdatedByID() *string {
	return newsletter.updatedByID
}

// SetUpdatedByID sets the updatedByID.
func (newsletter *Newsletter) SetUpdatedByID(updatedByID *string) {
	newsletter.updatedByID = updatedByID
}

// CreatedAt returns createdAt.
func (newsletter *Newsletter) CreatedAt() time.Time {
	return newsletter.createdAt
}

// SetCreatedAt sets the createdAt.
func (newsletter *Newsletter) SetCreatedAt(createdAt time.Time) {
	newsletter.createdAt = createdAt
}

// UpdatedAt returns updatedAt.
func (newsletter *Newsletter) UpdatedAt() *time.Time {
	return newsletter.updatedAt
}

// SetUpdatedAt sets the updatedAt.
func (newsletter *Newsletter) SetUpdatedAt(updatedAt *time.Time) {
	newsletter.updatedAt = updatedAt
}

// CreatedByFirstName returns createdByFirstName.
func (newsletter *Newsletter) CreatedByFirstName() *string {
	return newsletter.createdByFirstName
}

// SetCreatedByFirstName sets the createdByFirstName.
func (newsletter *Newsletter) SetCreatedByFirstName(createdByFirstName *string) {
	newsletter.createdByFirstName = createdByFirstName
}

// CreatedBySurname returns createdBySurname.
func (newsletter *Newsletter) CreatedBySurname() *string {
	return newsletter.createdBySurname
}

// SetCreatedBySurname sets the createdBySurname.
func (newsletter *Newsletter) SetCreatedBySurname(createdBySurname *string) {
	newsletter.createdBySurname = createdBySurname
}

// UpdatedByFirstName returns updatedByFirstName.
func (newsletter *Newsletter) UpdatedByFirstName() *string {
	return newsletter.updatedByFirstName
}

// SetUpdatedByFirstName sets the updatedByFirstName.
func (newsletter *Newsletter) SetUpdatedByFirstName(updatedByFirstName *string) {
	newsletter.updatedByFirstName = updatedByFirstName
}

// UpdatedBySurname returns updatedBySurname.
func (newsletter *Newsletter) UpdatedBySurname() *string {
	return newsletter.updatedBySurname
}

// SetUpdatedBySurname sets the updatedBySurname.
func (newsletter *Newsletter) SetUpdatedBySurname(updatedBySurname *string) {
	newsletter.updatedBySurname = updatedBySurname
}

// IsUpdated returns true if UpdatedByID is set.
func (newsletter *Newsletter) IsUpdated() bool {
	return newsletter.updatedByID != nil
}

// DomainID returns domainID.
func (newsletter *Newsletter) DomainID() string {
	return newsletter.domainID
}

// SetDomainID sets the domainID.
func (newsletter *Newsletter) SetDomainID(domainID string) {
	newsletter.domainID = domainID
}

// Active returns active.
func (newsletter *Newsletter) Active() bool {
	return newsletter.active
}

// SetActive sets the active.
func (newsletter *Newsletter) SetActive(active bool) {
	newsletter.active = active
}

// SendAt returns sendAt.
func (newsletter *Newsletter) SendAt() *time.Time {
	return newsletter.sendAt
}

// SetSendAt sets the sendAt.
func (newsletter *Newsletter) SetSendAt(sendAt *time.Time) {
	newsletter.sendAt = sendAt
}

func newNewsletter() *Newsletter {
	return &Newsletter{}
}

// New returns a new instance of NewsletterEntity.
func NewNewsletterEntity() NewsletterEntity {
	return newNewsletter()
}

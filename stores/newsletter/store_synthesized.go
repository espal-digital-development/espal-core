// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsletter

import (
	"database/sql"
	"github.com/espal-digital-development/espal-core/database"
	"github.com/juju/errors"
)

var _ Store = &NewslettersStore{}

// Store represents a data interaction object.
type Store interface {
}

func (n *NewslettersStore) fetch(query string, withCreators bool, params ...interface{}) (result []*Newsletter, ok bool, err error) {
	rows, err := n.selecterDatabase.Query(query, params...)
	if err == sql.ErrNoRows {
		err = nil
		return
	}
	if err != nil {
		err = errors.Trace(err)
		return
	}
	defer func(dbRows database.Rows) {
		closeErr := dbRows.Close()
		if err != nil && closeErr != nil {
			err = errors.Wrap(err, closeErr)
		} else if closeErr != nil {
			err = errors.Trace(closeErr)
		}
	}(rows)
	result = make([]*Newsletter, 0)
	for rows.Next() {
		if err := rows.Err(); err != nil {
			return nil, false, errors.Trace(err)
		}
		n := newNewsletter()
		fields := []interface{}{&n.id, &n.createdByID, &n.updatedByID, &n.createdAt, &n.updatedAt, &n.domainID, &n.active, &n.sendAt}
		if withCreators {
			fields = append(fields, &n.createdByFirstName, &n.createdBySurname, &n.updatedByFirstName, &n.updatedBySurname)
		}
		if err := rows.Scan(fields...); err != nil {
			return nil, false, errors.Trace(err)
		}
		result = append(result, n)
	}
	ok = len(result) > 0
	return
}

// New returns a new instance of NewslettersStore.
func New(selecterDatabase database.Database) (*NewslettersStore, error) {
	n := &NewslettersStore{
		selecterDatabase: selecterDatabase,
	}
	return n, nil
}

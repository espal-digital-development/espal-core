// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsletter_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/newsletter"
)

func TestSubscriberTable(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	if subscriber.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSubscriberTableAlias(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	if subscriber.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSubscriberIsUpdated(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	subscriber.IsUpdated()
}

func TestSubscriberID(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	subscriber.ID()
}

func TestSubscriberCreatedByID(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetCreatedByID(testValue)
	if testValue != subscriber.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedByID(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetUpdatedByID(&testValue)
	if &testValue != subscriber.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberCreatedAt(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := time.Now()
	subscriber.SetCreatedAt(testValue)
	if testValue != subscriber.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedAt(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := time.Now()
	subscriber.SetUpdatedAt(&testValue)
	if &testValue != subscriber.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberCreatedByFirstName(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetCreatedByFirstName(&testValue)
	if &testValue != subscriber.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberCreatedBySurname(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetCreatedBySurname(&testValue)
	if &testValue != subscriber.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedByFirstName(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetUpdatedByFirstName(&testValue)
	if &testValue != subscriber.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedBySurname(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetUpdatedBySurname(&testValue)
	if &testValue != subscriber.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberNewsletterID(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetNewsletterID(testValue)
	if testValue != subscriber.NewsletterID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUserID(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetUserID(&testValue)
	if &testValue != subscriber.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberEmail(t *testing.T) {
	subscriber := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	subscriber.SetEmail(&testValue)
	if &testValue != subscriber.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

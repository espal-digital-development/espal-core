// Code generated by espal-store-synthesizer. DO NOT EDIT.
package newsletter_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/newsletter"
)

func TestSubscriberTable(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	if s.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestSubscriberTableAlias(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	if s.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestSubscriberIsUpdated(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	s.IsUpdated()
}

func TestSubscriberID(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	s.ID()
}

func TestSubscriberCreatedByID(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetCreatedByID(testValue)
	if testValue != s.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedByID(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetUpdatedByID(&testValue)
	if &testValue != s.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberCreatedAt(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := time.Now()
	s.SetCreatedAt(testValue)
	if testValue != s.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedAt(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := time.Now()
	s.SetUpdatedAt(&testValue)
	if &testValue != s.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberCreatedByFirstName(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetCreatedByFirstName(&testValue)
	if &testValue != s.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberCreatedBySurname(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetCreatedBySurname(&testValue)
	if &testValue != s.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedByFirstName(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetUpdatedByFirstName(&testValue)
	if &testValue != s.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUpdatedBySurname(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetUpdatedBySurname(&testValue)
	if &testValue != s.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberNewsletterID(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetNewsletterID(testValue)
	if testValue != s.NewsletterID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberUserID(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetUserID(&testValue)
	if &testValue != s.UserID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestSubscriberEmail(t *testing.T) {
	s := newsletter.NewSubscriberEntity()
	testValue := "testValue"
	s.SetEmail(&testValue)
	if &testValue != s.Email() {
		t.Fatal("Getter did not return the Set value")
	}
}

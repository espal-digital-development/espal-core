// Code generated by espal-store-synthesizer. DO NOT EDIT.
package gift_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/gift"
)

func TestWrappingTable(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	if wrapping.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestWrappingTableAlias(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	if wrapping.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestWrappingIsUpdated(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	wrapping.IsUpdated()
}

func TestWrappingID(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	wrapping.ID()
}

func TestWrappingCreatedByID(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := "testValue"
	wrapping.SetCreatedByID(testValue)
	if testValue != wrapping.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingUpdatedByID(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := "testValue"
	wrapping.SetUpdatedByID(&testValue)
	if &testValue != wrapping.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingCreatedAt(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := time.Now()
	wrapping.SetCreatedAt(testValue)
	if testValue != wrapping.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingUpdatedAt(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := time.Now()
	wrapping.SetUpdatedAt(&testValue)
	if &testValue != wrapping.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingCreatedByFirstName(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := "testValue"
	wrapping.SetCreatedByFirstName(&testValue)
	if &testValue != wrapping.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingCreatedBySurname(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := "testValue"
	wrapping.SetCreatedBySurname(&testValue)
	if &testValue != wrapping.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingUpdatedByFirstName(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := "testValue"
	wrapping.SetUpdatedByFirstName(&testValue)
	if &testValue != wrapping.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestWrappingUpdatedBySurname(t *testing.T) {
	wrapping := gift.NewWrappingEntity()
	testValue := "testValue"
	wrapping.SetUpdatedBySurname(&testValue)
	if &testValue != wrapping.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

// Code generated by espal-store-synthesizer. DO NOT EDIT.
package gift_test

import (
	"testing"
	"time"

	"github.com/espal-digital-development/espal-core/stores/gift"
)

func TestGiftTable(t *testing.T) {
	g := gift.NewGiftEntity()
	if g.TableName() == "" {
		t.Fatal("TableName shouldn't be empty")
	}
}

func TestGiftTableAlias(t *testing.T) {
	g := gift.NewGiftEntity()
	if g.TableName() == "" {
		t.Fatal("TableAlias shouldn't be empty")
	}
}

func TestGiftIsUpdated(t *testing.T) {
	g := gift.NewGiftEntity()
	g.IsUpdated()
}

func TestGiftID(t *testing.T) {
	g := gift.NewGiftEntity()
	g.ID()
}

func TestGiftCreatedByID(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := "testValue"
	g.SetCreatedByID(testValue)
	if testValue != g.CreatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftUpdatedByID(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := "testValue"
	g.SetUpdatedByID(&testValue)
	if &testValue != g.UpdatedByID() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftCreatedAt(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := time.Now()
	g.SetCreatedAt(testValue)
	if testValue != g.CreatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftUpdatedAt(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := time.Now()
	g.SetUpdatedAt(&testValue)
	if &testValue != g.UpdatedAt() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftCreatedByFirstName(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := "testValue"
	g.SetCreatedByFirstName(&testValue)
	if &testValue != g.CreatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftCreatedBySurname(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := "testValue"
	g.SetCreatedBySurname(&testValue)
	if &testValue != g.CreatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftUpdatedByFirstName(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := "testValue"
	g.SetUpdatedByFirstName(&testValue)
	if &testValue != g.UpdatedByFirstName() {
		t.Fatal("Getter did not return the Set value")
	}
}

func TestGiftUpdatedBySurname(t *testing.T) {
	g := gift.NewGiftEntity()
	testValue := "testValue"
	g.SetUpdatedBySurname(&testValue)
	if &testValue != g.UpdatedBySurname() {
		t.Fatal("Getter did not return the Set value")
	}
}

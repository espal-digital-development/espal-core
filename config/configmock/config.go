// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package configmock

import (
	"github.com/espal-digital-development/espal-core/config"
	"sync"
	"time"
)

var (
	lockConfigMockAdminURL                           sync.RWMutex
	lockConfigMockAssetsBrotli                       sync.RWMutex
	lockConfigMockAssetsBrotliFiles                  sync.RWMutex
	lockConfigMockAssetsCacheMaxAge                  sync.RWMutex
	lockConfigMockAssetsGZip                         sync.RWMutex
	lockConfigMockAssetsGZipFiles                    sync.RWMutex
	lockConfigMockAvailableLanguages                 sync.RWMutex
	lockConfigMockDatabaseCreator                    sync.RWMutex
	lockConfigMockDatabaseCreatorSSLCertificateFile  sync.RWMutex
	lockConfigMockDatabaseCreatorSSLKeyFile          sync.RWMutex
	lockConfigMockDatabaseDeletor                    sync.RWMutex
	lockConfigMockDatabaseDeletorSSLCertificateFile  sync.RWMutex
	lockConfigMockDatabaseDeletorSSLKeyFile          sync.RWMutex
	lockConfigMockDatabaseHost                       sync.RWMutex
	lockConfigMockDatabaseInserter                   sync.RWMutex
	lockConfigMockDatabaseInserterSSLCertificateFile sync.RWMutex
	lockConfigMockDatabaseInserterSSLKeyFile         sync.RWMutex
	lockConfigMockDatabaseMigrator                   sync.RWMutex
	lockConfigMockDatabaseMigratorSSLCertificateFile sync.RWMutex
	lockConfigMockDatabaseMigratorSSLKeyFile         sync.RWMutex
	lockConfigMockDatabaseName                       sync.RWMutex
	lockConfigMockDatabasePort                       sync.RWMutex
	lockConfigMockDatabaseSSLRootCertificateFile     sync.RWMutex
	lockConfigMockDatabaseSelecter                   sync.RWMutex
	lockConfigMockDatabaseSelecterSSLCertificateFile sync.RWMutex
	lockConfigMockDatabaseSelecterSSLKeyFile         sync.RWMutex
	lockConfigMockDatabaseUpdater                    sync.RWMutex
	lockConfigMockDatabaseUpdaterSSLCertificateFile  sync.RWMutex
	lockConfigMockDatabaseUpdaterSSLKeyFile          sync.RWMutex
	lockConfigMockDefaultLanguage                    sync.RWMutex
	lockConfigMockDevelopment                        sync.RWMutex
	lockConfigMockEmailHost                          sync.RWMutex
	lockConfigMockEmailNoReplyAddress                sync.RWMutex
	lockConfigMockEmailPassword                      sync.RWMutex
	lockConfigMockEmailPort                          sync.RWMutex
	lockConfigMockEmailUsername                      sync.RWMutex
	lockConfigMockImagesAssetsPath                   sync.RWMutex
	lockConfigMockJavaScriptAssetsPath               sync.RWMutex
	lockConfigMockLanguageIsAvailable                sync.RWMutex
	lockConfigMockLanguages                          sync.RWMutex
	lockConfigMockLogging                            sync.RWMutex
	lockConfigMockPprof                              sync.RWMutex
	lockConfigMockPprofURL                           sync.RWMutex
	lockConfigMockPrivateFilesAssetsPath             sync.RWMutex
	lockConfigMockPublicFilesAssetsPath              sync.RWMutex
	lockConfigMockPublicRootFilesAssetsPath          sync.RWMutex
	lockConfigMockSecurityBcryptRounds               sync.RWMutex
	lockConfigMockSecurityFormTokenCleanupInterval   sync.RWMutex
	lockConfigMockSecurityFormTokenLifespan          sync.RWMutex
	lockConfigMockSecurityGlobalAuthentication       sync.RWMutex
	lockConfigMockServerHTTPRedirectPort             sync.RWMutex
	lockConfigMockServerHost                         sync.RWMutex
	lockConfigMockServerPort                         sync.RWMutex
	lockConfigMockServerSSLCertificateFilePath       sync.RWMutex
	lockConfigMockServerSSLKeyFilePath               sync.RWMutex
	lockConfigMockSessionCookieName                  sync.RWMutex
	lockConfigMockSessionExpiration                  sync.RWMutex
	lockConfigMockSessionRememberMeExpiration        sync.RWMutex
	lockConfigMockStylesheetsAssetsPath              sync.RWMutex
	lockConfigMockTranslationsPath                   sync.RWMutex
)

// Ensure, that ConfigMock does implement config.Config.
// If this is not the case, regenerate this file with moq.
var _ config.Config = &ConfigMock{}

// ConfigMock is a mock implementation of config.Config.
//
//     func TestSomethingThatUsesConfig(t *testing.T) {
//
//         // make and configure a mocked config.Config
//         mockedConfig := &ConfigMock{
//             AdminURLFunc: func() string {
// 	               panic("mock out the AdminURL method")
//             },
//             AssetsBrotliFunc: func() bool {
// 	               panic("mock out the AssetsBrotli method")
//             },
//             AssetsBrotliFilesFunc: func() bool {
// 	               panic("mock out the AssetsBrotliFiles method")
//             },
//             AssetsCacheMaxAgeFunc: func() string {
// 	               panic("mock out the AssetsCacheMaxAge method")
//             },
//             AssetsGZipFunc: func() bool {
// 	               panic("mock out the AssetsGZip method")
//             },
//             AssetsGZipFilesFunc: func() bool {
// 	               panic("mock out the AssetsGZipFiles method")
//             },
//             AvailableLanguagesFunc: func() []string {
// 	               panic("mock out the AvailableLanguages method")
//             },
//             DatabaseCreatorFunc: func() string {
// 	               panic("mock out the DatabaseCreator method")
//             },
//             DatabaseCreatorSSLCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseCreatorSSLCertificateFile method")
//             },
//             DatabaseCreatorSSLKeyFileFunc: func() string {
// 	               panic("mock out the DatabaseCreatorSSLKeyFile method")
//             },
//             DatabaseDeletorFunc: func() string {
// 	               panic("mock out the DatabaseDeletor method")
//             },
//             DatabaseDeletorSSLCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseDeletorSSLCertificateFile method")
//             },
//             DatabaseDeletorSSLKeyFileFunc: func() string {
// 	               panic("mock out the DatabaseDeletorSSLKeyFile method")
//             },
//             DatabaseHostFunc: func() string {
// 	               panic("mock out the DatabaseHost method")
//             },
//             DatabaseInserterFunc: func() string {
// 	               panic("mock out the DatabaseInserter method")
//             },
//             DatabaseInserterSSLCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseInserterSSLCertificateFile method")
//             },
//             DatabaseInserterSSLKeyFileFunc: func() string {
// 	               panic("mock out the DatabaseInserterSSLKeyFile method")
//             },
//             DatabaseMigratorFunc: func() string {
// 	               panic("mock out the DatabaseMigrator method")
//             },
//             DatabaseMigratorSSLCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseMigratorSSLCertificateFile method")
//             },
//             DatabaseMigratorSSLKeyFileFunc: func() string {
// 	               panic("mock out the DatabaseMigratorSSLKeyFile method")
//             },
//             DatabaseNameFunc: func() string {
// 	               panic("mock out the DatabaseName method")
//             },
//             DatabasePortFunc: func() int {
// 	               panic("mock out the DatabasePort method")
//             },
//             DatabaseSSLRootCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseSSLRootCertificateFile method")
//             },
//             DatabaseSelecterFunc: func() string {
// 	               panic("mock out the DatabaseSelecter method")
//             },
//             DatabaseSelecterSSLCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseSelecterSSLCertificateFile method")
//             },
//             DatabaseSelecterSSLKeyFileFunc: func() string {
// 	               panic("mock out the DatabaseSelecterSSLKeyFile method")
//             },
//             DatabaseUpdaterFunc: func() string {
// 	               panic("mock out the DatabaseUpdater method")
//             },
//             DatabaseUpdaterSSLCertificateFileFunc: func() string {
// 	               panic("mock out the DatabaseUpdaterSSLCertificateFile method")
//             },
//             DatabaseUpdaterSSLKeyFileFunc: func() string {
// 	               panic("mock out the DatabaseUpdaterSSLKeyFile method")
//             },
//             DefaultLanguageFunc: func() string {
// 	               panic("mock out the DefaultLanguage method")
//             },
//             DevelopmentFunc: func() bool {
// 	               panic("mock out the Development method")
//             },
//             EmailHostFunc: func() string {
// 	               panic("mock out the EmailHost method")
//             },
//             EmailNoReplyAddressFunc: func() string {
// 	               panic("mock out the EmailNoReplyAddress method")
//             },
//             EmailPasswordFunc: func() string {
// 	               panic("mock out the EmailPassword method")
//             },
//             EmailPortFunc: func() int {
// 	               panic("mock out the EmailPort method")
//             },
//             EmailUsernameFunc: func() string {
// 	               panic("mock out the EmailUsername method")
//             },
//             ImagesAssetsPathFunc: func() string {
// 	               panic("mock out the ImagesAssetsPath method")
//             },
//             JavaScriptAssetsPathFunc: func() string {
// 	               panic("mock out the JavaScriptAssetsPath method")
//             },
//             LanguageIsAvailableFunc: func(code string) bool {
// 	               panic("mock out the LanguageIsAvailable method")
//             },
//             LanguagesFunc: func() []string {
// 	               panic("mock out the Languages method")
//             },
//             LoggingFunc: func() bool {
// 	               panic("mock out the Logging method")
//             },
//             PprofFunc: func() bool {
// 	               panic("mock out the Pprof method")
//             },
//             PprofURLFunc: func() string {
// 	               panic("mock out the PprofURL method")
//             },
//             PrivateFilesAssetsPathFunc: func() string {
// 	               panic("mock out the PrivateFilesAssetsPath method")
//             },
//             PublicFilesAssetsPathFunc: func() string {
// 	               panic("mock out the PublicFilesAssetsPath method")
//             },
//             PublicRootFilesAssetsPathFunc: func() string {
// 	               panic("mock out the PublicRootFilesAssetsPath method")
//             },
//             SecurityBcryptRoundsFunc: func() int {
// 	               panic("mock out the SecurityBcryptRounds method")
//             },
//             SecurityFormTokenCleanupIntervalFunc: func() time.Duration {
// 	               panic("mock out the SecurityFormTokenCleanupInterval method")
//             },
//             SecurityFormTokenLifespanFunc: func() time.Duration {
// 	               panic("mock out the SecurityFormTokenLifespan method")
//             },
//             SecurityGlobalAuthenticationFunc: func() bool {
// 	               panic("mock out the SecurityGlobalAuthentication method")
//             },
//             ServerHTTPRedirectPortFunc: func() int {
// 	               panic("mock out the ServerHTTPRedirectPort method")
//             },
//             ServerHostFunc: func() string {
// 	               panic("mock out the ServerHost method")
//             },
//             ServerPortFunc: func() int {
// 	               panic("mock out the ServerPort method")
//             },
//             ServerSSLCertificateFilePathFunc: func() string {
// 	               panic("mock out the ServerSSLCertificateFilePath method")
//             },
//             ServerSSLKeyFilePathFunc: func() string {
// 	               panic("mock out the ServerSSLKeyFilePath method")
//             },
//             SessionCookieNameFunc: func() string {
// 	               panic("mock out the SessionCookieName method")
//             },
//             SessionExpirationFunc: func() time.Duration {
// 	               panic("mock out the SessionExpiration method")
//             },
//             SessionRememberMeExpirationFunc: func() time.Duration {
// 	               panic("mock out the SessionRememberMeExpiration method")
//             },
//             StylesheetsAssetsPathFunc: func() string {
// 	               panic("mock out the StylesheetsAssetsPath method")
//             },
//             TranslationsPathFunc: func() string {
// 	               panic("mock out the TranslationsPath method")
//             },
//         }
//
//         // use mockedConfig in code that requires config.Config
//         // and then make assertions.
//
//     }
type ConfigMock struct {
	// AdminURLFunc mocks the AdminURL method.
	AdminURLFunc func() string

	// AssetsBrotliFunc mocks the AssetsBrotli method.
	AssetsBrotliFunc func() bool

	// AssetsBrotliFilesFunc mocks the AssetsBrotliFiles method.
	AssetsBrotliFilesFunc func() bool

	// AssetsCacheMaxAgeFunc mocks the AssetsCacheMaxAge method.
	AssetsCacheMaxAgeFunc func() string

	// AssetsGZipFunc mocks the AssetsGZip method.
	AssetsGZipFunc func() bool

	// AssetsGZipFilesFunc mocks the AssetsGZipFiles method.
	AssetsGZipFilesFunc func() bool

	// AvailableLanguagesFunc mocks the AvailableLanguages method.
	AvailableLanguagesFunc func() []string

	// DatabaseCreatorFunc mocks the DatabaseCreator method.
	DatabaseCreatorFunc func() string

	// DatabaseCreatorSSLCertificateFileFunc mocks the DatabaseCreatorSSLCertificateFile method.
	DatabaseCreatorSSLCertificateFileFunc func() string

	// DatabaseCreatorSSLKeyFileFunc mocks the DatabaseCreatorSSLKeyFile method.
	DatabaseCreatorSSLKeyFileFunc func() string

	// DatabaseDeletorFunc mocks the DatabaseDeletor method.
	DatabaseDeletorFunc func() string

	// DatabaseDeletorSSLCertificateFileFunc mocks the DatabaseDeletorSSLCertificateFile method.
	DatabaseDeletorSSLCertificateFileFunc func() string

	// DatabaseDeletorSSLKeyFileFunc mocks the DatabaseDeletorSSLKeyFile method.
	DatabaseDeletorSSLKeyFileFunc func() string

	// DatabaseHostFunc mocks the DatabaseHost method.
	DatabaseHostFunc func() string

	// DatabaseInserterFunc mocks the DatabaseInserter method.
	DatabaseInserterFunc func() string

	// DatabaseInserterSSLCertificateFileFunc mocks the DatabaseInserterSSLCertificateFile method.
	DatabaseInserterSSLCertificateFileFunc func() string

	// DatabaseInserterSSLKeyFileFunc mocks the DatabaseInserterSSLKeyFile method.
	DatabaseInserterSSLKeyFileFunc func() string

	// DatabaseMigratorFunc mocks the DatabaseMigrator method.
	DatabaseMigratorFunc func() string

	// DatabaseMigratorSSLCertificateFileFunc mocks the DatabaseMigratorSSLCertificateFile method.
	DatabaseMigratorSSLCertificateFileFunc func() string

	// DatabaseMigratorSSLKeyFileFunc mocks the DatabaseMigratorSSLKeyFile method.
	DatabaseMigratorSSLKeyFileFunc func() string

	// DatabaseNameFunc mocks the DatabaseName method.
	DatabaseNameFunc func() string

	// DatabasePortFunc mocks the DatabasePort method.
	DatabasePortFunc func() int

	// DatabaseSSLRootCertificateFileFunc mocks the DatabaseSSLRootCertificateFile method.
	DatabaseSSLRootCertificateFileFunc func() string

	// DatabaseSelecterFunc mocks the DatabaseSelecter method.
	DatabaseSelecterFunc func() string

	// DatabaseSelecterSSLCertificateFileFunc mocks the DatabaseSelecterSSLCertificateFile method.
	DatabaseSelecterSSLCertificateFileFunc func() string

	// DatabaseSelecterSSLKeyFileFunc mocks the DatabaseSelecterSSLKeyFile method.
	DatabaseSelecterSSLKeyFileFunc func() string

	// DatabaseUpdaterFunc mocks the DatabaseUpdater method.
	DatabaseUpdaterFunc func() string

	// DatabaseUpdaterSSLCertificateFileFunc mocks the DatabaseUpdaterSSLCertificateFile method.
	DatabaseUpdaterSSLCertificateFileFunc func() string

	// DatabaseUpdaterSSLKeyFileFunc mocks the DatabaseUpdaterSSLKeyFile method.
	DatabaseUpdaterSSLKeyFileFunc func() string

	// DefaultLanguageFunc mocks the DefaultLanguage method.
	DefaultLanguageFunc func() string

	// DevelopmentFunc mocks the Development method.
	DevelopmentFunc func() bool

	// EmailHostFunc mocks the EmailHost method.
	EmailHostFunc func() string

	// EmailNoReplyAddressFunc mocks the EmailNoReplyAddress method.
	EmailNoReplyAddressFunc func() string

	// EmailPasswordFunc mocks the EmailPassword method.
	EmailPasswordFunc func() string

	// EmailPortFunc mocks the EmailPort method.
	EmailPortFunc func() int

	// EmailUsernameFunc mocks the EmailUsername method.
	EmailUsernameFunc func() string

	// ImagesAssetsPathFunc mocks the ImagesAssetsPath method.
	ImagesAssetsPathFunc func() string

	// JavaScriptAssetsPathFunc mocks the JavaScriptAssetsPath method.
	JavaScriptAssetsPathFunc func() string

	// LanguageIsAvailableFunc mocks the LanguageIsAvailable method.
	LanguageIsAvailableFunc func(code string) bool

	// LanguagesFunc mocks the Languages method.
	LanguagesFunc func() []string

	// LoggingFunc mocks the Logging method.
	LoggingFunc func() bool

	// PprofFunc mocks the Pprof method.
	PprofFunc func() bool

	// PprofURLFunc mocks the PprofURL method.
	PprofURLFunc func() string

	// PrivateFilesAssetsPathFunc mocks the PrivateFilesAssetsPath method.
	PrivateFilesAssetsPathFunc func() string

	// PublicFilesAssetsPathFunc mocks the PublicFilesAssetsPath method.
	PublicFilesAssetsPathFunc func() string

	// PublicRootFilesAssetsPathFunc mocks the PublicRootFilesAssetsPath method.
	PublicRootFilesAssetsPathFunc func() string

	// SecurityBcryptRoundsFunc mocks the SecurityBcryptRounds method.
	SecurityBcryptRoundsFunc func() int

	// SecurityFormTokenCleanupIntervalFunc mocks the SecurityFormTokenCleanupInterval method.
	SecurityFormTokenCleanupIntervalFunc func() time.Duration

	// SecurityFormTokenLifespanFunc mocks the SecurityFormTokenLifespan method.
	SecurityFormTokenLifespanFunc func() time.Duration

	// SecurityGlobalAuthenticationFunc mocks the SecurityGlobalAuthentication method.
	SecurityGlobalAuthenticationFunc func() bool

	// ServerHTTPRedirectPortFunc mocks the ServerHTTPRedirectPort method.
	ServerHTTPRedirectPortFunc func() int

	// ServerHostFunc mocks the ServerHost method.
	ServerHostFunc func() string

	// ServerPortFunc mocks the ServerPort method.
	ServerPortFunc func() int

	// ServerSSLCertificateFilePathFunc mocks the ServerSSLCertificateFilePath method.
	ServerSSLCertificateFilePathFunc func() string

	// ServerSSLKeyFilePathFunc mocks the ServerSSLKeyFilePath method.
	ServerSSLKeyFilePathFunc func() string

	// SessionCookieNameFunc mocks the SessionCookieName method.
	SessionCookieNameFunc func() string

	// SessionExpirationFunc mocks the SessionExpiration method.
	SessionExpirationFunc func() time.Duration

	// SessionRememberMeExpirationFunc mocks the SessionRememberMeExpiration method.
	SessionRememberMeExpirationFunc func() time.Duration

	// StylesheetsAssetsPathFunc mocks the StylesheetsAssetsPath method.
	StylesheetsAssetsPathFunc func() string

	// TranslationsPathFunc mocks the TranslationsPath method.
	TranslationsPathFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// AdminURL holds details about calls to the AdminURL method.
		AdminURL []struct {
		}
		// AssetsBrotli holds details about calls to the AssetsBrotli method.
		AssetsBrotli []struct {
		}
		// AssetsBrotliFiles holds details about calls to the AssetsBrotliFiles method.
		AssetsBrotliFiles []struct {
		}
		// AssetsCacheMaxAge holds details about calls to the AssetsCacheMaxAge method.
		AssetsCacheMaxAge []struct {
		}
		// AssetsGZip holds details about calls to the AssetsGZip method.
		AssetsGZip []struct {
		}
		// AssetsGZipFiles holds details about calls to the AssetsGZipFiles method.
		AssetsGZipFiles []struct {
		}
		// AvailableLanguages holds details about calls to the AvailableLanguages method.
		AvailableLanguages []struct {
		}
		// DatabaseCreator holds details about calls to the DatabaseCreator method.
		DatabaseCreator []struct {
		}
		// DatabaseCreatorSSLCertificateFile holds details about calls to the DatabaseCreatorSSLCertificateFile method.
		DatabaseCreatorSSLCertificateFile []struct {
		}
		// DatabaseCreatorSSLKeyFile holds details about calls to the DatabaseCreatorSSLKeyFile method.
		DatabaseCreatorSSLKeyFile []struct {
		}
		// DatabaseDeletor holds details about calls to the DatabaseDeletor method.
		DatabaseDeletor []struct {
		}
		// DatabaseDeletorSSLCertificateFile holds details about calls to the DatabaseDeletorSSLCertificateFile method.
		DatabaseDeletorSSLCertificateFile []struct {
		}
		// DatabaseDeletorSSLKeyFile holds details about calls to the DatabaseDeletorSSLKeyFile method.
		DatabaseDeletorSSLKeyFile []struct {
		}
		// DatabaseHost holds details about calls to the DatabaseHost method.
		DatabaseHost []struct {
		}
		// DatabaseInserter holds details about calls to the DatabaseInserter method.
		DatabaseInserter []struct {
		}
		// DatabaseInserterSSLCertificateFile holds details about calls to the DatabaseInserterSSLCertificateFile method.
		DatabaseInserterSSLCertificateFile []struct {
		}
		// DatabaseInserterSSLKeyFile holds details about calls to the DatabaseInserterSSLKeyFile method.
		DatabaseInserterSSLKeyFile []struct {
		}
		// DatabaseMigrator holds details about calls to the DatabaseMigrator method.
		DatabaseMigrator []struct {
		}
		// DatabaseMigratorSSLCertificateFile holds details about calls to the DatabaseMigratorSSLCertificateFile method.
		DatabaseMigratorSSLCertificateFile []struct {
		}
		// DatabaseMigratorSSLKeyFile holds details about calls to the DatabaseMigratorSSLKeyFile method.
		DatabaseMigratorSSLKeyFile []struct {
		}
		// DatabaseName holds details about calls to the DatabaseName method.
		DatabaseName []struct {
		}
		// DatabasePort holds details about calls to the DatabasePort method.
		DatabasePort []struct {
		}
		// DatabaseSSLRootCertificateFile holds details about calls to the DatabaseSSLRootCertificateFile method.
		DatabaseSSLRootCertificateFile []struct {
		}
		// DatabaseSelecter holds details about calls to the DatabaseSelecter method.
		DatabaseSelecter []struct {
		}
		// DatabaseSelecterSSLCertificateFile holds details about calls to the DatabaseSelecterSSLCertificateFile method.
		DatabaseSelecterSSLCertificateFile []struct {
		}
		// DatabaseSelecterSSLKeyFile holds details about calls to the DatabaseSelecterSSLKeyFile method.
		DatabaseSelecterSSLKeyFile []struct {
		}
		// DatabaseUpdater holds details about calls to the DatabaseUpdater method.
		DatabaseUpdater []struct {
		}
		// DatabaseUpdaterSSLCertificateFile holds details about calls to the DatabaseUpdaterSSLCertificateFile method.
		DatabaseUpdaterSSLCertificateFile []struct {
		}
		// DatabaseUpdaterSSLKeyFile holds details about calls to the DatabaseUpdaterSSLKeyFile method.
		DatabaseUpdaterSSLKeyFile []struct {
		}
		// DefaultLanguage holds details about calls to the DefaultLanguage method.
		DefaultLanguage []struct {
		}
		// Development holds details about calls to the Development method.
		Development []struct {
		}
		// EmailHost holds details about calls to the EmailHost method.
		EmailHost []struct {
		}
		// EmailNoReplyAddress holds details about calls to the EmailNoReplyAddress method.
		EmailNoReplyAddress []struct {
		}
		// EmailPassword holds details about calls to the EmailPassword method.
		EmailPassword []struct {
		}
		// EmailPort holds details about calls to the EmailPort method.
		EmailPort []struct {
		}
		// EmailUsername holds details about calls to the EmailUsername method.
		EmailUsername []struct {
		}
		// ImagesAssetsPath holds details about calls to the ImagesAssetsPath method.
		ImagesAssetsPath []struct {
		}
		// JavaScriptAssetsPath holds details about calls to the JavaScriptAssetsPath method.
		JavaScriptAssetsPath []struct {
		}
		// LanguageIsAvailable holds details about calls to the LanguageIsAvailable method.
		LanguageIsAvailable []struct {
			// Code is the code argument value.
			Code string
		}
		// Languages holds details about calls to the Languages method.
		Languages []struct {
		}
		// Logging holds details about calls to the Logging method.
		Logging []struct {
		}
		// Pprof holds details about calls to the Pprof method.
		Pprof []struct {
		}
		// PprofURL holds details about calls to the PprofURL method.
		PprofURL []struct {
		}
		// PrivateFilesAssetsPath holds details about calls to the PrivateFilesAssetsPath method.
		PrivateFilesAssetsPath []struct {
		}
		// PublicFilesAssetsPath holds details about calls to the PublicFilesAssetsPath method.
		PublicFilesAssetsPath []struct {
		}
		// PublicRootFilesAssetsPath holds details about calls to the PublicRootFilesAssetsPath method.
		PublicRootFilesAssetsPath []struct {
		}
		// SecurityBcryptRounds holds details about calls to the SecurityBcryptRounds method.
		SecurityBcryptRounds []struct {
		}
		// SecurityFormTokenCleanupInterval holds details about calls to the SecurityFormTokenCleanupInterval method.
		SecurityFormTokenCleanupInterval []struct {
		}
		// SecurityFormTokenLifespan holds details about calls to the SecurityFormTokenLifespan method.
		SecurityFormTokenLifespan []struct {
		}
		// SecurityGlobalAuthentication holds details about calls to the SecurityGlobalAuthentication method.
		SecurityGlobalAuthentication []struct {
		}
		// ServerHTTPRedirectPort holds details about calls to the ServerHTTPRedirectPort method.
		ServerHTTPRedirectPort []struct {
		}
		// ServerHost holds details about calls to the ServerHost method.
		ServerHost []struct {
		}
		// ServerPort holds details about calls to the ServerPort method.
		ServerPort []struct {
		}
		// ServerSSLCertificateFilePath holds details about calls to the ServerSSLCertificateFilePath method.
		ServerSSLCertificateFilePath []struct {
		}
		// ServerSSLKeyFilePath holds details about calls to the ServerSSLKeyFilePath method.
		ServerSSLKeyFilePath []struct {
		}
		// SessionCookieName holds details about calls to the SessionCookieName method.
		SessionCookieName []struct {
		}
		// SessionExpiration holds details about calls to the SessionExpiration method.
		SessionExpiration []struct {
		}
		// SessionRememberMeExpiration holds details about calls to the SessionRememberMeExpiration method.
		SessionRememberMeExpiration []struct {
		}
		// StylesheetsAssetsPath holds details about calls to the StylesheetsAssetsPath method.
		StylesheetsAssetsPath []struct {
		}
		// TranslationsPath holds details about calls to the TranslationsPath method.
		TranslationsPath []struct {
		}
	}
}

// AdminURL calls AdminURLFunc.
func (mock *ConfigMock) AdminURL() string {
	if mock.AdminURLFunc == nil {
		panic("ConfigMock.AdminURLFunc: method is nil but Config.AdminURL was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAdminURL.Lock()
	mock.calls.AdminURL = append(mock.calls.AdminURL, callInfo)
	lockConfigMockAdminURL.Unlock()
	return mock.AdminURLFunc()
}

// AdminURLCalls gets all the calls that were made to AdminURL.
// Check the length with:
//     len(mockedConfig.AdminURLCalls())
func (mock *ConfigMock) AdminURLCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAdminURL.RLock()
	calls = mock.calls.AdminURL
	lockConfigMockAdminURL.RUnlock()
	return calls
}

// AssetsBrotli calls AssetsBrotliFunc.
func (mock *ConfigMock) AssetsBrotli() bool {
	if mock.AssetsBrotliFunc == nil {
		panic("ConfigMock.AssetsBrotliFunc: method is nil but Config.AssetsBrotli was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAssetsBrotli.Lock()
	mock.calls.AssetsBrotli = append(mock.calls.AssetsBrotli, callInfo)
	lockConfigMockAssetsBrotli.Unlock()
	return mock.AssetsBrotliFunc()
}

// AssetsBrotliCalls gets all the calls that were made to AssetsBrotli.
// Check the length with:
//     len(mockedConfig.AssetsBrotliCalls())
func (mock *ConfigMock) AssetsBrotliCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAssetsBrotli.RLock()
	calls = mock.calls.AssetsBrotli
	lockConfigMockAssetsBrotli.RUnlock()
	return calls
}

// AssetsBrotliFiles calls AssetsBrotliFilesFunc.
func (mock *ConfigMock) AssetsBrotliFiles() bool {
	if mock.AssetsBrotliFilesFunc == nil {
		panic("ConfigMock.AssetsBrotliFilesFunc: method is nil but Config.AssetsBrotliFiles was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAssetsBrotliFiles.Lock()
	mock.calls.AssetsBrotliFiles = append(mock.calls.AssetsBrotliFiles, callInfo)
	lockConfigMockAssetsBrotliFiles.Unlock()
	return mock.AssetsBrotliFilesFunc()
}

// AssetsBrotliFilesCalls gets all the calls that were made to AssetsBrotliFiles.
// Check the length with:
//     len(mockedConfig.AssetsBrotliFilesCalls())
func (mock *ConfigMock) AssetsBrotliFilesCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAssetsBrotliFiles.RLock()
	calls = mock.calls.AssetsBrotliFiles
	lockConfigMockAssetsBrotliFiles.RUnlock()
	return calls
}

// AssetsCacheMaxAge calls AssetsCacheMaxAgeFunc.
func (mock *ConfigMock) AssetsCacheMaxAge() string {
	if mock.AssetsCacheMaxAgeFunc == nil {
		panic("ConfigMock.AssetsCacheMaxAgeFunc: method is nil but Config.AssetsCacheMaxAge was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAssetsCacheMaxAge.Lock()
	mock.calls.AssetsCacheMaxAge = append(mock.calls.AssetsCacheMaxAge, callInfo)
	lockConfigMockAssetsCacheMaxAge.Unlock()
	return mock.AssetsCacheMaxAgeFunc()
}

// AssetsCacheMaxAgeCalls gets all the calls that were made to AssetsCacheMaxAge.
// Check the length with:
//     len(mockedConfig.AssetsCacheMaxAgeCalls())
func (mock *ConfigMock) AssetsCacheMaxAgeCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAssetsCacheMaxAge.RLock()
	calls = mock.calls.AssetsCacheMaxAge
	lockConfigMockAssetsCacheMaxAge.RUnlock()
	return calls
}

// AssetsGZip calls AssetsGZipFunc.
func (mock *ConfigMock) AssetsGZip() bool {
	if mock.AssetsGZipFunc == nil {
		panic("ConfigMock.AssetsGZipFunc: method is nil but Config.AssetsGZip was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAssetsGZip.Lock()
	mock.calls.AssetsGZip = append(mock.calls.AssetsGZip, callInfo)
	lockConfigMockAssetsGZip.Unlock()
	return mock.AssetsGZipFunc()
}

// AssetsGZipCalls gets all the calls that were made to AssetsGZip.
// Check the length with:
//     len(mockedConfig.AssetsGZipCalls())
func (mock *ConfigMock) AssetsGZipCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAssetsGZip.RLock()
	calls = mock.calls.AssetsGZip
	lockConfigMockAssetsGZip.RUnlock()
	return calls
}

// AssetsGZipFiles calls AssetsGZipFilesFunc.
func (mock *ConfigMock) AssetsGZipFiles() bool {
	if mock.AssetsGZipFilesFunc == nil {
		panic("ConfigMock.AssetsGZipFilesFunc: method is nil but Config.AssetsGZipFiles was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAssetsGZipFiles.Lock()
	mock.calls.AssetsGZipFiles = append(mock.calls.AssetsGZipFiles, callInfo)
	lockConfigMockAssetsGZipFiles.Unlock()
	return mock.AssetsGZipFilesFunc()
}

// AssetsGZipFilesCalls gets all the calls that were made to AssetsGZipFiles.
// Check the length with:
//     len(mockedConfig.AssetsGZipFilesCalls())
func (mock *ConfigMock) AssetsGZipFilesCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAssetsGZipFiles.RLock()
	calls = mock.calls.AssetsGZipFiles
	lockConfigMockAssetsGZipFiles.RUnlock()
	return calls
}

// AvailableLanguages calls AvailableLanguagesFunc.
func (mock *ConfigMock) AvailableLanguages() []string {
	if mock.AvailableLanguagesFunc == nil {
		panic("ConfigMock.AvailableLanguagesFunc: method is nil but Config.AvailableLanguages was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockAvailableLanguages.Lock()
	mock.calls.AvailableLanguages = append(mock.calls.AvailableLanguages, callInfo)
	lockConfigMockAvailableLanguages.Unlock()
	return mock.AvailableLanguagesFunc()
}

// AvailableLanguagesCalls gets all the calls that were made to AvailableLanguages.
// Check the length with:
//     len(mockedConfig.AvailableLanguagesCalls())
func (mock *ConfigMock) AvailableLanguagesCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockAvailableLanguages.RLock()
	calls = mock.calls.AvailableLanguages
	lockConfigMockAvailableLanguages.RUnlock()
	return calls
}

// DatabaseCreator calls DatabaseCreatorFunc.
func (mock *ConfigMock) DatabaseCreator() string {
	if mock.DatabaseCreatorFunc == nil {
		panic("ConfigMock.DatabaseCreatorFunc: method is nil but Config.DatabaseCreator was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseCreator.Lock()
	mock.calls.DatabaseCreator = append(mock.calls.DatabaseCreator, callInfo)
	lockConfigMockDatabaseCreator.Unlock()
	return mock.DatabaseCreatorFunc()
}

// DatabaseCreatorCalls gets all the calls that were made to DatabaseCreator.
// Check the length with:
//     len(mockedConfig.DatabaseCreatorCalls())
func (mock *ConfigMock) DatabaseCreatorCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseCreator.RLock()
	calls = mock.calls.DatabaseCreator
	lockConfigMockDatabaseCreator.RUnlock()
	return calls
}

// DatabaseCreatorSSLCertificateFile calls DatabaseCreatorSSLCertificateFileFunc.
func (mock *ConfigMock) DatabaseCreatorSSLCertificateFile() string {
	if mock.DatabaseCreatorSSLCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseCreatorSSLCertificateFileFunc: method is nil but Config.DatabaseCreatorSSLCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseCreatorSSLCertificateFile.Lock()
	mock.calls.DatabaseCreatorSSLCertificateFile = append(mock.calls.DatabaseCreatorSSLCertificateFile, callInfo)
	lockConfigMockDatabaseCreatorSSLCertificateFile.Unlock()
	return mock.DatabaseCreatorSSLCertificateFileFunc()
}

// DatabaseCreatorSSLCertificateFileCalls gets all the calls that were made to DatabaseCreatorSSLCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseCreatorSSLCertificateFileCalls())
func (mock *ConfigMock) DatabaseCreatorSSLCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseCreatorSSLCertificateFile.RLock()
	calls = mock.calls.DatabaseCreatorSSLCertificateFile
	lockConfigMockDatabaseCreatorSSLCertificateFile.RUnlock()
	return calls
}

// DatabaseCreatorSSLKeyFile calls DatabaseCreatorSSLKeyFileFunc.
func (mock *ConfigMock) DatabaseCreatorSSLKeyFile() string {
	if mock.DatabaseCreatorSSLKeyFileFunc == nil {
		panic("ConfigMock.DatabaseCreatorSSLKeyFileFunc: method is nil but Config.DatabaseCreatorSSLKeyFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseCreatorSSLKeyFile.Lock()
	mock.calls.DatabaseCreatorSSLKeyFile = append(mock.calls.DatabaseCreatorSSLKeyFile, callInfo)
	lockConfigMockDatabaseCreatorSSLKeyFile.Unlock()
	return mock.DatabaseCreatorSSLKeyFileFunc()
}

// DatabaseCreatorSSLKeyFileCalls gets all the calls that were made to DatabaseCreatorSSLKeyFile.
// Check the length with:
//     len(mockedConfig.DatabaseCreatorSSLKeyFileCalls())
func (mock *ConfigMock) DatabaseCreatorSSLKeyFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseCreatorSSLKeyFile.RLock()
	calls = mock.calls.DatabaseCreatorSSLKeyFile
	lockConfigMockDatabaseCreatorSSLKeyFile.RUnlock()
	return calls
}

// DatabaseDeletor calls DatabaseDeletorFunc.
func (mock *ConfigMock) DatabaseDeletor() string {
	if mock.DatabaseDeletorFunc == nil {
		panic("ConfigMock.DatabaseDeletorFunc: method is nil but Config.DatabaseDeletor was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseDeletor.Lock()
	mock.calls.DatabaseDeletor = append(mock.calls.DatabaseDeletor, callInfo)
	lockConfigMockDatabaseDeletor.Unlock()
	return mock.DatabaseDeletorFunc()
}

// DatabaseDeletorCalls gets all the calls that were made to DatabaseDeletor.
// Check the length with:
//     len(mockedConfig.DatabaseDeletorCalls())
func (mock *ConfigMock) DatabaseDeletorCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseDeletor.RLock()
	calls = mock.calls.DatabaseDeletor
	lockConfigMockDatabaseDeletor.RUnlock()
	return calls
}

// DatabaseDeletorSSLCertificateFile calls DatabaseDeletorSSLCertificateFileFunc.
func (mock *ConfigMock) DatabaseDeletorSSLCertificateFile() string {
	if mock.DatabaseDeletorSSLCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseDeletorSSLCertificateFileFunc: method is nil but Config.DatabaseDeletorSSLCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseDeletorSSLCertificateFile.Lock()
	mock.calls.DatabaseDeletorSSLCertificateFile = append(mock.calls.DatabaseDeletorSSLCertificateFile, callInfo)
	lockConfigMockDatabaseDeletorSSLCertificateFile.Unlock()
	return mock.DatabaseDeletorSSLCertificateFileFunc()
}

// DatabaseDeletorSSLCertificateFileCalls gets all the calls that were made to DatabaseDeletorSSLCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseDeletorSSLCertificateFileCalls())
func (mock *ConfigMock) DatabaseDeletorSSLCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseDeletorSSLCertificateFile.RLock()
	calls = mock.calls.DatabaseDeletorSSLCertificateFile
	lockConfigMockDatabaseDeletorSSLCertificateFile.RUnlock()
	return calls
}

// DatabaseDeletorSSLKeyFile calls DatabaseDeletorSSLKeyFileFunc.
func (mock *ConfigMock) DatabaseDeletorSSLKeyFile() string {
	if mock.DatabaseDeletorSSLKeyFileFunc == nil {
		panic("ConfigMock.DatabaseDeletorSSLKeyFileFunc: method is nil but Config.DatabaseDeletorSSLKeyFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseDeletorSSLKeyFile.Lock()
	mock.calls.DatabaseDeletorSSLKeyFile = append(mock.calls.DatabaseDeletorSSLKeyFile, callInfo)
	lockConfigMockDatabaseDeletorSSLKeyFile.Unlock()
	return mock.DatabaseDeletorSSLKeyFileFunc()
}

// DatabaseDeletorSSLKeyFileCalls gets all the calls that were made to DatabaseDeletorSSLKeyFile.
// Check the length with:
//     len(mockedConfig.DatabaseDeletorSSLKeyFileCalls())
func (mock *ConfigMock) DatabaseDeletorSSLKeyFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseDeletorSSLKeyFile.RLock()
	calls = mock.calls.DatabaseDeletorSSLKeyFile
	lockConfigMockDatabaseDeletorSSLKeyFile.RUnlock()
	return calls
}

// DatabaseHost calls DatabaseHostFunc.
func (mock *ConfigMock) DatabaseHost() string {
	if mock.DatabaseHostFunc == nil {
		panic("ConfigMock.DatabaseHostFunc: method is nil but Config.DatabaseHost was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseHost.Lock()
	mock.calls.DatabaseHost = append(mock.calls.DatabaseHost, callInfo)
	lockConfigMockDatabaseHost.Unlock()
	return mock.DatabaseHostFunc()
}

// DatabaseHostCalls gets all the calls that were made to DatabaseHost.
// Check the length with:
//     len(mockedConfig.DatabaseHostCalls())
func (mock *ConfigMock) DatabaseHostCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseHost.RLock()
	calls = mock.calls.DatabaseHost
	lockConfigMockDatabaseHost.RUnlock()
	return calls
}

// DatabaseInserter calls DatabaseInserterFunc.
func (mock *ConfigMock) DatabaseInserter() string {
	if mock.DatabaseInserterFunc == nil {
		panic("ConfigMock.DatabaseInserterFunc: method is nil but Config.DatabaseInserter was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseInserter.Lock()
	mock.calls.DatabaseInserter = append(mock.calls.DatabaseInserter, callInfo)
	lockConfigMockDatabaseInserter.Unlock()
	return mock.DatabaseInserterFunc()
}

// DatabaseInserterCalls gets all the calls that were made to DatabaseInserter.
// Check the length with:
//     len(mockedConfig.DatabaseInserterCalls())
func (mock *ConfigMock) DatabaseInserterCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseInserter.RLock()
	calls = mock.calls.DatabaseInserter
	lockConfigMockDatabaseInserter.RUnlock()
	return calls
}

// DatabaseInserterSSLCertificateFile calls DatabaseInserterSSLCertificateFileFunc.
func (mock *ConfigMock) DatabaseInserterSSLCertificateFile() string {
	if mock.DatabaseInserterSSLCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseInserterSSLCertificateFileFunc: method is nil but Config.DatabaseInserterSSLCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseInserterSSLCertificateFile.Lock()
	mock.calls.DatabaseInserterSSLCertificateFile = append(mock.calls.DatabaseInserterSSLCertificateFile, callInfo)
	lockConfigMockDatabaseInserterSSLCertificateFile.Unlock()
	return mock.DatabaseInserterSSLCertificateFileFunc()
}

// DatabaseInserterSSLCertificateFileCalls gets all the calls that were made to DatabaseInserterSSLCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseInserterSSLCertificateFileCalls())
func (mock *ConfigMock) DatabaseInserterSSLCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseInserterSSLCertificateFile.RLock()
	calls = mock.calls.DatabaseInserterSSLCertificateFile
	lockConfigMockDatabaseInserterSSLCertificateFile.RUnlock()
	return calls
}

// DatabaseInserterSSLKeyFile calls DatabaseInserterSSLKeyFileFunc.
func (mock *ConfigMock) DatabaseInserterSSLKeyFile() string {
	if mock.DatabaseInserterSSLKeyFileFunc == nil {
		panic("ConfigMock.DatabaseInserterSSLKeyFileFunc: method is nil but Config.DatabaseInserterSSLKeyFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseInserterSSLKeyFile.Lock()
	mock.calls.DatabaseInserterSSLKeyFile = append(mock.calls.DatabaseInserterSSLKeyFile, callInfo)
	lockConfigMockDatabaseInserterSSLKeyFile.Unlock()
	return mock.DatabaseInserterSSLKeyFileFunc()
}

// DatabaseInserterSSLKeyFileCalls gets all the calls that were made to DatabaseInserterSSLKeyFile.
// Check the length with:
//     len(mockedConfig.DatabaseInserterSSLKeyFileCalls())
func (mock *ConfigMock) DatabaseInserterSSLKeyFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseInserterSSLKeyFile.RLock()
	calls = mock.calls.DatabaseInserterSSLKeyFile
	lockConfigMockDatabaseInserterSSLKeyFile.RUnlock()
	return calls
}

// DatabaseMigrator calls DatabaseMigratorFunc.
func (mock *ConfigMock) DatabaseMigrator() string {
	if mock.DatabaseMigratorFunc == nil {
		panic("ConfigMock.DatabaseMigratorFunc: method is nil but Config.DatabaseMigrator was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseMigrator.Lock()
	mock.calls.DatabaseMigrator = append(mock.calls.DatabaseMigrator, callInfo)
	lockConfigMockDatabaseMigrator.Unlock()
	return mock.DatabaseMigratorFunc()
}

// DatabaseMigratorCalls gets all the calls that were made to DatabaseMigrator.
// Check the length with:
//     len(mockedConfig.DatabaseMigratorCalls())
func (mock *ConfigMock) DatabaseMigratorCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseMigrator.RLock()
	calls = mock.calls.DatabaseMigrator
	lockConfigMockDatabaseMigrator.RUnlock()
	return calls
}

// DatabaseMigratorSSLCertificateFile calls DatabaseMigratorSSLCertificateFileFunc.
func (mock *ConfigMock) DatabaseMigratorSSLCertificateFile() string {
	if mock.DatabaseMigratorSSLCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseMigratorSSLCertificateFileFunc: method is nil but Config.DatabaseMigratorSSLCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseMigratorSSLCertificateFile.Lock()
	mock.calls.DatabaseMigratorSSLCertificateFile = append(mock.calls.DatabaseMigratorSSLCertificateFile, callInfo)
	lockConfigMockDatabaseMigratorSSLCertificateFile.Unlock()
	return mock.DatabaseMigratorSSLCertificateFileFunc()
}

// DatabaseMigratorSSLCertificateFileCalls gets all the calls that were made to DatabaseMigratorSSLCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseMigratorSSLCertificateFileCalls())
func (mock *ConfigMock) DatabaseMigratorSSLCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseMigratorSSLCertificateFile.RLock()
	calls = mock.calls.DatabaseMigratorSSLCertificateFile
	lockConfigMockDatabaseMigratorSSLCertificateFile.RUnlock()
	return calls
}

// DatabaseMigratorSSLKeyFile calls DatabaseMigratorSSLKeyFileFunc.
func (mock *ConfigMock) DatabaseMigratorSSLKeyFile() string {
	if mock.DatabaseMigratorSSLKeyFileFunc == nil {
		panic("ConfigMock.DatabaseMigratorSSLKeyFileFunc: method is nil but Config.DatabaseMigratorSSLKeyFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseMigratorSSLKeyFile.Lock()
	mock.calls.DatabaseMigratorSSLKeyFile = append(mock.calls.DatabaseMigratorSSLKeyFile, callInfo)
	lockConfigMockDatabaseMigratorSSLKeyFile.Unlock()
	return mock.DatabaseMigratorSSLKeyFileFunc()
}

// DatabaseMigratorSSLKeyFileCalls gets all the calls that were made to DatabaseMigratorSSLKeyFile.
// Check the length with:
//     len(mockedConfig.DatabaseMigratorSSLKeyFileCalls())
func (mock *ConfigMock) DatabaseMigratorSSLKeyFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseMigratorSSLKeyFile.RLock()
	calls = mock.calls.DatabaseMigratorSSLKeyFile
	lockConfigMockDatabaseMigratorSSLKeyFile.RUnlock()
	return calls
}

// DatabaseName calls DatabaseNameFunc.
func (mock *ConfigMock) DatabaseName() string {
	if mock.DatabaseNameFunc == nil {
		panic("ConfigMock.DatabaseNameFunc: method is nil but Config.DatabaseName was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseName.Lock()
	mock.calls.DatabaseName = append(mock.calls.DatabaseName, callInfo)
	lockConfigMockDatabaseName.Unlock()
	return mock.DatabaseNameFunc()
}

// DatabaseNameCalls gets all the calls that were made to DatabaseName.
// Check the length with:
//     len(mockedConfig.DatabaseNameCalls())
func (mock *ConfigMock) DatabaseNameCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseName.RLock()
	calls = mock.calls.DatabaseName
	lockConfigMockDatabaseName.RUnlock()
	return calls
}

// DatabasePort calls DatabasePortFunc.
func (mock *ConfigMock) DatabasePort() int {
	if mock.DatabasePortFunc == nil {
		panic("ConfigMock.DatabasePortFunc: method is nil but Config.DatabasePort was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabasePort.Lock()
	mock.calls.DatabasePort = append(mock.calls.DatabasePort, callInfo)
	lockConfigMockDatabasePort.Unlock()
	return mock.DatabasePortFunc()
}

// DatabasePortCalls gets all the calls that were made to DatabasePort.
// Check the length with:
//     len(mockedConfig.DatabasePortCalls())
func (mock *ConfigMock) DatabasePortCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabasePort.RLock()
	calls = mock.calls.DatabasePort
	lockConfigMockDatabasePort.RUnlock()
	return calls
}

// DatabaseSSLRootCertificateFile calls DatabaseSSLRootCertificateFileFunc.
func (mock *ConfigMock) DatabaseSSLRootCertificateFile() string {
	if mock.DatabaseSSLRootCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseSSLRootCertificateFileFunc: method is nil but Config.DatabaseSSLRootCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseSSLRootCertificateFile.Lock()
	mock.calls.DatabaseSSLRootCertificateFile = append(mock.calls.DatabaseSSLRootCertificateFile, callInfo)
	lockConfigMockDatabaseSSLRootCertificateFile.Unlock()
	return mock.DatabaseSSLRootCertificateFileFunc()
}

// DatabaseSSLRootCertificateFileCalls gets all the calls that were made to DatabaseSSLRootCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseSSLRootCertificateFileCalls())
func (mock *ConfigMock) DatabaseSSLRootCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseSSLRootCertificateFile.RLock()
	calls = mock.calls.DatabaseSSLRootCertificateFile
	lockConfigMockDatabaseSSLRootCertificateFile.RUnlock()
	return calls
}

// DatabaseSelecter calls DatabaseSelecterFunc.
func (mock *ConfigMock) DatabaseSelecter() string {
	if mock.DatabaseSelecterFunc == nil {
		panic("ConfigMock.DatabaseSelecterFunc: method is nil but Config.DatabaseSelecter was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseSelecter.Lock()
	mock.calls.DatabaseSelecter = append(mock.calls.DatabaseSelecter, callInfo)
	lockConfigMockDatabaseSelecter.Unlock()
	return mock.DatabaseSelecterFunc()
}

// DatabaseSelecterCalls gets all the calls that were made to DatabaseSelecter.
// Check the length with:
//     len(mockedConfig.DatabaseSelecterCalls())
func (mock *ConfigMock) DatabaseSelecterCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseSelecter.RLock()
	calls = mock.calls.DatabaseSelecter
	lockConfigMockDatabaseSelecter.RUnlock()
	return calls
}

// DatabaseSelecterSSLCertificateFile calls DatabaseSelecterSSLCertificateFileFunc.
func (mock *ConfigMock) DatabaseSelecterSSLCertificateFile() string {
	if mock.DatabaseSelecterSSLCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseSelecterSSLCertificateFileFunc: method is nil but Config.DatabaseSelecterSSLCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseSelecterSSLCertificateFile.Lock()
	mock.calls.DatabaseSelecterSSLCertificateFile = append(mock.calls.DatabaseSelecterSSLCertificateFile, callInfo)
	lockConfigMockDatabaseSelecterSSLCertificateFile.Unlock()
	return mock.DatabaseSelecterSSLCertificateFileFunc()
}

// DatabaseSelecterSSLCertificateFileCalls gets all the calls that were made to DatabaseSelecterSSLCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseSelecterSSLCertificateFileCalls())
func (mock *ConfigMock) DatabaseSelecterSSLCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseSelecterSSLCertificateFile.RLock()
	calls = mock.calls.DatabaseSelecterSSLCertificateFile
	lockConfigMockDatabaseSelecterSSLCertificateFile.RUnlock()
	return calls
}

// DatabaseSelecterSSLKeyFile calls DatabaseSelecterSSLKeyFileFunc.
func (mock *ConfigMock) DatabaseSelecterSSLKeyFile() string {
	if mock.DatabaseSelecterSSLKeyFileFunc == nil {
		panic("ConfigMock.DatabaseSelecterSSLKeyFileFunc: method is nil but Config.DatabaseSelecterSSLKeyFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseSelecterSSLKeyFile.Lock()
	mock.calls.DatabaseSelecterSSLKeyFile = append(mock.calls.DatabaseSelecterSSLKeyFile, callInfo)
	lockConfigMockDatabaseSelecterSSLKeyFile.Unlock()
	return mock.DatabaseSelecterSSLKeyFileFunc()
}

// DatabaseSelecterSSLKeyFileCalls gets all the calls that were made to DatabaseSelecterSSLKeyFile.
// Check the length with:
//     len(mockedConfig.DatabaseSelecterSSLKeyFileCalls())
func (mock *ConfigMock) DatabaseSelecterSSLKeyFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseSelecterSSLKeyFile.RLock()
	calls = mock.calls.DatabaseSelecterSSLKeyFile
	lockConfigMockDatabaseSelecterSSLKeyFile.RUnlock()
	return calls
}

// DatabaseUpdater calls DatabaseUpdaterFunc.
func (mock *ConfigMock) DatabaseUpdater() string {
	if mock.DatabaseUpdaterFunc == nil {
		panic("ConfigMock.DatabaseUpdaterFunc: method is nil but Config.DatabaseUpdater was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseUpdater.Lock()
	mock.calls.DatabaseUpdater = append(mock.calls.DatabaseUpdater, callInfo)
	lockConfigMockDatabaseUpdater.Unlock()
	return mock.DatabaseUpdaterFunc()
}

// DatabaseUpdaterCalls gets all the calls that were made to DatabaseUpdater.
// Check the length with:
//     len(mockedConfig.DatabaseUpdaterCalls())
func (mock *ConfigMock) DatabaseUpdaterCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseUpdater.RLock()
	calls = mock.calls.DatabaseUpdater
	lockConfigMockDatabaseUpdater.RUnlock()
	return calls
}

// DatabaseUpdaterSSLCertificateFile calls DatabaseUpdaterSSLCertificateFileFunc.
func (mock *ConfigMock) DatabaseUpdaterSSLCertificateFile() string {
	if mock.DatabaseUpdaterSSLCertificateFileFunc == nil {
		panic("ConfigMock.DatabaseUpdaterSSLCertificateFileFunc: method is nil but Config.DatabaseUpdaterSSLCertificateFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseUpdaterSSLCertificateFile.Lock()
	mock.calls.DatabaseUpdaterSSLCertificateFile = append(mock.calls.DatabaseUpdaterSSLCertificateFile, callInfo)
	lockConfigMockDatabaseUpdaterSSLCertificateFile.Unlock()
	return mock.DatabaseUpdaterSSLCertificateFileFunc()
}

// DatabaseUpdaterSSLCertificateFileCalls gets all the calls that were made to DatabaseUpdaterSSLCertificateFile.
// Check the length with:
//     len(mockedConfig.DatabaseUpdaterSSLCertificateFileCalls())
func (mock *ConfigMock) DatabaseUpdaterSSLCertificateFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseUpdaterSSLCertificateFile.RLock()
	calls = mock.calls.DatabaseUpdaterSSLCertificateFile
	lockConfigMockDatabaseUpdaterSSLCertificateFile.RUnlock()
	return calls
}

// DatabaseUpdaterSSLKeyFile calls DatabaseUpdaterSSLKeyFileFunc.
func (mock *ConfigMock) DatabaseUpdaterSSLKeyFile() string {
	if mock.DatabaseUpdaterSSLKeyFileFunc == nil {
		panic("ConfigMock.DatabaseUpdaterSSLKeyFileFunc: method is nil but Config.DatabaseUpdaterSSLKeyFile was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDatabaseUpdaterSSLKeyFile.Lock()
	mock.calls.DatabaseUpdaterSSLKeyFile = append(mock.calls.DatabaseUpdaterSSLKeyFile, callInfo)
	lockConfigMockDatabaseUpdaterSSLKeyFile.Unlock()
	return mock.DatabaseUpdaterSSLKeyFileFunc()
}

// DatabaseUpdaterSSLKeyFileCalls gets all the calls that were made to DatabaseUpdaterSSLKeyFile.
// Check the length with:
//     len(mockedConfig.DatabaseUpdaterSSLKeyFileCalls())
func (mock *ConfigMock) DatabaseUpdaterSSLKeyFileCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDatabaseUpdaterSSLKeyFile.RLock()
	calls = mock.calls.DatabaseUpdaterSSLKeyFile
	lockConfigMockDatabaseUpdaterSSLKeyFile.RUnlock()
	return calls
}

// DefaultLanguage calls DefaultLanguageFunc.
func (mock *ConfigMock) DefaultLanguage() string {
	if mock.DefaultLanguageFunc == nil {
		panic("ConfigMock.DefaultLanguageFunc: method is nil but Config.DefaultLanguage was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDefaultLanguage.Lock()
	mock.calls.DefaultLanguage = append(mock.calls.DefaultLanguage, callInfo)
	lockConfigMockDefaultLanguage.Unlock()
	return mock.DefaultLanguageFunc()
}

// DefaultLanguageCalls gets all the calls that were made to DefaultLanguage.
// Check the length with:
//     len(mockedConfig.DefaultLanguageCalls())
func (mock *ConfigMock) DefaultLanguageCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDefaultLanguage.RLock()
	calls = mock.calls.DefaultLanguage
	lockConfigMockDefaultLanguage.RUnlock()
	return calls
}

// Development calls DevelopmentFunc.
func (mock *ConfigMock) Development() bool {
	if mock.DevelopmentFunc == nil {
		panic("ConfigMock.DevelopmentFunc: method is nil but Config.Development was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockDevelopment.Lock()
	mock.calls.Development = append(mock.calls.Development, callInfo)
	lockConfigMockDevelopment.Unlock()
	return mock.DevelopmentFunc()
}

// DevelopmentCalls gets all the calls that were made to Development.
// Check the length with:
//     len(mockedConfig.DevelopmentCalls())
func (mock *ConfigMock) DevelopmentCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockDevelopment.RLock()
	calls = mock.calls.Development
	lockConfigMockDevelopment.RUnlock()
	return calls
}

// EmailHost calls EmailHostFunc.
func (mock *ConfigMock) EmailHost() string {
	if mock.EmailHostFunc == nil {
		panic("ConfigMock.EmailHostFunc: method is nil but Config.EmailHost was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockEmailHost.Lock()
	mock.calls.EmailHost = append(mock.calls.EmailHost, callInfo)
	lockConfigMockEmailHost.Unlock()
	return mock.EmailHostFunc()
}

// EmailHostCalls gets all the calls that were made to EmailHost.
// Check the length with:
//     len(mockedConfig.EmailHostCalls())
func (mock *ConfigMock) EmailHostCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockEmailHost.RLock()
	calls = mock.calls.EmailHost
	lockConfigMockEmailHost.RUnlock()
	return calls
}

// EmailNoReplyAddress calls EmailNoReplyAddressFunc.
func (mock *ConfigMock) EmailNoReplyAddress() string {
	if mock.EmailNoReplyAddressFunc == nil {
		panic("ConfigMock.EmailNoReplyAddressFunc: method is nil but Config.EmailNoReplyAddress was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockEmailNoReplyAddress.Lock()
	mock.calls.EmailNoReplyAddress = append(mock.calls.EmailNoReplyAddress, callInfo)
	lockConfigMockEmailNoReplyAddress.Unlock()
	return mock.EmailNoReplyAddressFunc()
}

// EmailNoReplyAddressCalls gets all the calls that were made to EmailNoReplyAddress.
// Check the length with:
//     len(mockedConfig.EmailNoReplyAddressCalls())
func (mock *ConfigMock) EmailNoReplyAddressCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockEmailNoReplyAddress.RLock()
	calls = mock.calls.EmailNoReplyAddress
	lockConfigMockEmailNoReplyAddress.RUnlock()
	return calls
}

// EmailPassword calls EmailPasswordFunc.
func (mock *ConfigMock) EmailPassword() string {
	if mock.EmailPasswordFunc == nil {
		panic("ConfigMock.EmailPasswordFunc: method is nil but Config.EmailPassword was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockEmailPassword.Lock()
	mock.calls.EmailPassword = append(mock.calls.EmailPassword, callInfo)
	lockConfigMockEmailPassword.Unlock()
	return mock.EmailPasswordFunc()
}

// EmailPasswordCalls gets all the calls that were made to EmailPassword.
// Check the length with:
//     len(mockedConfig.EmailPasswordCalls())
func (mock *ConfigMock) EmailPasswordCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockEmailPassword.RLock()
	calls = mock.calls.EmailPassword
	lockConfigMockEmailPassword.RUnlock()
	return calls
}

// EmailPort calls EmailPortFunc.
func (mock *ConfigMock) EmailPort() int {
	if mock.EmailPortFunc == nil {
		panic("ConfigMock.EmailPortFunc: method is nil but Config.EmailPort was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockEmailPort.Lock()
	mock.calls.EmailPort = append(mock.calls.EmailPort, callInfo)
	lockConfigMockEmailPort.Unlock()
	return mock.EmailPortFunc()
}

// EmailPortCalls gets all the calls that were made to EmailPort.
// Check the length with:
//     len(mockedConfig.EmailPortCalls())
func (mock *ConfigMock) EmailPortCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockEmailPort.RLock()
	calls = mock.calls.EmailPort
	lockConfigMockEmailPort.RUnlock()
	return calls
}

// EmailUsername calls EmailUsernameFunc.
func (mock *ConfigMock) EmailUsername() string {
	if mock.EmailUsernameFunc == nil {
		panic("ConfigMock.EmailUsernameFunc: method is nil but Config.EmailUsername was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockEmailUsername.Lock()
	mock.calls.EmailUsername = append(mock.calls.EmailUsername, callInfo)
	lockConfigMockEmailUsername.Unlock()
	return mock.EmailUsernameFunc()
}

// EmailUsernameCalls gets all the calls that were made to EmailUsername.
// Check the length with:
//     len(mockedConfig.EmailUsernameCalls())
func (mock *ConfigMock) EmailUsernameCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockEmailUsername.RLock()
	calls = mock.calls.EmailUsername
	lockConfigMockEmailUsername.RUnlock()
	return calls
}

// ImagesAssetsPath calls ImagesAssetsPathFunc.
func (mock *ConfigMock) ImagesAssetsPath() string {
	if mock.ImagesAssetsPathFunc == nil {
		panic("ConfigMock.ImagesAssetsPathFunc: method is nil but Config.ImagesAssetsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockImagesAssetsPath.Lock()
	mock.calls.ImagesAssetsPath = append(mock.calls.ImagesAssetsPath, callInfo)
	lockConfigMockImagesAssetsPath.Unlock()
	return mock.ImagesAssetsPathFunc()
}

// ImagesAssetsPathCalls gets all the calls that were made to ImagesAssetsPath.
// Check the length with:
//     len(mockedConfig.ImagesAssetsPathCalls())
func (mock *ConfigMock) ImagesAssetsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockImagesAssetsPath.RLock()
	calls = mock.calls.ImagesAssetsPath
	lockConfigMockImagesAssetsPath.RUnlock()
	return calls
}

// JavaScriptAssetsPath calls JavaScriptAssetsPathFunc.
func (mock *ConfigMock) JavaScriptAssetsPath() string {
	if mock.JavaScriptAssetsPathFunc == nil {
		panic("ConfigMock.JavaScriptAssetsPathFunc: method is nil but Config.JavaScriptAssetsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockJavaScriptAssetsPath.Lock()
	mock.calls.JavaScriptAssetsPath = append(mock.calls.JavaScriptAssetsPath, callInfo)
	lockConfigMockJavaScriptAssetsPath.Unlock()
	return mock.JavaScriptAssetsPathFunc()
}

// JavaScriptAssetsPathCalls gets all the calls that were made to JavaScriptAssetsPath.
// Check the length with:
//     len(mockedConfig.JavaScriptAssetsPathCalls())
func (mock *ConfigMock) JavaScriptAssetsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockJavaScriptAssetsPath.RLock()
	calls = mock.calls.JavaScriptAssetsPath
	lockConfigMockJavaScriptAssetsPath.RUnlock()
	return calls
}

// LanguageIsAvailable calls LanguageIsAvailableFunc.
func (mock *ConfigMock) LanguageIsAvailable(code string) bool {
	if mock.LanguageIsAvailableFunc == nil {
		panic("ConfigMock.LanguageIsAvailableFunc: method is nil but Config.LanguageIsAvailable was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockConfigMockLanguageIsAvailable.Lock()
	mock.calls.LanguageIsAvailable = append(mock.calls.LanguageIsAvailable, callInfo)
	lockConfigMockLanguageIsAvailable.Unlock()
	return mock.LanguageIsAvailableFunc(code)
}

// LanguageIsAvailableCalls gets all the calls that were made to LanguageIsAvailable.
// Check the length with:
//     len(mockedConfig.LanguageIsAvailableCalls())
func (mock *ConfigMock) LanguageIsAvailableCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockConfigMockLanguageIsAvailable.RLock()
	calls = mock.calls.LanguageIsAvailable
	lockConfigMockLanguageIsAvailable.RUnlock()
	return calls
}

// Languages calls LanguagesFunc.
func (mock *ConfigMock) Languages() []string {
	if mock.LanguagesFunc == nil {
		panic("ConfigMock.LanguagesFunc: method is nil but Config.Languages was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockLanguages.Lock()
	mock.calls.Languages = append(mock.calls.Languages, callInfo)
	lockConfigMockLanguages.Unlock()
	return mock.LanguagesFunc()
}

// LanguagesCalls gets all the calls that were made to Languages.
// Check the length with:
//     len(mockedConfig.LanguagesCalls())
func (mock *ConfigMock) LanguagesCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockLanguages.RLock()
	calls = mock.calls.Languages
	lockConfigMockLanguages.RUnlock()
	return calls
}

// Logging calls LoggingFunc.
func (mock *ConfigMock) Logging() bool {
	if mock.LoggingFunc == nil {
		panic("ConfigMock.LoggingFunc: method is nil but Config.Logging was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockLogging.Lock()
	mock.calls.Logging = append(mock.calls.Logging, callInfo)
	lockConfigMockLogging.Unlock()
	return mock.LoggingFunc()
}

// LoggingCalls gets all the calls that were made to Logging.
// Check the length with:
//     len(mockedConfig.LoggingCalls())
func (mock *ConfigMock) LoggingCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockLogging.RLock()
	calls = mock.calls.Logging
	lockConfigMockLogging.RUnlock()
	return calls
}

// Pprof calls PprofFunc.
func (mock *ConfigMock) Pprof() bool {
	if mock.PprofFunc == nil {
		panic("ConfigMock.PprofFunc: method is nil but Config.Pprof was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockPprof.Lock()
	mock.calls.Pprof = append(mock.calls.Pprof, callInfo)
	lockConfigMockPprof.Unlock()
	return mock.PprofFunc()
}

// PprofCalls gets all the calls that were made to Pprof.
// Check the length with:
//     len(mockedConfig.PprofCalls())
func (mock *ConfigMock) PprofCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockPprof.RLock()
	calls = mock.calls.Pprof
	lockConfigMockPprof.RUnlock()
	return calls
}

// PprofURL calls PprofURLFunc.
func (mock *ConfigMock) PprofURL() string {
	if mock.PprofURLFunc == nil {
		panic("ConfigMock.PprofURLFunc: method is nil but Config.PprofURL was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockPprofURL.Lock()
	mock.calls.PprofURL = append(mock.calls.PprofURL, callInfo)
	lockConfigMockPprofURL.Unlock()
	return mock.PprofURLFunc()
}

// PprofURLCalls gets all the calls that were made to PprofURL.
// Check the length with:
//     len(mockedConfig.PprofURLCalls())
func (mock *ConfigMock) PprofURLCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockPprofURL.RLock()
	calls = mock.calls.PprofURL
	lockConfigMockPprofURL.RUnlock()
	return calls
}

// PrivateFilesAssetsPath calls PrivateFilesAssetsPathFunc.
func (mock *ConfigMock) PrivateFilesAssetsPath() string {
	if mock.PrivateFilesAssetsPathFunc == nil {
		panic("ConfigMock.PrivateFilesAssetsPathFunc: method is nil but Config.PrivateFilesAssetsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockPrivateFilesAssetsPath.Lock()
	mock.calls.PrivateFilesAssetsPath = append(mock.calls.PrivateFilesAssetsPath, callInfo)
	lockConfigMockPrivateFilesAssetsPath.Unlock()
	return mock.PrivateFilesAssetsPathFunc()
}

// PrivateFilesAssetsPathCalls gets all the calls that were made to PrivateFilesAssetsPath.
// Check the length with:
//     len(mockedConfig.PrivateFilesAssetsPathCalls())
func (mock *ConfigMock) PrivateFilesAssetsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockPrivateFilesAssetsPath.RLock()
	calls = mock.calls.PrivateFilesAssetsPath
	lockConfigMockPrivateFilesAssetsPath.RUnlock()
	return calls
}

// PublicFilesAssetsPath calls PublicFilesAssetsPathFunc.
func (mock *ConfigMock) PublicFilesAssetsPath() string {
	if mock.PublicFilesAssetsPathFunc == nil {
		panic("ConfigMock.PublicFilesAssetsPathFunc: method is nil but Config.PublicFilesAssetsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockPublicFilesAssetsPath.Lock()
	mock.calls.PublicFilesAssetsPath = append(mock.calls.PublicFilesAssetsPath, callInfo)
	lockConfigMockPublicFilesAssetsPath.Unlock()
	return mock.PublicFilesAssetsPathFunc()
}

// PublicFilesAssetsPathCalls gets all the calls that were made to PublicFilesAssetsPath.
// Check the length with:
//     len(mockedConfig.PublicFilesAssetsPathCalls())
func (mock *ConfigMock) PublicFilesAssetsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockPublicFilesAssetsPath.RLock()
	calls = mock.calls.PublicFilesAssetsPath
	lockConfigMockPublicFilesAssetsPath.RUnlock()
	return calls
}

// PublicRootFilesAssetsPath calls PublicRootFilesAssetsPathFunc.
func (mock *ConfigMock) PublicRootFilesAssetsPath() string {
	if mock.PublicRootFilesAssetsPathFunc == nil {
		panic("ConfigMock.PublicRootFilesAssetsPathFunc: method is nil but Config.PublicRootFilesAssetsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockPublicRootFilesAssetsPath.Lock()
	mock.calls.PublicRootFilesAssetsPath = append(mock.calls.PublicRootFilesAssetsPath, callInfo)
	lockConfigMockPublicRootFilesAssetsPath.Unlock()
	return mock.PublicRootFilesAssetsPathFunc()
}

// PublicRootFilesAssetsPathCalls gets all the calls that were made to PublicRootFilesAssetsPath.
// Check the length with:
//     len(mockedConfig.PublicRootFilesAssetsPathCalls())
func (mock *ConfigMock) PublicRootFilesAssetsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockPublicRootFilesAssetsPath.RLock()
	calls = mock.calls.PublicRootFilesAssetsPath
	lockConfigMockPublicRootFilesAssetsPath.RUnlock()
	return calls
}

// SecurityBcryptRounds calls SecurityBcryptRoundsFunc.
func (mock *ConfigMock) SecurityBcryptRounds() int {
	if mock.SecurityBcryptRoundsFunc == nil {
		panic("ConfigMock.SecurityBcryptRoundsFunc: method is nil but Config.SecurityBcryptRounds was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSecurityBcryptRounds.Lock()
	mock.calls.SecurityBcryptRounds = append(mock.calls.SecurityBcryptRounds, callInfo)
	lockConfigMockSecurityBcryptRounds.Unlock()
	return mock.SecurityBcryptRoundsFunc()
}

// SecurityBcryptRoundsCalls gets all the calls that were made to SecurityBcryptRounds.
// Check the length with:
//     len(mockedConfig.SecurityBcryptRoundsCalls())
func (mock *ConfigMock) SecurityBcryptRoundsCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSecurityBcryptRounds.RLock()
	calls = mock.calls.SecurityBcryptRounds
	lockConfigMockSecurityBcryptRounds.RUnlock()
	return calls
}

// SecurityFormTokenCleanupInterval calls SecurityFormTokenCleanupIntervalFunc.
func (mock *ConfigMock) SecurityFormTokenCleanupInterval() time.Duration {
	if mock.SecurityFormTokenCleanupIntervalFunc == nil {
		panic("ConfigMock.SecurityFormTokenCleanupIntervalFunc: method is nil but Config.SecurityFormTokenCleanupInterval was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSecurityFormTokenCleanupInterval.Lock()
	mock.calls.SecurityFormTokenCleanupInterval = append(mock.calls.SecurityFormTokenCleanupInterval, callInfo)
	lockConfigMockSecurityFormTokenCleanupInterval.Unlock()
	return mock.SecurityFormTokenCleanupIntervalFunc()
}

// SecurityFormTokenCleanupIntervalCalls gets all the calls that were made to SecurityFormTokenCleanupInterval.
// Check the length with:
//     len(mockedConfig.SecurityFormTokenCleanupIntervalCalls())
func (mock *ConfigMock) SecurityFormTokenCleanupIntervalCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSecurityFormTokenCleanupInterval.RLock()
	calls = mock.calls.SecurityFormTokenCleanupInterval
	lockConfigMockSecurityFormTokenCleanupInterval.RUnlock()
	return calls
}

// SecurityFormTokenLifespan calls SecurityFormTokenLifespanFunc.
func (mock *ConfigMock) SecurityFormTokenLifespan() time.Duration {
	if mock.SecurityFormTokenLifespanFunc == nil {
		panic("ConfigMock.SecurityFormTokenLifespanFunc: method is nil but Config.SecurityFormTokenLifespan was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSecurityFormTokenLifespan.Lock()
	mock.calls.SecurityFormTokenLifespan = append(mock.calls.SecurityFormTokenLifespan, callInfo)
	lockConfigMockSecurityFormTokenLifespan.Unlock()
	return mock.SecurityFormTokenLifespanFunc()
}

// SecurityFormTokenLifespanCalls gets all the calls that were made to SecurityFormTokenLifespan.
// Check the length with:
//     len(mockedConfig.SecurityFormTokenLifespanCalls())
func (mock *ConfigMock) SecurityFormTokenLifespanCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSecurityFormTokenLifespan.RLock()
	calls = mock.calls.SecurityFormTokenLifespan
	lockConfigMockSecurityFormTokenLifespan.RUnlock()
	return calls
}

// SecurityGlobalAuthentication calls SecurityGlobalAuthenticationFunc.
func (mock *ConfigMock) SecurityGlobalAuthentication() bool {
	if mock.SecurityGlobalAuthenticationFunc == nil {
		panic("ConfigMock.SecurityGlobalAuthenticationFunc: method is nil but Config.SecurityGlobalAuthentication was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSecurityGlobalAuthentication.Lock()
	mock.calls.SecurityGlobalAuthentication = append(mock.calls.SecurityGlobalAuthentication, callInfo)
	lockConfigMockSecurityGlobalAuthentication.Unlock()
	return mock.SecurityGlobalAuthenticationFunc()
}

// SecurityGlobalAuthenticationCalls gets all the calls that were made to SecurityGlobalAuthentication.
// Check the length with:
//     len(mockedConfig.SecurityGlobalAuthenticationCalls())
func (mock *ConfigMock) SecurityGlobalAuthenticationCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSecurityGlobalAuthentication.RLock()
	calls = mock.calls.SecurityGlobalAuthentication
	lockConfigMockSecurityGlobalAuthentication.RUnlock()
	return calls
}

// ServerHTTPRedirectPort calls ServerHTTPRedirectPortFunc.
func (mock *ConfigMock) ServerHTTPRedirectPort() int {
	if mock.ServerHTTPRedirectPortFunc == nil {
		panic("ConfigMock.ServerHTTPRedirectPortFunc: method is nil but Config.ServerHTTPRedirectPort was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockServerHTTPRedirectPort.Lock()
	mock.calls.ServerHTTPRedirectPort = append(mock.calls.ServerHTTPRedirectPort, callInfo)
	lockConfigMockServerHTTPRedirectPort.Unlock()
	return mock.ServerHTTPRedirectPortFunc()
}

// ServerHTTPRedirectPortCalls gets all the calls that were made to ServerHTTPRedirectPort.
// Check the length with:
//     len(mockedConfig.ServerHTTPRedirectPortCalls())
func (mock *ConfigMock) ServerHTTPRedirectPortCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockServerHTTPRedirectPort.RLock()
	calls = mock.calls.ServerHTTPRedirectPort
	lockConfigMockServerHTTPRedirectPort.RUnlock()
	return calls
}

// ServerHost calls ServerHostFunc.
func (mock *ConfigMock) ServerHost() string {
	if mock.ServerHostFunc == nil {
		panic("ConfigMock.ServerHostFunc: method is nil but Config.ServerHost was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockServerHost.Lock()
	mock.calls.ServerHost = append(mock.calls.ServerHost, callInfo)
	lockConfigMockServerHost.Unlock()
	return mock.ServerHostFunc()
}

// ServerHostCalls gets all the calls that were made to ServerHost.
// Check the length with:
//     len(mockedConfig.ServerHostCalls())
func (mock *ConfigMock) ServerHostCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockServerHost.RLock()
	calls = mock.calls.ServerHost
	lockConfigMockServerHost.RUnlock()
	return calls
}

// ServerPort calls ServerPortFunc.
func (mock *ConfigMock) ServerPort() int {
	if mock.ServerPortFunc == nil {
		panic("ConfigMock.ServerPortFunc: method is nil but Config.ServerPort was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockServerPort.Lock()
	mock.calls.ServerPort = append(mock.calls.ServerPort, callInfo)
	lockConfigMockServerPort.Unlock()
	return mock.ServerPortFunc()
}

// ServerPortCalls gets all the calls that were made to ServerPort.
// Check the length with:
//     len(mockedConfig.ServerPortCalls())
func (mock *ConfigMock) ServerPortCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockServerPort.RLock()
	calls = mock.calls.ServerPort
	lockConfigMockServerPort.RUnlock()
	return calls
}

// ServerSSLCertificateFilePath calls ServerSSLCertificateFilePathFunc.
func (mock *ConfigMock) ServerSSLCertificateFilePath() string {
	if mock.ServerSSLCertificateFilePathFunc == nil {
		panic("ConfigMock.ServerSSLCertificateFilePathFunc: method is nil but Config.ServerSSLCertificateFilePath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockServerSSLCertificateFilePath.Lock()
	mock.calls.ServerSSLCertificateFilePath = append(mock.calls.ServerSSLCertificateFilePath, callInfo)
	lockConfigMockServerSSLCertificateFilePath.Unlock()
	return mock.ServerSSLCertificateFilePathFunc()
}

// ServerSSLCertificateFilePathCalls gets all the calls that were made to ServerSSLCertificateFilePath.
// Check the length with:
//     len(mockedConfig.ServerSSLCertificateFilePathCalls())
func (mock *ConfigMock) ServerSSLCertificateFilePathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockServerSSLCertificateFilePath.RLock()
	calls = mock.calls.ServerSSLCertificateFilePath
	lockConfigMockServerSSLCertificateFilePath.RUnlock()
	return calls
}

// ServerSSLKeyFilePath calls ServerSSLKeyFilePathFunc.
func (mock *ConfigMock) ServerSSLKeyFilePath() string {
	if mock.ServerSSLKeyFilePathFunc == nil {
		panic("ConfigMock.ServerSSLKeyFilePathFunc: method is nil but Config.ServerSSLKeyFilePath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockServerSSLKeyFilePath.Lock()
	mock.calls.ServerSSLKeyFilePath = append(mock.calls.ServerSSLKeyFilePath, callInfo)
	lockConfigMockServerSSLKeyFilePath.Unlock()
	return mock.ServerSSLKeyFilePathFunc()
}

// ServerSSLKeyFilePathCalls gets all the calls that were made to ServerSSLKeyFilePath.
// Check the length with:
//     len(mockedConfig.ServerSSLKeyFilePathCalls())
func (mock *ConfigMock) ServerSSLKeyFilePathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockServerSSLKeyFilePath.RLock()
	calls = mock.calls.ServerSSLKeyFilePath
	lockConfigMockServerSSLKeyFilePath.RUnlock()
	return calls
}

// SessionCookieName calls SessionCookieNameFunc.
func (mock *ConfigMock) SessionCookieName() string {
	if mock.SessionCookieNameFunc == nil {
		panic("ConfigMock.SessionCookieNameFunc: method is nil but Config.SessionCookieName was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSessionCookieName.Lock()
	mock.calls.SessionCookieName = append(mock.calls.SessionCookieName, callInfo)
	lockConfigMockSessionCookieName.Unlock()
	return mock.SessionCookieNameFunc()
}

// SessionCookieNameCalls gets all the calls that were made to SessionCookieName.
// Check the length with:
//     len(mockedConfig.SessionCookieNameCalls())
func (mock *ConfigMock) SessionCookieNameCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSessionCookieName.RLock()
	calls = mock.calls.SessionCookieName
	lockConfigMockSessionCookieName.RUnlock()
	return calls
}

// SessionExpiration calls SessionExpirationFunc.
func (mock *ConfigMock) SessionExpiration() time.Duration {
	if mock.SessionExpirationFunc == nil {
		panic("ConfigMock.SessionExpirationFunc: method is nil but Config.SessionExpiration was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSessionExpiration.Lock()
	mock.calls.SessionExpiration = append(mock.calls.SessionExpiration, callInfo)
	lockConfigMockSessionExpiration.Unlock()
	return mock.SessionExpirationFunc()
}

// SessionExpirationCalls gets all the calls that were made to SessionExpiration.
// Check the length with:
//     len(mockedConfig.SessionExpirationCalls())
func (mock *ConfigMock) SessionExpirationCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSessionExpiration.RLock()
	calls = mock.calls.SessionExpiration
	lockConfigMockSessionExpiration.RUnlock()
	return calls
}

// SessionRememberMeExpiration calls SessionRememberMeExpirationFunc.
func (mock *ConfigMock) SessionRememberMeExpiration() time.Duration {
	if mock.SessionRememberMeExpirationFunc == nil {
		panic("ConfigMock.SessionRememberMeExpirationFunc: method is nil but Config.SessionRememberMeExpiration was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockSessionRememberMeExpiration.Lock()
	mock.calls.SessionRememberMeExpiration = append(mock.calls.SessionRememberMeExpiration, callInfo)
	lockConfigMockSessionRememberMeExpiration.Unlock()
	return mock.SessionRememberMeExpirationFunc()
}

// SessionRememberMeExpirationCalls gets all the calls that were made to SessionRememberMeExpiration.
// Check the length with:
//     len(mockedConfig.SessionRememberMeExpirationCalls())
func (mock *ConfigMock) SessionRememberMeExpirationCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockSessionRememberMeExpiration.RLock()
	calls = mock.calls.SessionRememberMeExpiration
	lockConfigMockSessionRememberMeExpiration.RUnlock()
	return calls
}

// StylesheetsAssetsPath calls StylesheetsAssetsPathFunc.
func (mock *ConfigMock) StylesheetsAssetsPath() string {
	if mock.StylesheetsAssetsPathFunc == nil {
		panic("ConfigMock.StylesheetsAssetsPathFunc: method is nil but Config.StylesheetsAssetsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockStylesheetsAssetsPath.Lock()
	mock.calls.StylesheetsAssetsPath = append(mock.calls.StylesheetsAssetsPath, callInfo)
	lockConfigMockStylesheetsAssetsPath.Unlock()
	return mock.StylesheetsAssetsPathFunc()
}

// StylesheetsAssetsPathCalls gets all the calls that were made to StylesheetsAssetsPath.
// Check the length with:
//     len(mockedConfig.StylesheetsAssetsPathCalls())
func (mock *ConfigMock) StylesheetsAssetsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockStylesheetsAssetsPath.RLock()
	calls = mock.calls.StylesheetsAssetsPath
	lockConfigMockStylesheetsAssetsPath.RUnlock()
	return calls
}

// TranslationsPath calls TranslationsPathFunc.
func (mock *ConfigMock) TranslationsPath() string {
	if mock.TranslationsPathFunc == nil {
		panic("ConfigMock.TranslationsPathFunc: method is nil but Config.TranslationsPath was just called")
	}
	callInfo := struct {
	}{}
	lockConfigMockTranslationsPath.Lock()
	mock.calls.TranslationsPath = append(mock.calls.TranslationsPath, callInfo)
	lockConfigMockTranslationsPath.Unlock()
	return mock.TranslationsPathFunc()
}

// TranslationsPathCalls gets all the calls that were made to TranslationsPath.
// Check the length with:
//     len(mockedConfig.TranslationsPathCalls())
func (mock *ConfigMock) TranslationsPathCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigMockTranslationsPath.RLock()
	calls = mock.calls.TranslationsPath
	lockConfigMockTranslationsPath.RUnlock()
	return calls
}

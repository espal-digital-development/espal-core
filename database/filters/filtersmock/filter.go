// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package filtersmock

import (
	"github.com/espal-digital-development/espal-core/database"
	"github.com/espal-digital-development/espal-core/database/filters"
	"sync"
)

var (
	lockFilterMockAddColumn                        sync.RWMutex
	lockFilterMockAddJoinStatement                 sync.RWMutex
	lockFilterMockAddSearchField                   sync.RWMutex
	lockFilterMockAddSelectField                   sync.RWMutex
	lockFilterMockAddSortField                     sync.RWMutex
	lockFilterMockCloseRows                        sync.RWMutex
	lockFilterMockColumnsInOrder                   sync.RWMutex
	lockFilterMockCurrentPage                      sync.RWMutex
	lockFilterMockHasError                         sync.RWMutex
	lockFilterMockHasNextPage                      sync.RWMutex
	lockFilterMockHasPreviousPage                  sync.RWMutex
	lockFilterMockHasResults                       sync.RWMutex
	lockFilterMockLimit                            sync.RWMutex
	lockFilterMockNewColumn                        sync.RWMutex
	lockFilterMockNewJoin                          sync.RWMutex
	lockFilterMockNewSearchField                   sync.RWMutex
	lockFilterMockNewSelectField                   sync.RWMutex
	lockFilterMockNewSortField                     sync.RWMutex
	lockFilterMockPaginationBlocks                 sync.RWMutex
	lockFilterMockProcess                          sync.RWMutex
	lockFilterMockRenderOverviewColumnTableHeaders sync.RWMutex
	lockFilterMockRenderOverviewFilter             sync.RWMutex
	lockFilterMockRows                             sync.RWMutex
	lockFilterMockShouldShowSearch                 sync.RWMutex
	lockFilterMockTableAlias                       sync.RWMutex
	lockFilterMockTotalPages                       sync.RWMutex
	lockFilterMockTotalResults                     sync.RWMutex
)

// Ensure, that FilterMock does implement filters.Filter.
// If this is not the case, regenerate this file with moq.
var _ filters.Filter = &FilterMock{}

// FilterMock is a mock implementation of filters.Filter.
//
//     func TestSomethingThatUsesFilter(t *testing.T) {
//
//         // make and configure a mocked filters.Filter
//         mockedFilter := &FilterMock{
//             AddColumnFunc: func(displayColumn filters.DisplayColumn) filters.Filter {
// 	               panic("mock out the AddColumn method")
//             },
//             AddJoinStatementFunc: func(joinStatement filters.Join) filters.Filter {
// 	               panic("mock out the AddJoinStatement method")
//             },
//             AddSearchFieldFunc: func(searchField filters.SearchField) filters.Filter {
// 	               panic("mock out the AddSearchField method")
//             },
//             AddSelectFieldFunc: func(selectField filters.SelectField) filters.Filter {
// 	               panic("mock out the AddSelectField method")
//             },
//             AddSortFieldFunc: func(sortField filters.SortField) filters.Filter {
// 	               panic("mock out the AddSortField method")
//             },
//             CloseRowsFunc: func() error {
// 	               panic("mock out the CloseRows method")
//             },
//             ColumnsInOrderFunc: func() []filters.DisplayColumn {
// 	               panic("mock out the ColumnsInOrder method")
//             },
//             CurrentPageFunc: func() uint {
// 	               panic("mock out the CurrentPage method")
//             },
//             HasErrorFunc: func() bool {
// 	               panic("mock out the HasError method")
//             },
//             HasNextPageFunc: func() bool {
// 	               panic("mock out the HasNextPage method")
//             },
//             HasPreviousPageFunc: func() bool {
// 	               panic("mock out the HasPreviousPage method")
//             },
//             HasResultsFunc: func() bool {
// 	               panic("mock out the HasResults method")
//             },
//             LimitFunc: func() uint {
// 	               panic("mock out the Limit method")
//             },
//             NewColumnFunc: func(name string) filters.DisplayColumn {
// 	               panic("mock out the NewColumn method")
//             },
//             NewJoinFunc: func(alias string, statement string) filters.Join {
// 	               panic("mock out the NewJoin method")
//             },
//             NewSearchFieldFunc: func(name string) filters.SearchField {
// 	               panic("mock out the NewSearchField method")
//             },
//             NewSelectFieldFunc: func(name string) filters.SelectField {
// 	               panic("mock out the NewSelectField method")
//             },
//             NewSortFieldFunc: func(name string, descending bool) filters.SortField {
// 	               panic("mock out the NewSortField method")
//             },
//             PaginationBlocksFunc: func() []uint {
// 	               panic("mock out the PaginationBlocks method")
//             },
//             ProcessFunc: func() error {
// 	               panic("mock out the Process method")
//             },
//             RenderOverviewColumnTableHeadersFunc: func(ctx filters.Context) string {
// 	               panic("mock out the RenderOverviewColumnTableHeaders method")
//             },
//             RenderOverviewFilterFunc: func(ctx filters.Context) string {
// 	               panic("mock out the RenderOverviewFilter method")
//             },
//             RowsFunc: func() database.Rows {
// 	               panic("mock out the Rows method")
//             },
//             ShouldShowSearchFunc: func() bool {
// 	               panic("mock out the ShouldShowSearch method")
//             },
//             TableAliasFunc: func() string {
// 	               panic("mock out the TableAlias method")
//             },
//             TotalPagesFunc: func() uint {
// 	               panic("mock out the TotalPages method")
//             },
//             TotalResultsFunc: func() uint {
// 	               panic("mock out the TotalResults method")
//             },
//         }
//
//         // use mockedFilter in code that requires filters.Filter
//         // and then make assertions.
//
//     }
type FilterMock struct {
	// AddColumnFunc mocks the AddColumn method.
	AddColumnFunc func(displayColumn filters.DisplayColumn) filters.Filter

	// AddJoinStatementFunc mocks the AddJoinStatement method.
	AddJoinStatementFunc func(joinStatement filters.Join) filters.Filter

	// AddSearchFieldFunc mocks the AddSearchField method.
	AddSearchFieldFunc func(searchField filters.SearchField) filters.Filter

	// AddSelectFieldFunc mocks the AddSelectField method.
	AddSelectFieldFunc func(selectField filters.SelectField) filters.Filter

	// AddSortFieldFunc mocks the AddSortField method.
	AddSortFieldFunc func(sortField filters.SortField) filters.Filter

	// CloseRowsFunc mocks the CloseRows method.
	CloseRowsFunc func() error

	// ColumnsInOrderFunc mocks the ColumnsInOrder method.
	ColumnsInOrderFunc func() []filters.DisplayColumn

	// CurrentPageFunc mocks the CurrentPage method.
	CurrentPageFunc func() uint

	// HasErrorFunc mocks the HasError method.
	HasErrorFunc func() bool

	// HasNextPageFunc mocks the HasNextPage method.
	HasNextPageFunc func() bool

	// HasPreviousPageFunc mocks the HasPreviousPage method.
	HasPreviousPageFunc func() bool

	// HasResultsFunc mocks the HasResults method.
	HasResultsFunc func() bool

	// LimitFunc mocks the Limit method.
	LimitFunc func() uint

	// NewColumnFunc mocks the NewColumn method.
	NewColumnFunc func(name string) filters.DisplayColumn

	// NewJoinFunc mocks the NewJoin method.
	NewJoinFunc func(alias string, statement string) filters.Join

	// NewSearchFieldFunc mocks the NewSearchField method.
	NewSearchFieldFunc func(name string) filters.SearchField

	// NewSelectFieldFunc mocks the NewSelectField method.
	NewSelectFieldFunc func(name string) filters.SelectField

	// NewSortFieldFunc mocks the NewSortField method.
	NewSortFieldFunc func(name string, descending bool) filters.SortField

	// PaginationBlocksFunc mocks the PaginationBlocks method.
	PaginationBlocksFunc func() []uint

	// ProcessFunc mocks the Process method.
	ProcessFunc func() error

	// RenderOverviewColumnTableHeadersFunc mocks the RenderOverviewColumnTableHeaders method.
	RenderOverviewColumnTableHeadersFunc func(ctx filters.Context) string

	// RenderOverviewFilterFunc mocks the RenderOverviewFilter method.
	RenderOverviewFilterFunc func(ctx filters.Context) string

	// RowsFunc mocks the Rows method.
	RowsFunc func() database.Rows

	// ShouldShowSearchFunc mocks the ShouldShowSearch method.
	ShouldShowSearchFunc func() bool

	// TableAliasFunc mocks the TableAlias method.
	TableAliasFunc func() string

	// TotalPagesFunc mocks the TotalPages method.
	TotalPagesFunc func() uint

	// TotalResultsFunc mocks the TotalResults method.
	TotalResultsFunc func() uint

	// calls tracks calls to the methods.
	calls struct {
		// AddColumn holds details about calls to the AddColumn method.
		AddColumn []struct {
			// DisplayColumn is the displayColumn argument value.
			DisplayColumn filters.DisplayColumn
		}
		// AddJoinStatement holds details about calls to the AddJoinStatement method.
		AddJoinStatement []struct {
			// JoinStatement is the joinStatement argument value.
			JoinStatement filters.Join
		}
		// AddSearchField holds details about calls to the AddSearchField method.
		AddSearchField []struct {
			// SearchField is the searchField argument value.
			SearchField filters.SearchField
		}
		// AddSelectField holds details about calls to the AddSelectField method.
		AddSelectField []struct {
			// SelectField is the selectField argument value.
			SelectField filters.SelectField
		}
		// AddSortField holds details about calls to the AddSortField method.
		AddSortField []struct {
			// SortField is the sortField argument value.
			SortField filters.SortField
		}
		// CloseRows holds details about calls to the CloseRows method.
		CloseRows []struct {
		}
		// ColumnsInOrder holds details about calls to the ColumnsInOrder method.
		ColumnsInOrder []struct {
		}
		// CurrentPage holds details about calls to the CurrentPage method.
		CurrentPage []struct {
		}
		// HasError holds details about calls to the HasError method.
		HasError []struct {
		}
		// HasNextPage holds details about calls to the HasNextPage method.
		HasNextPage []struct {
		}
		// HasPreviousPage holds details about calls to the HasPreviousPage method.
		HasPreviousPage []struct {
		}
		// HasResults holds details about calls to the HasResults method.
		HasResults []struct {
		}
		// Limit holds details about calls to the Limit method.
		Limit []struct {
		}
		// NewColumn holds details about calls to the NewColumn method.
		NewColumn []struct {
			// Name is the name argument value.
			Name string
		}
		// NewJoin holds details about calls to the NewJoin method.
		NewJoin []struct {
			// Alias is the alias argument value.
			Alias string
			// Statement is the statement argument value.
			Statement string
		}
		// NewSearchField holds details about calls to the NewSearchField method.
		NewSearchField []struct {
			// Name is the name argument value.
			Name string
		}
		// NewSelectField holds details about calls to the NewSelectField method.
		NewSelectField []struct {
			// Name is the name argument value.
			Name string
		}
		// NewSortField holds details about calls to the NewSortField method.
		NewSortField []struct {
			// Name is the name argument value.
			Name string
			// Descending is the descending argument value.
			Descending bool
		}
		// PaginationBlocks holds details about calls to the PaginationBlocks method.
		PaginationBlocks []struct {
		}
		// Process holds details about calls to the Process method.
		Process []struct {
		}
		// RenderOverviewColumnTableHeaders holds details about calls to the RenderOverviewColumnTableHeaders method.
		RenderOverviewColumnTableHeaders []struct {
			// Ctx is the ctx argument value.
			Ctx filters.Context
		}
		// RenderOverviewFilter holds details about calls to the RenderOverviewFilter method.
		RenderOverviewFilter []struct {
			// Ctx is the ctx argument value.
			Ctx filters.Context
		}
		// Rows holds details about calls to the Rows method.
		Rows []struct {
		}
		// ShouldShowSearch holds details about calls to the ShouldShowSearch method.
		ShouldShowSearch []struct {
		}
		// TableAlias holds details about calls to the TableAlias method.
		TableAlias []struct {
		}
		// TotalPages holds details about calls to the TotalPages method.
		TotalPages []struct {
		}
		// TotalResults holds details about calls to the TotalResults method.
		TotalResults []struct {
		}
	}
}

// AddColumn calls AddColumnFunc.
func (mock *FilterMock) AddColumn(displayColumn filters.DisplayColumn) filters.Filter {
	if mock.AddColumnFunc == nil {
		panic("FilterMock.AddColumnFunc: method is nil but Filter.AddColumn was just called")
	}
	callInfo := struct {
		DisplayColumn filters.DisplayColumn
	}{
		DisplayColumn: displayColumn,
	}
	lockFilterMockAddColumn.Lock()
	mock.calls.AddColumn = append(mock.calls.AddColumn, callInfo)
	lockFilterMockAddColumn.Unlock()
	return mock.AddColumnFunc(displayColumn)
}

// AddColumnCalls gets all the calls that were made to AddColumn.
// Check the length with:
//     len(mockedFilter.AddColumnCalls())
func (mock *FilterMock) AddColumnCalls() []struct {
	DisplayColumn filters.DisplayColumn
} {
	var calls []struct {
		DisplayColumn filters.DisplayColumn
	}
	lockFilterMockAddColumn.RLock()
	calls = mock.calls.AddColumn
	lockFilterMockAddColumn.RUnlock()
	return calls
}

// AddJoinStatement calls AddJoinStatementFunc.
func (mock *FilterMock) AddJoinStatement(joinStatement filters.Join) filters.Filter {
	if mock.AddJoinStatementFunc == nil {
		panic("FilterMock.AddJoinStatementFunc: method is nil but Filter.AddJoinStatement was just called")
	}
	callInfo := struct {
		JoinStatement filters.Join
	}{
		JoinStatement: joinStatement,
	}
	lockFilterMockAddJoinStatement.Lock()
	mock.calls.AddJoinStatement = append(mock.calls.AddJoinStatement, callInfo)
	lockFilterMockAddJoinStatement.Unlock()
	return mock.AddJoinStatementFunc(joinStatement)
}

// AddJoinStatementCalls gets all the calls that were made to AddJoinStatement.
// Check the length with:
//     len(mockedFilter.AddJoinStatementCalls())
func (mock *FilterMock) AddJoinStatementCalls() []struct {
	JoinStatement filters.Join
} {
	var calls []struct {
		JoinStatement filters.Join
	}
	lockFilterMockAddJoinStatement.RLock()
	calls = mock.calls.AddJoinStatement
	lockFilterMockAddJoinStatement.RUnlock()
	return calls
}

// AddSearchField calls AddSearchFieldFunc.
func (mock *FilterMock) AddSearchField(searchField filters.SearchField) filters.Filter {
	if mock.AddSearchFieldFunc == nil {
		panic("FilterMock.AddSearchFieldFunc: method is nil but Filter.AddSearchField was just called")
	}
	callInfo := struct {
		SearchField filters.SearchField
	}{
		SearchField: searchField,
	}
	lockFilterMockAddSearchField.Lock()
	mock.calls.AddSearchField = append(mock.calls.AddSearchField, callInfo)
	lockFilterMockAddSearchField.Unlock()
	return mock.AddSearchFieldFunc(searchField)
}

// AddSearchFieldCalls gets all the calls that were made to AddSearchField.
// Check the length with:
//     len(mockedFilter.AddSearchFieldCalls())
func (mock *FilterMock) AddSearchFieldCalls() []struct {
	SearchField filters.SearchField
} {
	var calls []struct {
		SearchField filters.SearchField
	}
	lockFilterMockAddSearchField.RLock()
	calls = mock.calls.AddSearchField
	lockFilterMockAddSearchField.RUnlock()
	return calls
}

// AddSelectField calls AddSelectFieldFunc.
func (mock *FilterMock) AddSelectField(selectField filters.SelectField) filters.Filter {
	if mock.AddSelectFieldFunc == nil {
		panic("FilterMock.AddSelectFieldFunc: method is nil but Filter.AddSelectField was just called")
	}
	callInfo := struct {
		SelectField filters.SelectField
	}{
		SelectField: selectField,
	}
	lockFilterMockAddSelectField.Lock()
	mock.calls.AddSelectField = append(mock.calls.AddSelectField, callInfo)
	lockFilterMockAddSelectField.Unlock()
	return mock.AddSelectFieldFunc(selectField)
}

// AddSelectFieldCalls gets all the calls that were made to AddSelectField.
// Check the length with:
//     len(mockedFilter.AddSelectFieldCalls())
func (mock *FilterMock) AddSelectFieldCalls() []struct {
	SelectField filters.SelectField
} {
	var calls []struct {
		SelectField filters.SelectField
	}
	lockFilterMockAddSelectField.RLock()
	calls = mock.calls.AddSelectField
	lockFilterMockAddSelectField.RUnlock()
	return calls
}

// AddSortField calls AddSortFieldFunc.
func (mock *FilterMock) AddSortField(sortField filters.SortField) filters.Filter {
	if mock.AddSortFieldFunc == nil {
		panic("FilterMock.AddSortFieldFunc: method is nil but Filter.AddSortField was just called")
	}
	callInfo := struct {
		SortField filters.SortField
	}{
		SortField: sortField,
	}
	lockFilterMockAddSortField.Lock()
	mock.calls.AddSortField = append(mock.calls.AddSortField, callInfo)
	lockFilterMockAddSortField.Unlock()
	return mock.AddSortFieldFunc(sortField)
}

// AddSortFieldCalls gets all the calls that were made to AddSortField.
// Check the length with:
//     len(mockedFilter.AddSortFieldCalls())
func (mock *FilterMock) AddSortFieldCalls() []struct {
	SortField filters.SortField
} {
	var calls []struct {
		SortField filters.SortField
	}
	lockFilterMockAddSortField.RLock()
	calls = mock.calls.AddSortField
	lockFilterMockAddSortField.RUnlock()
	return calls
}

// CloseRows calls CloseRowsFunc.
func (mock *FilterMock) CloseRows() error {
	if mock.CloseRowsFunc == nil {
		panic("FilterMock.CloseRowsFunc: method is nil but Filter.CloseRows was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockCloseRows.Lock()
	mock.calls.CloseRows = append(mock.calls.CloseRows, callInfo)
	lockFilterMockCloseRows.Unlock()
	return mock.CloseRowsFunc()
}

// CloseRowsCalls gets all the calls that were made to CloseRows.
// Check the length with:
//     len(mockedFilter.CloseRowsCalls())
func (mock *FilterMock) CloseRowsCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockCloseRows.RLock()
	calls = mock.calls.CloseRows
	lockFilterMockCloseRows.RUnlock()
	return calls
}

// ColumnsInOrder calls ColumnsInOrderFunc.
func (mock *FilterMock) ColumnsInOrder() []filters.DisplayColumn {
	if mock.ColumnsInOrderFunc == nil {
		panic("FilterMock.ColumnsInOrderFunc: method is nil but Filter.ColumnsInOrder was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockColumnsInOrder.Lock()
	mock.calls.ColumnsInOrder = append(mock.calls.ColumnsInOrder, callInfo)
	lockFilterMockColumnsInOrder.Unlock()
	return mock.ColumnsInOrderFunc()
}

// ColumnsInOrderCalls gets all the calls that were made to ColumnsInOrder.
// Check the length with:
//     len(mockedFilter.ColumnsInOrderCalls())
func (mock *FilterMock) ColumnsInOrderCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockColumnsInOrder.RLock()
	calls = mock.calls.ColumnsInOrder
	lockFilterMockColumnsInOrder.RUnlock()
	return calls
}

// CurrentPage calls CurrentPageFunc.
func (mock *FilterMock) CurrentPage() uint {
	if mock.CurrentPageFunc == nil {
		panic("FilterMock.CurrentPageFunc: method is nil but Filter.CurrentPage was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockCurrentPage.Lock()
	mock.calls.CurrentPage = append(mock.calls.CurrentPage, callInfo)
	lockFilterMockCurrentPage.Unlock()
	return mock.CurrentPageFunc()
}

// CurrentPageCalls gets all the calls that were made to CurrentPage.
// Check the length with:
//     len(mockedFilter.CurrentPageCalls())
func (mock *FilterMock) CurrentPageCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockCurrentPage.RLock()
	calls = mock.calls.CurrentPage
	lockFilterMockCurrentPage.RUnlock()
	return calls
}

// HasError calls HasErrorFunc.
func (mock *FilterMock) HasError() bool {
	if mock.HasErrorFunc == nil {
		panic("FilterMock.HasErrorFunc: method is nil but Filter.HasError was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockHasError.Lock()
	mock.calls.HasError = append(mock.calls.HasError, callInfo)
	lockFilterMockHasError.Unlock()
	return mock.HasErrorFunc()
}

// HasErrorCalls gets all the calls that were made to HasError.
// Check the length with:
//     len(mockedFilter.HasErrorCalls())
func (mock *FilterMock) HasErrorCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockHasError.RLock()
	calls = mock.calls.HasError
	lockFilterMockHasError.RUnlock()
	return calls
}

// HasNextPage calls HasNextPageFunc.
func (mock *FilterMock) HasNextPage() bool {
	if mock.HasNextPageFunc == nil {
		panic("FilterMock.HasNextPageFunc: method is nil but Filter.HasNextPage was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockHasNextPage.Lock()
	mock.calls.HasNextPage = append(mock.calls.HasNextPage, callInfo)
	lockFilterMockHasNextPage.Unlock()
	return mock.HasNextPageFunc()
}

// HasNextPageCalls gets all the calls that were made to HasNextPage.
// Check the length with:
//     len(mockedFilter.HasNextPageCalls())
func (mock *FilterMock) HasNextPageCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockHasNextPage.RLock()
	calls = mock.calls.HasNextPage
	lockFilterMockHasNextPage.RUnlock()
	return calls
}

// HasPreviousPage calls HasPreviousPageFunc.
func (mock *FilterMock) HasPreviousPage() bool {
	if mock.HasPreviousPageFunc == nil {
		panic("FilterMock.HasPreviousPageFunc: method is nil but Filter.HasPreviousPage was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockHasPreviousPage.Lock()
	mock.calls.HasPreviousPage = append(mock.calls.HasPreviousPage, callInfo)
	lockFilterMockHasPreviousPage.Unlock()
	return mock.HasPreviousPageFunc()
}

// HasPreviousPageCalls gets all the calls that were made to HasPreviousPage.
// Check the length with:
//     len(mockedFilter.HasPreviousPageCalls())
func (mock *FilterMock) HasPreviousPageCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockHasPreviousPage.RLock()
	calls = mock.calls.HasPreviousPage
	lockFilterMockHasPreviousPage.RUnlock()
	return calls
}

// HasResults calls HasResultsFunc.
func (mock *FilterMock) HasResults() bool {
	if mock.HasResultsFunc == nil {
		panic("FilterMock.HasResultsFunc: method is nil but Filter.HasResults was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockHasResults.Lock()
	mock.calls.HasResults = append(mock.calls.HasResults, callInfo)
	lockFilterMockHasResults.Unlock()
	return mock.HasResultsFunc()
}

// HasResultsCalls gets all the calls that were made to HasResults.
// Check the length with:
//     len(mockedFilter.HasResultsCalls())
func (mock *FilterMock) HasResultsCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockHasResults.RLock()
	calls = mock.calls.HasResults
	lockFilterMockHasResults.RUnlock()
	return calls
}

// Limit calls LimitFunc.
func (mock *FilterMock) Limit() uint {
	if mock.LimitFunc == nil {
		panic("FilterMock.LimitFunc: method is nil but Filter.Limit was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockLimit.Lock()
	mock.calls.Limit = append(mock.calls.Limit, callInfo)
	lockFilterMockLimit.Unlock()
	return mock.LimitFunc()
}

// LimitCalls gets all the calls that were made to Limit.
// Check the length with:
//     len(mockedFilter.LimitCalls())
func (mock *FilterMock) LimitCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockLimit.RLock()
	calls = mock.calls.Limit
	lockFilterMockLimit.RUnlock()
	return calls
}

// NewColumn calls NewColumnFunc.
func (mock *FilterMock) NewColumn(name string) filters.DisplayColumn {
	if mock.NewColumnFunc == nil {
		panic("FilterMock.NewColumnFunc: method is nil but Filter.NewColumn was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockFilterMockNewColumn.Lock()
	mock.calls.NewColumn = append(mock.calls.NewColumn, callInfo)
	lockFilterMockNewColumn.Unlock()
	return mock.NewColumnFunc(name)
}

// NewColumnCalls gets all the calls that were made to NewColumn.
// Check the length with:
//     len(mockedFilter.NewColumnCalls())
func (mock *FilterMock) NewColumnCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockFilterMockNewColumn.RLock()
	calls = mock.calls.NewColumn
	lockFilterMockNewColumn.RUnlock()
	return calls
}

// NewJoin calls NewJoinFunc.
func (mock *FilterMock) NewJoin(alias string, statement string) filters.Join {
	if mock.NewJoinFunc == nil {
		panic("FilterMock.NewJoinFunc: method is nil but Filter.NewJoin was just called")
	}
	callInfo := struct {
		Alias     string
		Statement string
	}{
		Alias:     alias,
		Statement: statement,
	}
	lockFilterMockNewJoin.Lock()
	mock.calls.NewJoin = append(mock.calls.NewJoin, callInfo)
	lockFilterMockNewJoin.Unlock()
	return mock.NewJoinFunc(alias, statement)
}

// NewJoinCalls gets all the calls that were made to NewJoin.
// Check the length with:
//     len(mockedFilter.NewJoinCalls())
func (mock *FilterMock) NewJoinCalls() []struct {
	Alias     string
	Statement string
} {
	var calls []struct {
		Alias     string
		Statement string
	}
	lockFilterMockNewJoin.RLock()
	calls = mock.calls.NewJoin
	lockFilterMockNewJoin.RUnlock()
	return calls
}

// NewSearchField calls NewSearchFieldFunc.
func (mock *FilterMock) NewSearchField(name string) filters.SearchField {
	if mock.NewSearchFieldFunc == nil {
		panic("FilterMock.NewSearchFieldFunc: method is nil but Filter.NewSearchField was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockFilterMockNewSearchField.Lock()
	mock.calls.NewSearchField = append(mock.calls.NewSearchField, callInfo)
	lockFilterMockNewSearchField.Unlock()
	return mock.NewSearchFieldFunc(name)
}

// NewSearchFieldCalls gets all the calls that were made to NewSearchField.
// Check the length with:
//     len(mockedFilter.NewSearchFieldCalls())
func (mock *FilterMock) NewSearchFieldCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockFilterMockNewSearchField.RLock()
	calls = mock.calls.NewSearchField
	lockFilterMockNewSearchField.RUnlock()
	return calls
}

// NewSelectField calls NewSelectFieldFunc.
func (mock *FilterMock) NewSelectField(name string) filters.SelectField {
	if mock.NewSelectFieldFunc == nil {
		panic("FilterMock.NewSelectFieldFunc: method is nil but Filter.NewSelectField was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockFilterMockNewSelectField.Lock()
	mock.calls.NewSelectField = append(mock.calls.NewSelectField, callInfo)
	lockFilterMockNewSelectField.Unlock()
	return mock.NewSelectFieldFunc(name)
}

// NewSelectFieldCalls gets all the calls that were made to NewSelectField.
// Check the length with:
//     len(mockedFilter.NewSelectFieldCalls())
func (mock *FilterMock) NewSelectFieldCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockFilterMockNewSelectField.RLock()
	calls = mock.calls.NewSelectField
	lockFilterMockNewSelectField.RUnlock()
	return calls
}

// NewSortField calls NewSortFieldFunc.
func (mock *FilterMock) NewSortField(name string, descending bool) filters.SortField {
	if mock.NewSortFieldFunc == nil {
		panic("FilterMock.NewSortFieldFunc: method is nil but Filter.NewSortField was just called")
	}
	callInfo := struct {
		Name       string
		Descending bool
	}{
		Name:       name,
		Descending: descending,
	}
	lockFilterMockNewSortField.Lock()
	mock.calls.NewSortField = append(mock.calls.NewSortField, callInfo)
	lockFilterMockNewSortField.Unlock()
	return mock.NewSortFieldFunc(name, descending)
}

// NewSortFieldCalls gets all the calls that were made to NewSortField.
// Check the length with:
//     len(mockedFilter.NewSortFieldCalls())
func (mock *FilterMock) NewSortFieldCalls() []struct {
	Name       string
	Descending bool
} {
	var calls []struct {
		Name       string
		Descending bool
	}
	lockFilterMockNewSortField.RLock()
	calls = mock.calls.NewSortField
	lockFilterMockNewSortField.RUnlock()
	return calls
}

// PaginationBlocks calls PaginationBlocksFunc.
func (mock *FilterMock) PaginationBlocks() []uint {
	if mock.PaginationBlocksFunc == nil {
		panic("FilterMock.PaginationBlocksFunc: method is nil but Filter.PaginationBlocks was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockPaginationBlocks.Lock()
	mock.calls.PaginationBlocks = append(mock.calls.PaginationBlocks, callInfo)
	lockFilterMockPaginationBlocks.Unlock()
	return mock.PaginationBlocksFunc()
}

// PaginationBlocksCalls gets all the calls that were made to PaginationBlocks.
// Check the length with:
//     len(mockedFilter.PaginationBlocksCalls())
func (mock *FilterMock) PaginationBlocksCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockPaginationBlocks.RLock()
	calls = mock.calls.PaginationBlocks
	lockFilterMockPaginationBlocks.RUnlock()
	return calls
}

// Process calls ProcessFunc.
func (mock *FilterMock) Process() error {
	if mock.ProcessFunc == nil {
		panic("FilterMock.ProcessFunc: method is nil but Filter.Process was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	lockFilterMockProcess.Unlock()
	return mock.ProcessFunc()
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//     len(mockedFilter.ProcessCalls())
func (mock *FilterMock) ProcessCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockProcess.RLock()
	calls = mock.calls.Process
	lockFilterMockProcess.RUnlock()
	return calls
}

// RenderOverviewColumnTableHeaders calls RenderOverviewColumnTableHeadersFunc.
func (mock *FilterMock) RenderOverviewColumnTableHeaders(ctx filters.Context) string {
	if mock.RenderOverviewColumnTableHeadersFunc == nil {
		panic("FilterMock.RenderOverviewColumnTableHeadersFunc: method is nil but Filter.RenderOverviewColumnTableHeaders was just called")
	}
	callInfo := struct {
		Ctx filters.Context
	}{
		Ctx: ctx,
	}
	lockFilterMockRenderOverviewColumnTableHeaders.Lock()
	mock.calls.RenderOverviewColumnTableHeaders = append(mock.calls.RenderOverviewColumnTableHeaders, callInfo)
	lockFilterMockRenderOverviewColumnTableHeaders.Unlock()
	return mock.RenderOverviewColumnTableHeadersFunc(ctx)
}

// RenderOverviewColumnTableHeadersCalls gets all the calls that were made to RenderOverviewColumnTableHeaders.
// Check the length with:
//     len(mockedFilter.RenderOverviewColumnTableHeadersCalls())
func (mock *FilterMock) RenderOverviewColumnTableHeadersCalls() []struct {
	Ctx filters.Context
} {
	var calls []struct {
		Ctx filters.Context
	}
	lockFilterMockRenderOverviewColumnTableHeaders.RLock()
	calls = mock.calls.RenderOverviewColumnTableHeaders
	lockFilterMockRenderOverviewColumnTableHeaders.RUnlock()
	return calls
}

// RenderOverviewFilter calls RenderOverviewFilterFunc.
func (mock *FilterMock) RenderOverviewFilter(ctx filters.Context) string {
	if mock.RenderOverviewFilterFunc == nil {
		panic("FilterMock.RenderOverviewFilterFunc: method is nil but Filter.RenderOverviewFilter was just called")
	}
	callInfo := struct {
		Ctx filters.Context
	}{
		Ctx: ctx,
	}
	lockFilterMockRenderOverviewFilter.Lock()
	mock.calls.RenderOverviewFilter = append(mock.calls.RenderOverviewFilter, callInfo)
	lockFilterMockRenderOverviewFilter.Unlock()
	return mock.RenderOverviewFilterFunc(ctx)
}

// RenderOverviewFilterCalls gets all the calls that were made to RenderOverviewFilter.
// Check the length with:
//     len(mockedFilter.RenderOverviewFilterCalls())
func (mock *FilterMock) RenderOverviewFilterCalls() []struct {
	Ctx filters.Context
} {
	var calls []struct {
		Ctx filters.Context
	}
	lockFilterMockRenderOverviewFilter.RLock()
	calls = mock.calls.RenderOverviewFilter
	lockFilterMockRenderOverviewFilter.RUnlock()
	return calls
}

// Rows calls RowsFunc.
func (mock *FilterMock) Rows() database.Rows {
	if mock.RowsFunc == nil {
		panic("FilterMock.RowsFunc: method is nil but Filter.Rows was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockRows.Lock()
	mock.calls.Rows = append(mock.calls.Rows, callInfo)
	lockFilterMockRows.Unlock()
	return mock.RowsFunc()
}

// RowsCalls gets all the calls that were made to Rows.
// Check the length with:
//     len(mockedFilter.RowsCalls())
func (mock *FilterMock) RowsCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockRows.RLock()
	calls = mock.calls.Rows
	lockFilterMockRows.RUnlock()
	return calls
}

// ShouldShowSearch calls ShouldShowSearchFunc.
func (mock *FilterMock) ShouldShowSearch() bool {
	if mock.ShouldShowSearchFunc == nil {
		panic("FilterMock.ShouldShowSearchFunc: method is nil but Filter.ShouldShowSearch was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockShouldShowSearch.Lock()
	mock.calls.ShouldShowSearch = append(mock.calls.ShouldShowSearch, callInfo)
	lockFilterMockShouldShowSearch.Unlock()
	return mock.ShouldShowSearchFunc()
}

// ShouldShowSearchCalls gets all the calls that were made to ShouldShowSearch.
// Check the length with:
//     len(mockedFilter.ShouldShowSearchCalls())
func (mock *FilterMock) ShouldShowSearchCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockShouldShowSearch.RLock()
	calls = mock.calls.ShouldShowSearch
	lockFilterMockShouldShowSearch.RUnlock()
	return calls
}

// TableAlias calls TableAliasFunc.
func (mock *FilterMock) TableAlias() string {
	if mock.TableAliasFunc == nil {
		panic("FilterMock.TableAliasFunc: method is nil but Filter.TableAlias was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockTableAlias.Lock()
	mock.calls.TableAlias = append(mock.calls.TableAlias, callInfo)
	lockFilterMockTableAlias.Unlock()
	return mock.TableAliasFunc()
}

// TableAliasCalls gets all the calls that were made to TableAlias.
// Check the length with:
//     len(mockedFilter.TableAliasCalls())
func (mock *FilterMock) TableAliasCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockTableAlias.RLock()
	calls = mock.calls.TableAlias
	lockFilterMockTableAlias.RUnlock()
	return calls
}

// TotalPages calls TotalPagesFunc.
func (mock *FilterMock) TotalPages() uint {
	if mock.TotalPagesFunc == nil {
		panic("FilterMock.TotalPagesFunc: method is nil but Filter.TotalPages was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockTotalPages.Lock()
	mock.calls.TotalPages = append(mock.calls.TotalPages, callInfo)
	lockFilterMockTotalPages.Unlock()
	return mock.TotalPagesFunc()
}

// TotalPagesCalls gets all the calls that were made to TotalPages.
// Check the length with:
//     len(mockedFilter.TotalPagesCalls())
func (mock *FilterMock) TotalPagesCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockTotalPages.RLock()
	calls = mock.calls.TotalPages
	lockFilterMockTotalPages.RUnlock()
	return calls
}

// TotalResults calls TotalResultsFunc.
func (mock *FilterMock) TotalResults() uint {
	if mock.TotalResultsFunc == nil {
		panic("FilterMock.TotalResultsFunc: method is nil but Filter.TotalResults was just called")
	}
	callInfo := struct {
	}{}
	lockFilterMockTotalResults.Lock()
	mock.calls.TotalResults = append(mock.calls.TotalResults, callInfo)
	lockFilterMockTotalResults.Unlock()
	return mock.TotalResultsFunc()
}

// TotalResultsCalls gets all the calls that were made to TotalResults.
// Check the length with:
//     len(mockedFilter.TotalResultsCalls())
func (mock *FilterMock) TotalResultsCalls() []struct {
} {
	var calls []struct {
	}
	lockFilterMockTotalResults.RLock()
	calls = mock.calls.TotalResults
	lockFilterMockTotalResults.RUnlock()
	return calls
}

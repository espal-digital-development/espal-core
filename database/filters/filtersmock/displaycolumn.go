// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package filtersmock

import (
	"github.com/espal-digital-development/espal-core/database/filters"
	"sync"
)

var (
	lockDisplayColumnMockName      sync.RWMutex
	lockDisplayColumnMockPlural    sync.RWMutex
	lockDisplayColumnMockSetPlural sync.RWMutex
)

// DisplayColumnMock is a mock implementation of DisplayColumn.
//
//     func TestSomethingThatUsesDisplayColumn(t *testing.T) {
//
//         // make and configure a mocked DisplayColumn
//         mockedDisplayColumn := &DisplayColumnMock{
//             NameFunc: func() string {
// 	               panic("mock out the Name method")
//             },
//             PluralFunc: func() bool {
// 	               panic("mock out the Plural method")
//             },
//             SetPluralFunc: func(plural bool) filters.DisplayColumn {
// 	               panic("mock out the SetPlural method")
//             },
//         }
//
//         // use mockedDisplayColumn in code that requires DisplayColumn
//         // and then make assertions.
//
//     }
type DisplayColumnMock struct {
	// NameFunc mocks the Name method.
	NameFunc func() string

	// PluralFunc mocks the Plural method.
	PluralFunc func() bool

	// SetPluralFunc mocks the SetPlural method.
	SetPluralFunc func(plural bool) filters.DisplayColumn

	// calls tracks calls to the methods.
	calls struct {
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Plural holds details about calls to the Plural method.
		Plural []struct {
		}
		// SetPlural holds details about calls to the SetPlural method.
		SetPlural []struct {
			// Plural is the plural argument value.
			Plural bool
		}
	}
}

// Name calls NameFunc.
func (mock *DisplayColumnMock) Name() string {
	if mock.NameFunc == nil {
		panic("DisplayColumnMock.NameFunc: method is nil but DisplayColumn.Name was just called")
	}
	callInfo := struct {
	}{}
	lockDisplayColumnMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockDisplayColumnMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedDisplayColumn.NameCalls())
func (mock *DisplayColumnMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockDisplayColumnMockName.RLock()
	calls = mock.calls.Name
	lockDisplayColumnMockName.RUnlock()
	return calls
}

// Plural calls PluralFunc.
func (mock *DisplayColumnMock) Plural() bool {
	if mock.PluralFunc == nil {
		panic("DisplayColumnMock.PluralFunc: method is nil but DisplayColumn.Plural was just called")
	}
	callInfo := struct {
	}{}
	lockDisplayColumnMockPlural.Lock()
	mock.calls.Plural = append(mock.calls.Plural, callInfo)
	lockDisplayColumnMockPlural.Unlock()
	return mock.PluralFunc()
}

// PluralCalls gets all the calls that were made to Plural.
// Check the length with:
//     len(mockedDisplayColumn.PluralCalls())
func (mock *DisplayColumnMock) PluralCalls() []struct {
} {
	var calls []struct {
	}
	lockDisplayColumnMockPlural.RLock()
	calls = mock.calls.Plural
	lockDisplayColumnMockPlural.RUnlock()
	return calls
}

// SetPlural calls SetPluralFunc.
func (mock *DisplayColumnMock) SetPlural(plural bool) filters.DisplayColumn {
	if mock.SetPluralFunc == nil {
		panic("DisplayColumnMock.SetPluralFunc: method is nil but DisplayColumn.SetPlural was just called")
	}
	callInfo := struct {
		Plural bool
	}{
		Plural: plural,
	}
	lockDisplayColumnMockSetPlural.Lock()
	mock.calls.SetPlural = append(mock.calls.SetPlural, callInfo)
	lockDisplayColumnMockSetPlural.Unlock()
	return mock.SetPluralFunc(plural)
}

// SetPluralCalls gets all the calls that were made to SetPlural.
// Check the length with:
//     len(mockedDisplayColumn.SetPluralCalls())
func (mock *DisplayColumnMock) SetPluralCalls() []struct {
	Plural bool
} {
	var calls []struct {
		Plural bool
	}
	lockDisplayColumnMockSetPlural.RLock()
	calls = mock.calls.SetPlural
	lockDisplayColumnMockSetPlural.RUnlock()
	return calls
}

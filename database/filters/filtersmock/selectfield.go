// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package filtersmock

import (
	"github.com/espal-digital-development/espal-core/database/filters"
	"sync"
)

var (
	lockSelectFieldMockAlias    sync.RWMutex
	lockSelectFieldMockName     sync.RWMutex
	lockSelectFieldMockSetAlias sync.RWMutex
	lockSelectFieldMockSetMapTo sync.RWMutex
)

// Ensure, that SelectFieldMock does implement filters.SelectField.
// If this is not the case, regenerate this file with moq.
var _ filters.SelectField = &SelectFieldMock{}

// SelectFieldMock is a mock implementation of filters.SelectField.
//
//     func TestSomethingThatUsesSelectField(t *testing.T) {
//
//         // make and configure a mocked filters.SelectField
//         mockedSelectField := &SelectFieldMock{
//             AliasFunc: func() string {
// 	               panic("mock out the Alias method")
//             },
//             NameFunc: func() string {
// 	               panic("mock out the Name method")
//             },
//             SetAliasFunc: func(alias string) filters.SelectField {
// 	               panic("mock out the SetAlias method")
//             },
//             SetMapToFunc: func(mapTo string) filters.SelectField {
// 	               panic("mock out the SetMapTo method")
//             },
//         }
//
//         // use mockedSelectField in code that requires filters.SelectField
//         // and then make assertions.
//
//     }
type SelectFieldMock struct {
	// AliasFunc mocks the Alias method.
	AliasFunc func() string

	// NameFunc mocks the Name method.
	NameFunc func() string

	// SetAliasFunc mocks the SetAlias method.
	SetAliasFunc func(alias string) filters.SelectField

	// SetMapToFunc mocks the SetMapTo method.
	SetMapToFunc func(mapTo string) filters.SelectField

	// calls tracks calls to the methods.
	calls struct {
		// Alias holds details about calls to the Alias method.
		Alias []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// SetAlias holds details about calls to the SetAlias method.
		SetAlias []struct {
			// Alias is the alias argument value.
			Alias string
		}
		// SetMapTo holds details about calls to the SetMapTo method.
		SetMapTo []struct {
			// MapTo is the mapTo argument value.
			MapTo string
		}
	}
}

// Alias calls AliasFunc.
func (mock *SelectFieldMock) Alias() string {
	if mock.AliasFunc == nil {
		panic("SelectFieldMock.AliasFunc: method is nil but SelectField.Alias was just called")
	}
	callInfo := struct {
	}{}
	lockSelectFieldMockAlias.Lock()
	mock.calls.Alias = append(mock.calls.Alias, callInfo)
	lockSelectFieldMockAlias.Unlock()
	return mock.AliasFunc()
}

// AliasCalls gets all the calls that were made to Alias.
// Check the length with:
//     len(mockedSelectField.AliasCalls())
func (mock *SelectFieldMock) AliasCalls() []struct {
} {
	var calls []struct {
	}
	lockSelectFieldMockAlias.RLock()
	calls = mock.calls.Alias
	lockSelectFieldMockAlias.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *SelectFieldMock) Name() string {
	if mock.NameFunc == nil {
		panic("SelectFieldMock.NameFunc: method is nil but SelectField.Name was just called")
	}
	callInfo := struct {
	}{}
	lockSelectFieldMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockSelectFieldMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedSelectField.NameCalls())
func (mock *SelectFieldMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockSelectFieldMockName.RLock()
	calls = mock.calls.Name
	lockSelectFieldMockName.RUnlock()
	return calls
}

// SetAlias calls SetAliasFunc.
func (mock *SelectFieldMock) SetAlias(alias string) filters.SelectField {
	if mock.SetAliasFunc == nil {
		panic("SelectFieldMock.SetAliasFunc: method is nil but SelectField.SetAlias was just called")
	}
	callInfo := struct {
		Alias string
	}{
		Alias: alias,
	}
	lockSelectFieldMockSetAlias.Lock()
	mock.calls.SetAlias = append(mock.calls.SetAlias, callInfo)
	lockSelectFieldMockSetAlias.Unlock()
	return mock.SetAliasFunc(alias)
}

// SetAliasCalls gets all the calls that were made to SetAlias.
// Check the length with:
//     len(mockedSelectField.SetAliasCalls())
func (mock *SelectFieldMock) SetAliasCalls() []struct {
	Alias string
} {
	var calls []struct {
		Alias string
	}
	lockSelectFieldMockSetAlias.RLock()
	calls = mock.calls.SetAlias
	lockSelectFieldMockSetAlias.RUnlock()
	return calls
}

// SetMapTo calls SetMapToFunc.
func (mock *SelectFieldMock) SetMapTo(mapTo string) filters.SelectField {
	if mock.SetMapToFunc == nil {
		panic("SelectFieldMock.SetMapToFunc: method is nil but SelectField.SetMapTo was just called")
	}
	callInfo := struct {
		MapTo string
	}{
		MapTo: mapTo,
	}
	lockSelectFieldMockSetMapTo.Lock()
	mock.calls.SetMapTo = append(mock.calls.SetMapTo, callInfo)
	lockSelectFieldMockSetMapTo.Unlock()
	return mock.SetMapToFunc(mapTo)
}

// SetMapToCalls gets all the calls that were made to SetMapTo.
// Check the length with:
//     len(mockedSelectField.SetMapToCalls())
func (mock *SelectFieldMock) SetMapToCalls() []struct {
	MapTo string
} {
	var calls []struct {
		MapTo string
	}
	lockSelectFieldMockSetMapTo.RLock()
	calls = mock.calls.SetMapTo
	lockSelectFieldMockSetMapTo.RUnlock()
	return calls
}

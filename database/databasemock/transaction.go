// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package databasemock

import (
	"github.com/espal-digital-development/espal-core/database"
	"sync"
)

var (
	lockTransactionMockCommit   sync.RWMutex
	lockTransactionMockExec     sync.RWMutex
	lockTransactionMockQuery    sync.RWMutex
	lockTransactionMockRollback sync.RWMutex
)

// Ensure, that TransactionMock does implement database.Transaction.
// If this is not the case, regenerate this file with moq.
var _ database.Transaction = &TransactionMock{}

// TransactionMock is a mock implementation of database.Transaction.
//
//     func TestSomethingThatUsesTransaction(t *testing.T) {
//
//         // make and configure a mocked database.Transaction
//         mockedTransaction := &TransactionMock{
//             CommitFunc: func() error {
// 	               panic("mock out the Commit method")
//             },
//             ExecFunc: func(query string, args ...interface{}) (database.Result, error) {
// 	               panic("mock out the Exec method")
//             },
//             QueryFunc: func(query string, args ...interface{}) (database.Rows, error) {
// 	               panic("mock out the Query method")
//             },
//             RollbackFunc: func() error {
// 	               panic("mock out the Rollback method")
//             },
//         }
//
//         // use mockedTransaction in code that requires database.Transaction
//         // and then make assertions.
//
//     }
type TransactionMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func() error

	// ExecFunc mocks the Exec method.
	ExecFunc func(query string, args ...interface{}) (database.Result, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(query string, args ...interface{}) (database.Rows, error)

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
		}
	}
}

// Commit calls CommitFunc.
func (mock *TransactionMock) Commit() error {
	if mock.CommitFunc == nil {
		panic("TransactionMock.CommitFunc: method is nil but Transaction.Commit was just called")
	}
	callInfo := struct {
	}{}
	lockTransactionMockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	lockTransactionMockCommit.Unlock()
	return mock.CommitFunc()
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//     len(mockedTransaction.CommitCalls())
func (mock *TransactionMock) CommitCalls() []struct {
} {
	var calls []struct {
	}
	lockTransactionMockCommit.RLock()
	calls = mock.calls.Commit
	lockTransactionMockCommit.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *TransactionMock) Exec(query string, args ...interface{}) (database.Result, error) {
	if mock.ExecFunc == nil {
		panic("TransactionMock.ExecFunc: method is nil but Transaction.Exec was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	lockTransactionMockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	lockTransactionMockExec.Unlock()
	return mock.ExecFunc(query, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedTransaction.ExecCalls())
func (mock *TransactionMock) ExecCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	lockTransactionMockExec.RLock()
	calls = mock.calls.Exec
	lockTransactionMockExec.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *TransactionMock) Query(query string, args ...interface{}) (database.Rows, error) {
	if mock.QueryFunc == nil {
		panic("TransactionMock.QueryFunc: method is nil but Transaction.Query was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	lockTransactionMockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	lockTransactionMockQuery.Unlock()
	return mock.QueryFunc(query, args...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedTransaction.QueryCalls())
func (mock *TransactionMock) QueryCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	lockTransactionMockQuery.RLock()
	calls = mock.calls.Query
	lockTransactionMockQuery.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *TransactionMock) Rollback() error {
	if mock.RollbackFunc == nil {
		panic("TransactionMock.RollbackFunc: method is nil but Transaction.Rollback was just called")
	}
	callInfo := struct {
	}{}
	lockTransactionMockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	lockTransactionMockRollback.Unlock()
	return mock.RollbackFunc()
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//     len(mockedTransaction.RollbackCalls())
func (mock *TransactionMock) RollbackCalls() []struct {
} {
	var calls []struct {
	}
	lockTransactionMockRollback.RLock()
	calls = mock.calls.Rollback
	lockTransactionMockRollback.RUnlock()
	return calls
}

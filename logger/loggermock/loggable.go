// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package loggermock

import (
	"sync"
)

var (
	lockLoggableMockCustom         sync.RWMutex
	lockLoggableMockCustomf        sync.RWMutex
	lockLoggableMockDisable        sync.RWMutex
	lockLoggableMockEnable         sync.RWMutex
	lockLoggableMockEnableTestMode sync.RWMutex
	lockLoggableMockError          sync.RWMutex
	lockLoggableMockErrorf         sync.RWMutex
	lockLoggableMockGetLastMessage sync.RWMutex
	lockLoggableMockInfo           sync.RWMutex
	lockLoggableMockInfof          sync.RWMutex
	lockLoggableMockIsEnabled      sync.RWMutex
	lockLoggableMockWarning        sync.RWMutex
	lockLoggableMockWarningf       sync.RWMutex
)

// LoggableMock is a mock implementation of Loggable.
//
//     func TestSomethingThatUsesLoggable(t *testing.T) {
//
//         // make and configure a mocked Loggable
//         mockedLoggable := &LoggableMock{
//             CustomFunc: func(message string, callback func(string) string)  {
// 	               panic("mock out the Custom method")
//             },
//             CustomfFunc: func(message string, callback func(string) string, params ...interface{})  {
// 	               panic("mock out the Customf method")
//             },
//             DisableFunc: func()  {
// 	               panic("mock out the Disable method")
//             },
//             EnableFunc: func()  {
// 	               panic("mock out the Enable method")
//             },
//             EnableTestModeFunc: func()  {
// 	               panic("mock out the EnableTestMode method")
//             },
//             ErrorFunc: func(message string)  {
// 	               panic("mock out the Error method")
//             },
//             ErrorfFunc: func(message string, params ...interface{})  {
// 	               panic("mock out the Errorf method")
//             },
//             GetLastMessageFunc: func() string {
// 	               panic("mock out the GetLastMessage method")
//             },
//             InfoFunc: func(message string)  {
// 	               panic("mock out the Info method")
//             },
//             InfofFunc: func(message string, params ...interface{})  {
// 	               panic("mock out the Infof method")
//             },
//             IsEnabledFunc: func() bool {
// 	               panic("mock out the IsEnabled method")
//             },
//             WarningFunc: func(message string)  {
// 	               panic("mock out the Warning method")
//             },
//             WarningfFunc: func(message string, params ...interface{})  {
// 	               panic("mock out the Warningf method")
//             },
//         }
//
//         // use mockedLoggable in code that requires Loggable
//         // and then make assertions.
//
//     }
type LoggableMock struct {
	// CustomFunc mocks the Custom method.
	CustomFunc func(message string, callback func(string) string)

	// CustomfFunc mocks the Customf method.
	CustomfFunc func(message string, callback func(string) string, params ...interface{})

	// DisableFunc mocks the Disable method.
	DisableFunc func()

	// EnableFunc mocks the Enable method.
	EnableFunc func()

	// EnableTestModeFunc mocks the EnableTestMode method.
	EnableTestModeFunc func()

	// ErrorFunc mocks the Error method.
	ErrorFunc func(message string)

	// ErrorfFunc mocks the Errorf method.
	ErrorfFunc func(message string, params ...interface{})

	// GetLastMessageFunc mocks the GetLastMessage method.
	GetLastMessageFunc func() string

	// InfoFunc mocks the Info method.
	InfoFunc func(message string)

	// InfofFunc mocks the Infof method.
	InfofFunc func(message string, params ...interface{})

	// IsEnabledFunc mocks the IsEnabled method.
	IsEnabledFunc func() bool

	// WarningFunc mocks the Warning method.
	WarningFunc func(message string)

	// WarningfFunc mocks the Warningf method.
	WarningfFunc func(message string, params ...interface{})

	// calls tracks calls to the methods.
	calls struct {
		// Custom holds details about calls to the Custom method.
		Custom []struct {
			// Message is the message argument value.
			Message string
			// Callback is the callback argument value.
			Callback func(string) string
		}
		// Customf holds details about calls to the Customf method.
		Customf []struct {
			// Message is the message argument value.
			Message string
			// Callback is the callback argument value.
			Callback func(string) string
			// Params is the params argument value.
			Params []interface{}
		}
		// Disable holds details about calls to the Disable method.
		Disable []struct {
		}
		// Enable holds details about calls to the Enable method.
		Enable []struct {
		}
		// EnableTestMode holds details about calls to the EnableTestMode method.
		EnableTestMode []struct {
		}
		// Error holds details about calls to the Error method.
		Error []struct {
			// Message is the message argument value.
			Message string
		}
		// Errorf holds details about calls to the Errorf method.
		Errorf []struct {
			// Message is the message argument value.
			Message string
			// Params is the params argument value.
			Params []interface{}
		}
		// GetLastMessage holds details about calls to the GetLastMessage method.
		GetLastMessage []struct {
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Message is the message argument value.
			Message string
		}
		// Infof holds details about calls to the Infof method.
		Infof []struct {
			// Message is the message argument value.
			Message string
			// Params is the params argument value.
			Params []interface{}
		}
		// IsEnabled holds details about calls to the IsEnabled method.
		IsEnabled []struct {
		}
		// Warning holds details about calls to the Warning method.
		Warning []struct {
			// Message is the message argument value.
			Message string
		}
		// Warningf holds details about calls to the Warningf method.
		Warningf []struct {
			// Message is the message argument value.
			Message string
			// Params is the params argument value.
			Params []interface{}
		}
	}
}

// Custom calls CustomFunc.
func (mock *LoggableMock) Custom(message string, callback func(string) string) {
	if mock.CustomFunc == nil {
		panic("LoggableMock.CustomFunc: method is nil but Loggable.Custom was just called")
	}
	callInfo := struct {
		Message  string
		Callback func(string) string
	}{
		Message:  message,
		Callback: callback,
	}
	lockLoggableMockCustom.Lock()
	mock.calls.Custom = append(mock.calls.Custom, callInfo)
	lockLoggableMockCustom.Unlock()
	mock.CustomFunc(message, callback)
}

// CustomCalls gets all the calls that were made to Custom.
// Check the length with:
//     len(mockedLoggable.CustomCalls())
func (mock *LoggableMock) CustomCalls() []struct {
	Message  string
	Callback func(string) string
} {
	var calls []struct {
		Message  string
		Callback func(string) string
	}
	lockLoggableMockCustom.RLock()
	calls = mock.calls.Custom
	lockLoggableMockCustom.RUnlock()
	return calls
}

// Customf calls CustomfFunc.
func (mock *LoggableMock) Customf(message string, callback func(string) string, params ...interface{}) {
	if mock.CustomfFunc == nil {
		panic("LoggableMock.CustomfFunc: method is nil but Loggable.Customf was just called")
	}
	callInfo := struct {
		Message  string
		Callback func(string) string
		Params   []interface{}
	}{
		Message:  message,
		Callback: callback,
		Params:   params,
	}
	lockLoggableMockCustomf.Lock()
	mock.calls.Customf = append(mock.calls.Customf, callInfo)
	lockLoggableMockCustomf.Unlock()
	mock.CustomfFunc(message, callback, params...)
}

// CustomfCalls gets all the calls that were made to Customf.
// Check the length with:
//     len(mockedLoggable.CustomfCalls())
func (mock *LoggableMock) CustomfCalls() []struct {
	Message  string
	Callback func(string) string
	Params   []interface{}
} {
	var calls []struct {
		Message  string
		Callback func(string) string
		Params   []interface{}
	}
	lockLoggableMockCustomf.RLock()
	calls = mock.calls.Customf
	lockLoggableMockCustomf.RUnlock()
	return calls
}

// Disable calls DisableFunc.
func (mock *LoggableMock) Disable() {
	if mock.DisableFunc == nil {
		panic("LoggableMock.DisableFunc: method is nil but Loggable.Disable was just called")
	}
	callInfo := struct {
	}{}
	lockLoggableMockDisable.Lock()
	mock.calls.Disable = append(mock.calls.Disable, callInfo)
	lockLoggableMockDisable.Unlock()
	mock.DisableFunc()
}

// DisableCalls gets all the calls that were made to Disable.
// Check the length with:
//     len(mockedLoggable.DisableCalls())
func (mock *LoggableMock) DisableCalls() []struct {
} {
	var calls []struct {
	}
	lockLoggableMockDisable.RLock()
	calls = mock.calls.Disable
	lockLoggableMockDisable.RUnlock()
	return calls
}

// Enable calls EnableFunc.
func (mock *LoggableMock) Enable() {
	if mock.EnableFunc == nil {
		panic("LoggableMock.EnableFunc: method is nil but Loggable.Enable was just called")
	}
	callInfo := struct {
	}{}
	lockLoggableMockEnable.Lock()
	mock.calls.Enable = append(mock.calls.Enable, callInfo)
	lockLoggableMockEnable.Unlock()
	mock.EnableFunc()
}

// EnableCalls gets all the calls that were made to Enable.
// Check the length with:
//     len(mockedLoggable.EnableCalls())
func (mock *LoggableMock) EnableCalls() []struct {
} {
	var calls []struct {
	}
	lockLoggableMockEnable.RLock()
	calls = mock.calls.Enable
	lockLoggableMockEnable.RUnlock()
	return calls
}

// EnableTestMode calls EnableTestModeFunc.
func (mock *LoggableMock) EnableTestMode() {
	if mock.EnableTestModeFunc == nil {
		panic("LoggableMock.EnableTestModeFunc: method is nil but Loggable.EnableTestMode was just called")
	}
	callInfo := struct {
	}{}
	lockLoggableMockEnableTestMode.Lock()
	mock.calls.EnableTestMode = append(mock.calls.EnableTestMode, callInfo)
	lockLoggableMockEnableTestMode.Unlock()
	mock.EnableTestModeFunc()
}

// EnableTestModeCalls gets all the calls that were made to EnableTestMode.
// Check the length with:
//     len(mockedLoggable.EnableTestModeCalls())
func (mock *LoggableMock) EnableTestModeCalls() []struct {
} {
	var calls []struct {
	}
	lockLoggableMockEnableTestMode.RLock()
	calls = mock.calls.EnableTestMode
	lockLoggableMockEnableTestMode.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *LoggableMock) Error(message string) {
	if mock.ErrorFunc == nil {
		panic("LoggableMock.ErrorFunc: method is nil but Loggable.Error was just called")
	}
	callInfo := struct {
		Message string
	}{
		Message: message,
	}
	lockLoggableMockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	lockLoggableMockError.Unlock()
	mock.ErrorFunc(message)
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//     len(mockedLoggable.ErrorCalls())
func (mock *LoggableMock) ErrorCalls() []struct {
	Message string
} {
	var calls []struct {
		Message string
	}
	lockLoggableMockError.RLock()
	calls = mock.calls.Error
	lockLoggableMockError.RUnlock()
	return calls
}

// Errorf calls ErrorfFunc.
func (mock *LoggableMock) Errorf(message string, params ...interface{}) {
	if mock.ErrorfFunc == nil {
		panic("LoggableMock.ErrorfFunc: method is nil but Loggable.Errorf was just called")
	}
	callInfo := struct {
		Message string
		Params  []interface{}
	}{
		Message: message,
		Params:  params,
	}
	lockLoggableMockErrorf.Lock()
	mock.calls.Errorf = append(mock.calls.Errorf, callInfo)
	lockLoggableMockErrorf.Unlock()
	mock.ErrorfFunc(message, params...)
}

// ErrorfCalls gets all the calls that were made to Errorf.
// Check the length with:
//     len(mockedLoggable.ErrorfCalls())
func (mock *LoggableMock) ErrorfCalls() []struct {
	Message string
	Params  []interface{}
} {
	var calls []struct {
		Message string
		Params  []interface{}
	}
	lockLoggableMockErrorf.RLock()
	calls = mock.calls.Errorf
	lockLoggableMockErrorf.RUnlock()
	return calls
}

// GetLastMessage calls GetLastMessageFunc.
func (mock *LoggableMock) GetLastMessage() string {
	if mock.GetLastMessageFunc == nil {
		panic("LoggableMock.GetLastMessageFunc: method is nil but Loggable.GetLastMessage was just called")
	}
	callInfo := struct {
	}{}
	lockLoggableMockGetLastMessage.Lock()
	mock.calls.GetLastMessage = append(mock.calls.GetLastMessage, callInfo)
	lockLoggableMockGetLastMessage.Unlock()
	return mock.GetLastMessageFunc()
}

// GetLastMessageCalls gets all the calls that were made to GetLastMessage.
// Check the length with:
//     len(mockedLoggable.GetLastMessageCalls())
func (mock *LoggableMock) GetLastMessageCalls() []struct {
} {
	var calls []struct {
	}
	lockLoggableMockGetLastMessage.RLock()
	calls = mock.calls.GetLastMessage
	lockLoggableMockGetLastMessage.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *LoggableMock) Info(message string) {
	if mock.InfoFunc == nil {
		panic("LoggableMock.InfoFunc: method is nil but Loggable.Info was just called")
	}
	callInfo := struct {
		Message string
	}{
		Message: message,
	}
	lockLoggableMockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	lockLoggableMockInfo.Unlock()
	mock.InfoFunc(message)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//     len(mockedLoggable.InfoCalls())
func (mock *LoggableMock) InfoCalls() []struct {
	Message string
} {
	var calls []struct {
		Message string
	}
	lockLoggableMockInfo.RLock()
	calls = mock.calls.Info
	lockLoggableMockInfo.RUnlock()
	return calls
}

// Infof calls InfofFunc.
func (mock *LoggableMock) Infof(message string, params ...interface{}) {
	if mock.InfofFunc == nil {
		panic("LoggableMock.InfofFunc: method is nil but Loggable.Infof was just called")
	}
	callInfo := struct {
		Message string
		Params  []interface{}
	}{
		Message: message,
		Params:  params,
	}
	lockLoggableMockInfof.Lock()
	mock.calls.Infof = append(mock.calls.Infof, callInfo)
	lockLoggableMockInfof.Unlock()
	mock.InfofFunc(message, params...)
}

// InfofCalls gets all the calls that were made to Infof.
// Check the length with:
//     len(mockedLoggable.InfofCalls())
func (mock *LoggableMock) InfofCalls() []struct {
	Message string
	Params  []interface{}
} {
	var calls []struct {
		Message string
		Params  []interface{}
	}
	lockLoggableMockInfof.RLock()
	calls = mock.calls.Infof
	lockLoggableMockInfof.RUnlock()
	return calls
}

// IsEnabled calls IsEnabledFunc.
func (mock *LoggableMock) IsEnabled() bool {
	if mock.IsEnabledFunc == nil {
		panic("LoggableMock.IsEnabledFunc: method is nil but Loggable.IsEnabled was just called")
	}
	callInfo := struct {
	}{}
	lockLoggableMockIsEnabled.Lock()
	mock.calls.IsEnabled = append(mock.calls.IsEnabled, callInfo)
	lockLoggableMockIsEnabled.Unlock()
	return mock.IsEnabledFunc()
}

// IsEnabledCalls gets all the calls that were made to IsEnabled.
// Check the length with:
//     len(mockedLoggable.IsEnabledCalls())
func (mock *LoggableMock) IsEnabledCalls() []struct {
} {
	var calls []struct {
	}
	lockLoggableMockIsEnabled.RLock()
	calls = mock.calls.IsEnabled
	lockLoggableMockIsEnabled.RUnlock()
	return calls
}

// Warning calls WarningFunc.
func (mock *LoggableMock) Warning(message string) {
	if mock.WarningFunc == nil {
		panic("LoggableMock.WarningFunc: method is nil but Loggable.Warning was just called")
	}
	callInfo := struct {
		Message string
	}{
		Message: message,
	}
	lockLoggableMockWarning.Lock()
	mock.calls.Warning = append(mock.calls.Warning, callInfo)
	lockLoggableMockWarning.Unlock()
	mock.WarningFunc(message)
}

// WarningCalls gets all the calls that were made to Warning.
// Check the length with:
//     len(mockedLoggable.WarningCalls())
func (mock *LoggableMock) WarningCalls() []struct {
	Message string
} {
	var calls []struct {
		Message string
	}
	lockLoggableMockWarning.RLock()
	calls = mock.calls.Warning
	lockLoggableMockWarning.RUnlock()
	return calls
}

// Warningf calls WarningfFunc.
func (mock *LoggableMock) Warningf(message string, params ...interface{}) {
	if mock.WarningfFunc == nil {
		panic("LoggableMock.WarningfFunc: method is nil but Loggable.Warningf was just called")
	}
	callInfo := struct {
		Message string
		Params  []interface{}
	}{
		Message: message,
		Params:  params,
	}
	lockLoggableMockWarningf.Lock()
	mock.calls.Warningf = append(mock.calls.Warningf, callInfo)
	lockLoggableMockWarningf.Unlock()
	mock.WarningfFunc(message, params...)
}

// WarningfCalls gets all the calls that were made to Warningf.
// Check the length with:
//     len(mockedLoggable.WarningfCalls())
func (mock *LoggableMock) WarningfCalls() []struct {
	Message string
	Params  []interface{}
} {
	var calls []struct {
		Message string
		Params  []interface{}
	}
	lockLoggableMockWarningf.RLock()
	calls = mock.calls.Warningf
	lockLoggableMockWarningf.RUnlock()
	return calls
}

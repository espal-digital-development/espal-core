// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package userrightsmock

import (
	"github.com/espal-digital-development/espal-core/repositories/userrights"
	"sync"
)

var (
	lockRepositoryMockAllByCode      sync.RWMutex
	lockRepositoryMockAllByName      sync.RWMutex
	lockRepositoryMockGetCode        sync.RWMutex
	lockRepositoryMockGetName        sync.RWMutex
	lockRepositoryMockUserRightCodes sync.RWMutex
)

// Ensure, that RepositoryMock does implement userrights.Repository.
// If this is not the case, regenerate this file with moq.
var _ userrights.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of userrights.Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked userrights.Repository
//         mockedRepository := &RepositoryMock{
//             AllByCodeFunc: func() map[uint16]string {
// 	               panic("mock out the AllByCode method")
//             },
//             AllByNameFunc: func() map[string]uint16 {
// 	               panic("mock out the AllByName method")
//             },
//             GetCodeFunc: func(name string) (uint16, error) {
// 	               panic("mock out the GetCode method")
//             },
//             GetNameFunc: func(code uint16) (string, error) {
// 	               panic("mock out the GetName method")
//             },
//             UserRightCodesFunc: func() []uint16 {
// 	               panic("mock out the UserRightCodes method")
//             },
//         }
//
//         // use mockedRepository in code that requires userrights.Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// AllByCodeFunc mocks the AllByCode method.
	AllByCodeFunc func() map[uint16]string

	// AllByNameFunc mocks the AllByName method.
	AllByNameFunc func() map[string]uint16

	// GetCodeFunc mocks the GetCode method.
	GetCodeFunc func(name string) (uint16, error)

	// GetNameFunc mocks the GetName method.
	GetNameFunc func(code uint16) (string, error)

	// UserRightCodesFunc mocks the UserRightCodes method.
	UserRightCodesFunc func() []uint16

	// calls tracks calls to the methods.
	calls struct {
		// AllByCode holds details about calls to the AllByCode method.
		AllByCode []struct {
		}
		// AllByName holds details about calls to the AllByName method.
		AllByName []struct {
		}
		// GetCode holds details about calls to the GetCode method.
		GetCode []struct {
			// Name is the name argument value.
			Name string
		}
		// GetName holds details about calls to the GetName method.
		GetName []struct {
			// Code is the code argument value.
			Code uint16
		}
		// UserRightCodes holds details about calls to the UserRightCodes method.
		UserRightCodes []struct {
		}
	}
}

// AllByCode calls AllByCodeFunc.
func (mock *RepositoryMock) AllByCode() map[uint16]string {
	if mock.AllByCodeFunc == nil {
		panic("RepositoryMock.AllByCodeFunc: method is nil but Repository.AllByCode was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockAllByCode.Lock()
	mock.calls.AllByCode = append(mock.calls.AllByCode, callInfo)
	lockRepositoryMockAllByCode.Unlock()
	return mock.AllByCodeFunc()
}

// AllByCodeCalls gets all the calls that were made to AllByCode.
// Check the length with:
//     len(mockedRepository.AllByCodeCalls())
func (mock *RepositoryMock) AllByCodeCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockAllByCode.RLock()
	calls = mock.calls.AllByCode
	lockRepositoryMockAllByCode.RUnlock()
	return calls
}

// AllByName calls AllByNameFunc.
func (mock *RepositoryMock) AllByName() map[string]uint16 {
	if mock.AllByNameFunc == nil {
		panic("RepositoryMock.AllByNameFunc: method is nil but Repository.AllByName was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockAllByName.Lock()
	mock.calls.AllByName = append(mock.calls.AllByName, callInfo)
	lockRepositoryMockAllByName.Unlock()
	return mock.AllByNameFunc()
}

// AllByNameCalls gets all the calls that were made to AllByName.
// Check the length with:
//     len(mockedRepository.AllByNameCalls())
func (mock *RepositoryMock) AllByNameCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockAllByName.RLock()
	calls = mock.calls.AllByName
	lockRepositoryMockAllByName.RUnlock()
	return calls
}

// GetCode calls GetCodeFunc.
func (mock *RepositoryMock) GetCode(name string) (uint16, error) {
	if mock.GetCodeFunc == nil {
		panic("RepositoryMock.GetCodeFunc: method is nil but Repository.GetCode was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	lockRepositoryMockGetCode.Lock()
	mock.calls.GetCode = append(mock.calls.GetCode, callInfo)
	lockRepositoryMockGetCode.Unlock()
	return mock.GetCodeFunc(name)
}

// GetCodeCalls gets all the calls that were made to GetCode.
// Check the length with:
//     len(mockedRepository.GetCodeCalls())
func (mock *RepositoryMock) GetCodeCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	lockRepositoryMockGetCode.RLock()
	calls = mock.calls.GetCode
	lockRepositoryMockGetCode.RUnlock()
	return calls
}

// GetName calls GetNameFunc.
func (mock *RepositoryMock) GetName(code uint16) (string, error) {
	if mock.GetNameFunc == nil {
		panic("RepositoryMock.GetNameFunc: method is nil but Repository.GetName was just called")
	}
	callInfo := struct {
		Code uint16
	}{
		Code: code,
	}
	lockRepositoryMockGetName.Lock()
	mock.calls.GetName = append(mock.calls.GetName, callInfo)
	lockRepositoryMockGetName.Unlock()
	return mock.GetNameFunc(code)
}

// GetNameCalls gets all the calls that were made to GetName.
// Check the length with:
//     len(mockedRepository.GetNameCalls())
func (mock *RepositoryMock) GetNameCalls() []struct {
	Code uint16
} {
	var calls []struct {
		Code uint16
	}
	lockRepositoryMockGetName.RLock()
	calls = mock.calls.GetName
	lockRepositoryMockGetName.RUnlock()
	return calls
}

// UserRightCodes calls UserRightCodesFunc.
func (mock *RepositoryMock) UserRightCodes() []uint16 {
	if mock.UserRightCodesFunc == nil {
		panic("RepositoryMock.UserRightCodesFunc: method is nil but Repository.UserRightCodes was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockUserRightCodes.Lock()
	mock.calls.UserRightCodes = append(mock.calls.UserRightCodes, callInfo)
	lockRepositoryMockUserRightCodes.Unlock()
	return mock.UserRightCodesFunc()
}

// UserRightCodesCalls gets all the calls that were made to UserRightCodes.
// Check the length with:
//     len(mockedRepository.UserRightCodesCalls())
func (mock *RepositoryMock) UserRightCodesCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockUserRightCodes.RLock()
	calls = mock.calls.UserRightCodes
	lockRepositoryMockUserRightCodes.RUnlock()
	return calls
}

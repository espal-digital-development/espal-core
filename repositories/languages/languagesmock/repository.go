// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package languagesmock

import (
	"github.com/espal-digital-development/espal-core/repositories/languages"
	"sync"
)

var (
	lockRepositoryMockAll             sync.RWMutex
	lockRepositoryMockByCode          sync.RWMutex
	lockRepositoryMockByID            sync.RWMutex
	lockRepositoryMockEnglishLocaleID sync.RWMutex
)

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             AllFunc: func() map[uint16]languages.Data {
// 	               panic("mock out the All method")
//             },
//             ByCodeFunc: func(code string) (languages.Data, error) {
// 	               panic("mock out the ByCode method")
//             },
//             ByIDFunc: func(id uint16) (languages.Data, error) {
// 	               panic("mock out the ByID method")
//             },
//             EnglishLocaleIDFunc: func() uint16 {
// 	               panic("mock out the EnglishLocaleID method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// AllFunc mocks the All method.
	AllFunc func() map[uint16]languages.Data

	// ByCodeFunc mocks the ByCode method.
	ByCodeFunc func(code string) (languages.Data, error)

	// ByIDFunc mocks the ByID method.
	ByIDFunc func(id uint16) (languages.Data, error)

	// EnglishLocaleIDFunc mocks the EnglishLocaleID method.
	EnglishLocaleIDFunc func() uint16

	// calls tracks calls to the methods.
	calls struct {
		// All holds details about calls to the All method.
		All []struct {
		}
		// ByCode holds details about calls to the ByCode method.
		ByCode []struct {
			// Code is the code argument value.
			Code string
		}
		// ByID holds details about calls to the ByID method.
		ByID []struct {
			// ID is the id argument value.
			ID uint16
		}
		// EnglishLocaleID holds details about calls to the EnglishLocaleID method.
		EnglishLocaleID []struct {
		}
	}
}

// All calls AllFunc.
func (mock *RepositoryMock) All() map[uint16]languages.Data {
	if mock.AllFunc == nil {
		panic("RepositoryMock.AllFunc: method is nil but Repository.All was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockAll.Lock()
	mock.calls.All = append(mock.calls.All, callInfo)
	lockRepositoryMockAll.Unlock()
	return mock.AllFunc()
}

// AllCalls gets all the calls that were made to All.
// Check the length with:
//     len(mockedRepository.AllCalls())
func (mock *RepositoryMock) AllCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockAll.RLock()
	calls = mock.calls.All
	lockRepositoryMockAll.RUnlock()
	return calls
}

// ByCode calls ByCodeFunc.
func (mock *RepositoryMock) ByCode(code string) (languages.Data, error) {
	if mock.ByCodeFunc == nil {
		panic("RepositoryMock.ByCodeFunc: method is nil but Repository.ByCode was just called")
	}
	callInfo := struct {
		Code string
	}{
		Code: code,
	}
	lockRepositoryMockByCode.Lock()
	mock.calls.ByCode = append(mock.calls.ByCode, callInfo)
	lockRepositoryMockByCode.Unlock()
	return mock.ByCodeFunc(code)
}

// ByCodeCalls gets all the calls that were made to ByCode.
// Check the length with:
//     len(mockedRepository.ByCodeCalls())
func (mock *RepositoryMock) ByCodeCalls() []struct {
	Code string
} {
	var calls []struct {
		Code string
	}
	lockRepositoryMockByCode.RLock()
	calls = mock.calls.ByCode
	lockRepositoryMockByCode.RUnlock()
	return calls
}

// ByID calls ByIDFunc.
func (mock *RepositoryMock) ByID(id uint16) (languages.Data, error) {
	if mock.ByIDFunc == nil {
		panic("RepositoryMock.ByIDFunc: method is nil but Repository.ByID was just called")
	}
	callInfo := struct {
		ID uint16
	}{
		ID: id,
	}
	lockRepositoryMockByID.Lock()
	mock.calls.ByID = append(mock.calls.ByID, callInfo)
	lockRepositoryMockByID.Unlock()
	return mock.ByIDFunc(id)
}

// ByIDCalls gets all the calls that were made to ByID.
// Check the length with:
//     len(mockedRepository.ByIDCalls())
func (mock *RepositoryMock) ByIDCalls() []struct {
	ID uint16
} {
	var calls []struct {
		ID uint16
	}
	lockRepositoryMockByID.RLock()
	calls = mock.calls.ByID
	lockRepositoryMockByID.RUnlock()
	return calls
}

// EnglishLocaleID calls EnglishLocaleIDFunc.
func (mock *RepositoryMock) EnglishLocaleID() uint16 {
	if mock.EnglishLocaleIDFunc == nil {
		panic("RepositoryMock.EnglishLocaleIDFunc: method is nil but Repository.EnglishLocaleID was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockEnglishLocaleID.Lock()
	mock.calls.EnglishLocaleID = append(mock.calls.EnglishLocaleID, callInfo)
	lockRepositoryMockEnglishLocaleID.Unlock()
	return mock.EnglishLocaleIDFunc()
}

// EnglishLocaleIDCalls gets all the calls that were made to EnglishLocaleID.
// Check the length with:
//     len(mockedRepository.EnglishLocaleIDCalls())
func (mock *RepositoryMock) EnglishLocaleIDCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockEnglishLocaleID.RLock()
	calls = mock.calls.EnglishLocaleID
	lockRepositoryMockEnglishLocaleID.RUnlock()
	return calls
}

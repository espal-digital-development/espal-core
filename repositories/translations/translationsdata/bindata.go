// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package translationsdata generated by go-bindata.// sources:
// _data/en.yml
package translationsdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __dataEnYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5b\x4b\x93\xe4\x36\x72\xbe\xf3\x57\x60\xa9\x58\xef\xee\x41\xe3\xf5\x5a\xbe\x28\x62\x43\x51\xdd\x3d\xad\xe9\x70\xbf\xdc\x55\xa3\xd1\xf8\xb2\x8b\x26\xb3\x48\xb8\x41\x80\x02\xc0\xae\xa1\x7e\xbd\x23\x13\x00\x99\x24\xab\x3d\xd2\xc5\xb7\xe2\x97\x89\x77\x22\x9f\xa8\x6f\xc4\x7f\xc2\x28\x6e\xa1\x01\x53\x17\xdf\x08\x2f\xfe\x2e\xf6\xca\x34\x83\x96\xae\xf8\x46\xf4\xe2\xef\xe2\x51\x0f\x4e\x6a\xa4\x1d\x19\xf1\xda\xba\x4e\x86\x00\xd8\xa8\x3f\x4e\x6c\x33\x2c\xab\xca\x0e\x26\xec\xaa\xa0\x5e\x65\x50\xd6\x7c\x5f\x08\x21\x84\xff\x5e\x94\xbb\x48\x12\x33\xad\x2c\x64\xfc\x0d\x89\xc6\x99\x23\x41\x24\x4a\x59\x54\xd6\x04\xe0\x2c\x97\x11\x28\x8b\xd6\x76\x30\xc3\x1f\x6c\x07\x65\xe1\xa0\x51\x3e\x80\x4b\xcd\xf7\x43\x55\x01\xd4\x50\xcf\x7c\x4f\x89\x23\x8f\x20\x26\x9e\xb2\x38\x2a\xe7\xc3\xbd\xe4\xdd\x5e\x23\x24\x8c\xc4\xce\x8f\x0a\x74\xcd\x49\xa0\xeb\x92\x3e\xfb\xfc\xe9\xcb\xc2\x2c\xda\xdf\x53\xcb\xc1\x83\xfb\xd1\xd9\xa1\x3f\x38\x69\xbc\x66\x3b\x84\x2d\x3f\x7a\x70\x82\xc8\x82\xd1\x7d\x59\xd4\xe0\x2b\xa7\xfa\xe5\x7e\x5e\xcd\x60\x59\xf4\xd2\xfb\x93\x75\xf5\x13\x54\xf6\x15\xdc\x38\xb3\x3d\x26\x8a\xc8\xa4\xb2\x08\xad\x34\x2f\xfe\xda\xba\xbc\x07\xca\x34\xff\x98\x5b\x1c\x90\x2c\x46\x3b\x88\xa3\x75\xc2\xcd\x3c\x7f\x10\x9f\xed\x20\x4e\x4a\x6b\xe1\xa0\x02\xf5\x0a\x42\x8a\x0e\xbc\x97\x0d\x88\x93\x0a\xad\x08\x2d\x08\x39\x9d\xaf\xd0\xca\xbc\x08\x6f\xad\x79\x57\x16\xb5\xf4\xed\xb3\x95\x8e\x6d\xdc\x55\x86\xca\x02\x67\xf6\xaa\xe0\x34\x13\x1f\x12\x52\x16\x47\xeb\x1a\x1b\x3e\xdb\xc1\xe5\xb5\xb0\xbd\x27\x1a\x4e\xd6\x89\xbc\x07\x3f\x94\x85\xb6\x38\x69\x55\xcd\x7b\x7b\x9b\x10\xcf\xf7\xca\x43\x78\x82\x5f\x06\xf0\xe1\xec\x7e\x79\x08\x22\xd1\x51\xa2\x3c\x84\x5b\x65\x5e\xf6\x60\x02\xdb\xad\x9b\x63\x1c\xdd\x0f\x7d\xaf\x15\xd4\x02\xbe\xed\xa4\xd2\x42\xd6\xb5\x03\xef\x85\xf2\xe2\xc5\xd8\x93\x11\xca\x08\xe2\x1b\x7d\x80\x8e\xb6\xf7\x6b\x3b\x49\x43\x2e\x36\x31\xac\xc5\x86\xce\x6b\x06\x67\x29\x5c\x0a\xd0\x7c\x26\xff\xbf\x2b\x78\x43\x16\xaa\xc1\x07\xdb\x81\x7b\x82\xf5\x15\xb8\x4c\x14\x91\x49\x1e\xaf\x9b\x91\xa6\x52\x52\xf3\x2b\x97\xa0\xb2\xe8\x9d\xad\x87\x2a\xdc\xaa\x23\x54\x63\xa5\xd9\x95\x7b\x8c\x14\x31\x91\xca\x22\x40\xd5\x1a\x55\x49\xbd\x47\xe1\xaa\x18\xf3\x21\x53\x44\x22\xcd\x72\xb2\x95\x8d\xb2\x30\x70\xda\x0a\xe3\x3d\x9c\x26\x21\x44\x81\xe9\x41\x86\x2d\xd7\x13\xe1\x1b\xc6\xfb\x73\x3d\x26\x5e\xb3\xe8\x38\xff\xba\x93\xe3\xbd\x0d\x17\xf0\xfe\x97\x41\xea\x83\x3d\xb4\xf0\x1e\xcf\x6d\x6e\x9d\x19\x45\x27\x47\x61\x6c\x10\xcf\x20\x00\x99\x45\xb0\x74\x3c\xf1\xa0\x57\x37\xe2\xad\xab\xb0\x51\xaa\x6f\xeb\x52\xba\x80\x76\x60\x1c\xb7\xf4\x1d\x2f\xa6\x59\xc0\xca\x94\x05\xe0\x34\x6e\xfc\x4e\x3b\x90\xf5\xf8\xd1\x73\x3d\x9d\x84\x51\x79\x21\x23\x59\x0c\x1e\x75\xb4\xac\x3b\xde\xd3\x0e\x3f\xcb\x62\xa9\x43\x7e\x22\xfd\xe1\x07\xb7\xd4\xc5\xfb\x08\x94\x85\x07\xe9\xaa\x96\x11\xe8\x3b\xf5\xad\x7c\x70\x24\x82\x8f\xd2\x80\x5e\x8d\x34\x11\x05\x51\xf3\x21\xae\x0e\x20\x1d\x5f\xde\xe6\xca\x3a\xe0\xf6\xcb\x41\x59\x58\x52\xe0\x5c\xb6\x1f\x12\x82\x7a\x1a\xf6\xe9\x4e\x5e\x3a\xa8\xc1\x04\x25\xb5\xdf\x39\xb8\xb7\xe1\x27\xa9\x15\xdb\x25\x3c\xcd\xe9\xfe\x56\x33\xb3\x90\x0e\xe8\xe8\x5f\x91\xbf\x2c\x46\xa6\x45\xf7\xad\x1d\x74\x4d\x22\x74\x68\x61\x2f\x3b\xd8\xf9\x0b\x38\x2e\x26\xb9\x50\xac\xc2\x53\x8b\x2c\x4a\x34\xa6\xec\x40\x48\x2f\x9e\xa9\xdd\x62\xca\x37\xe6\x48\x6e\x81\xb2\xe6\xca\x82\xbf\xb7\xe1\x4e\x86\xaa\xdd\x99\x91\x8c\xfb\xd6\xe6\x2f\xd6\xa0\xe6\xd6\xa2\xb6\xe0\x69\xd0\x0e\x3b\x10\xd2\x8c\x51\xb1\xa0\x7e\x49\xf2\x16\x6d\xc4\x9b\xf6\x81\x5d\x5c\x9b\xc6\xfd\xcc\x25\xfd\xde\xe6\xae\xc4\x08\xe1\x87\x59\xd4\xef\xe1\xf4\xb6\xb4\xe3\xb5\x9c\x66\x50\xcb\x00\x0f\xc7\x0b\xe5\x42\xcb\x2d\x5c\x00\x61\x8f\xe2\x19\xe1\xb2\x68\x6c\xc0\x6b\x7a\xed\xc8\x75\x61\xd3\xfc\xd1\xe6\x2b\x79\x44\xda\xb7\x60\xea\xb2\xa8\x64\x90\xda\x36\x4c\x62\x22\x90\xee\xcb\x8c\xbf\x9f\xe4\x6b\xe8\xad\xb9\xb4\xf5\x42\xca\x10\x13\x08\xce\xc6\x81\x81\x9e\x34\x68\x0f\x2e\x8c\x0b\xcd\x49\xc8\xdc\x22\x21\x0a\xf9\x4f\xca\xb7\x5a\x71\x9b\xf9\x29\x21\x33\x7f\x46\xd0\x79\x51\x9e\xb6\x68\x39\xaf\xab\x84\xae\x66\xb6\x80\x3d\xee\x81\xe3\x2e\x9f\x74\x6c\x0c\xfc\x42\x16\x07\xb5\xe2\x4c\xf4\xcd\xd8\xe8\xdb\xa3\x1e\x78\x3e\xe3\x46\xed\x19\x3a\x37\xe2\x28\x99\x20\x1d\xc0\x71\xfb\x83\xdf\xdc\xe7\xc3\x6f\x1c\x23\xd8\xea\x65\x36\x67\x7b\xfc\x64\x6e\xdf\xdc\xc3\xec\xeb\x95\x67\xfc\x3f\x1f\xdb\x3c\xa9\xa6\x0d\x2b\xff\x90\x30\x5f\x16\xca\xbc\xda\x85\x05\xbb\x89\xc0\xdc\x5d\x02\x3c\xdd\x8e\xa1\x5b\x5c\x8a\xa1\x63\x93\xc7\x4f\x5f\x16\xf0\xa5\xb7\x2e\x3c\x3a\x7b\x54\xd9\x8c\x22\xf9\x3d\xc1\x22\xe1\xbe\x2c\x82\xfc\xc2\xec\xa6\xfc\xc2\x9c\x0e\xf9\x05\x19\x3a\x30\xc3\xdc\xfe\x0e\xcc\xe0\xcb\xe2\x59\xdb\xe6\xd1\x7a\xb6\x9c\x0b\x6d\x1b\x81\x10\x8e\xed\x9c\x75\xb7\x59\xd8\x69\x58\x44\xc4\xad\x6d\x70\x57\x5b\xdb\xb3\x4d\x6d\x2d\x6e\xd0\x6c\xcb\x83\x0c\x2b\x6f\x8f\x59\xf3\x4c\xf4\x65\xa1\x41\xd6\xcc\x23\x04\x59\xc7\x79\xf1\x13\xbb\xc0\x4f\xf2\x98\x36\x11\x49\xba\xe8\x99\x33\x01\x78\x81\x54\xf5\xa2\x4c\xb3\xd7\x8a\xcd\xf2\x31\x82\x02\x51\xbc\x05\xf6\x64\xb4\xe5\xe3\x5f\x25\x04\xd7\xa7\x7e\x45\x67\x1e\x80\x79\x42\xfb\x09\xc3\x49\x2a\xad\x1f\x8e\x77\x12\xfd\xf0\x6c\x2b\x68\xb6\x4a\x6b\x8f\x0a\x26\x93\xc8\x33\xf1\x3b\x17\x54\xc5\xcf\xf0\x1e\x4e\x5e\x24\x14\x6f\xb0\x74\xd0\xda\xc1\x33\x8e\x4f\x19\x22\x07\x79\xec\x00\x83\xb8\xd5\x16\x3c\x46\x5c\x6c\xb6\x62\x45\xc8\xf7\xe0\xd6\x56\x2b\xf7\x8e\xee\x83\xc8\xb8\x8f\xb3\xd5\x10\xa6\xcb\x95\x27\x1b\x31\x9f\x54\xdd\x52\x30\xa2\x43\x10\x25\x43\x4b\xd3\x0c\xb2\x61\xd7\xe0\x36\x21\xf3\xec\x32\xe2\xd1\xda\xa2\x2c\x0f\x46\x65\x6d\xd7\x93\xc1\xcd\x20\xa9\xb7\xa3\x43\x97\xdf\x04\x3d\xee\xfc\x0b\xd4\xff\x85\xee\xff\x62\x11\xd7\x13\x83\x20\x0e\x91\x59\x70\xdd\x7a\x60\x53\xdd\xeb\x81\xc4\x17\x42\x50\x86\xe3\x11\x40\x92\xd4\xf0\xe0\x6a\xae\x5b\xf6\x52\x83\x20\x8c\xa9\xa3\x09\x23\x7d\xad\x2a\x58\xa9\x93\x47\xc4\xd6\xfa\x84\x81\xf3\xa9\x3e\x3a\xfb\xaa\x16\x03\xe6\xd3\xcb\x94\xed\xb9\x66\x8a\x2f\x8b\x66\x1e\x17\x39\x72\xe7\xaa\x3b\xab\x3b\x6e\xba\x95\xee\xf0\x27\xd5\x75\xca\x34\xb7\xd2\x30\xb6\x7d\x42\x05\xc2\x28\x9f\xf0\xec\xb9\x83\x4e\x02\x3a\x61\xb8\x96\xc1\x55\xad\xf4\xeb\xad\x7b\x4c\xf0\x7a\xfb\x96\x38\x99\x02\x72\x33\x98\xd0\x25\xaf\x85\xf6\x17\x59\xd9\x45\xc6\xcf\x68\x26\x83\x0d\x63\xcf\x49\x19\x42\xd1\x3a\x1e\x79\x7f\x0f\xf8\x49\x06\xac\xeb\xa5\x6a\x78\x88\x93\x90\xa8\x64\xc0\xfb\x85\x74\xef\x08\x4a\xd2\xdd\xa8\x23\xd3\x97\x3f\xaa\x23\x5e\x2d\x07\x61\x70\x86\xad\xbc\x27\x9f\x04\xc1\x69\x7d\x31\x24\x5b\xc8\xdc\x53\x86\x52\xbf\x9f\x9c\xec\xfb\x05\x07\xf6\x2f\x32\x9c\x2c\xd0\xd2\x60\x2d\x4d\x15\x99\x02\xd6\xfe\x20\xb1\x15\x69\x00\x9e\x80\xb8\x8c\xc0\xc2\xfb\x30\xc1\xd1\x5d\xc3\x21\x2e\xad\x09\xb2\x0a\x2b\xd3\x98\xd0\x95\x71\x4c\x28\x9e\x06\x38\xcf\x2f\xe5\x23\x7d\xc7\x63\xfa\x1f\xa8\xc2\xe2\x90\x10\x20\x33\xa2\x68\x6d\x9f\x94\xa9\xed\x89\x1b\x94\x88\x8b\x48\xa0\x84\x8b\x56\xaf\xe0\xc6\x3b\x08\xad\xe5\x3a\x3b\xe1\x22\x12\xc8\xd6\xd5\x4a\x72\x63\x57\x2b\x49\xea\xcf\xc1\x42\xed\x39\x5c\x6e\x2d\x83\xbc\x5b\x6f\xfb\x95\x0c\x52\xdc\x4d\xbb\x8e\x93\xc4\x4b\x77\x69\xb9\x87\xb5\x4f\xa8\x40\xb8\x5c\xcc\x7c\x82\xe9\x8e\x37\x5c\x3c\xa3\xd2\x4b\x17\x9f\x32\x02\xe8\x37\x73\xef\x27\xdf\x70\x46\xdc\x5e\x7f\x46\x8c\x1b\xec\xfb\xf5\x0e\x13\x82\xa7\x3f\x38\x07\xa6\x1a\x79\x44\x4f\x08\x1d\x77\x5e\xdb\xf7\x9b\x05\x60\xbf\x56\x33\xcb\xf6\x68\xb5\x8e\xb7\x6a\xa1\x05\x1e\xe8\x3b\xdb\x85\x03\x74\xbd\x96\x01\x36\xc6\x21\x13\x7c\x8e\xf1\x3e\x28\x3c\x92\x91\xab\x60\x84\x45\xc2\x93\x52\xbd\x5d\x78\xb5\x51\x7d\xde\x2e\xfc\xda\x19\xa3\x5b\x86\xda\x8d\x5f\x31\xfc\x9e\x08\x3b\x53\x2f\xae\x76\x22\x8b\x7f\x49\xb7\x9b\xd2\x88\x3f\xe7\xd0\xe4\x06\x23\xa4\xbd\x3c\xc2\x7b\x63\x87\x26\xc7\x10\xc7\x9c\x50\x14\xff\xfc\xa3\xff\xe7\x1c\x89\xa9\x18\x10\x79\x79\x04\x01\xd4\x20\xf7\x77\xe3\xef\x94\xf7\xca\x34\x68\x8c\x5d\xad\x4c\x43\xa9\x01\x8a\x17\x65\xb0\xee\x7c\xc7\xca\x8b\x2e\x36\xa3\x88\x86\xda\xe5\x90\xe4\x35\x37\x9d\x87\xb8\x31\x95\x75\x0e\xaa\xa0\xc7\x29\xf7\xfb\x66\xc7\x6a\x66\x16\xc7\xcc\x9d\xfb\xfa\x0c\xd2\xfd\x9e\xfe\x46\x90\xee\xab\x9d\x5e\x4a\x63\x30\xac\xdd\x77\x52\x6b\x70\x87\x56\x9a\x9f\xcf\x77\x57\x11\x27\x46\xb3\x3e\xf2\x8a\xd0\x4a\x23\xfe\xb8\xe9\xea\x47\x07\xe8\x62\xfd\xa6\xae\x9a\xc8\xfb\x56\x57\xb7\xd6\x34\xa9\xa7\xcb\x56\x3a\x59\xa1\xa7\xf3\xb5\x3e\x35\x35\xca\x5d\x8a\x2a\x37\xfc\xb3\xff\x4b\xee\xff\xce\x9a\xd0\xfe\x9e\xbd\xec\xb0\xc1\x6f\xde\xcc\xf7\x5d\x3f\xc5\x88\x6f\x4e\x13\x90\x29\xb7\xfc\x20\xfd\xc1\x5e\xc0\x2e\xdc\x82\xf4\x81\x2d\x16\x77\xe0\x7c\x4f\xad\xf4\x28\x76\xcf\x20\x64\x10\x1a\x9b\xad\x57\x4b\x3b\x91\x47\xb8\x92\xe3\xef\x59\x70\x2d\xc7\xaf\x2e\x97\xee\xe1\x8e\xae\x0b\xcf\xe6\x6c\xc5\x1a\x57\x2c\xe3\xe5\x58\x65\x4c\xa7\xd9\xc5\xb4\xc7\x4e\x6b\x7b\xba\x1b\x74\x50\xbd\xc6\x7b\x38\xc0\x1b\xa7\x3d\xe5\x39\x24\xb6\x10\x5d\x6a\x82\x63\x0c\xa8\xca\x78\xc2\xe7\xe6\x2a\x65\x75\x81\x87\x28\xf8\x5d\x16\x23\x78\x96\xde\xfd\x8c\x4d\x8d\xfd\x07\xcf\x76\x50\xd4\x2c\x03\xd4\xbb\x65\xe0\x8c\x90\x90\xa1\x2c\x86\xbe\x5e\x93\x3f\x46\x88\xc8\xa9\xf5\xc5\xb8\x6d\xfd\x3c\x4e\xad\x39\x39\xb7\x46\xb2\x03\x0f\x78\xd7\xb8\x6a\x8c\x08\x1a\x54\xa9\xf4\x1d\x1c\x5a\xb8\x55\xe6\x65\x6e\x7f\x87\xfb\xdb\xc5\xa4\x93\x56\xe6\x25\xcf\x61\x3d\x01\xb4\xdd\x61\x3a\xb6\x68\xb3\xf1\x9b\xb4\x72\x07\xdd\x33\xb8\x3b\xe0\xb9\x9c\x88\x89\x5c\x9d\x39\x48\xff\xb2\x8a\xb8\x11\x22\xfb\xc4\x83\xd7\x14\xb7\x86\x16\x1c\xa0\xc8\x50\x10\x7d\xb0\x57\xca\xf7\x5a\x32\x3b\x73\x40\x86\x94\x85\x13\x14\x87\x93\x80\xd7\x91\x8f\x75\x80\x1d\x3e\xb8\xdf\xd4\x0d\xce\x04\x05\xc5\x9d\xeb\xd0\x41\xaf\xc7\x85\xd1\xd1\x64\x7b\x83\xed\x17\x11\x32\x7e\x52\x00\xc2\x25\x68\x2f\x51\x7e\xe2\xf1\xad\xcf\x8e\xbc\x22\xe0\xf8\x15\x7d\x97\x85\x7c\x95\x41\x32\x57\x71\x47\xdf\x64\x53\xad\x53\xcb\xc4\x52\x44\xd0\x4d\xec\xba\x55\x39\x8f\x00\xee\x26\x76\xc9\x33\xa8\xe1\x28\x07\x1d\xf8\xc0\x04\xc4\x13\xdb\xc5\x4b\xb7\xf2\x1f\x77\xf9\x2a\x2e\x8e\x32\xa1\xc0\x5c\xbc\xc5\x72\x54\x2c\x90\x25\x8b\xa7\xac\x39\xd8\x17\x30\x68\x98\x53\x5e\x72\xe6\xfe\x69\xe2\x11\x01\x99\xa2\x3d\x4e\x6c\x9b\x2e\x6e\x0c\x01\xef\xbf\xf4\xca\xfd\x9f\xbd\xa8\xc8\xf8\xaf\x10\x39\xcb\xa2\xb5\x06\xc6\xde\x06\xd2\x13\x67\x67\xf2\x21\x71\x08\xd2\x3a\xab\x79\x74\xf2\x05\x76\x97\xed\x32\x55\x74\x27\x5f\x40\x48\x51\xb5\x31\x61\x94\xf6\x37\xaf\x7f\xb3\xa1\x69\xbb\xc5\xe4\xfd\x4e\x9b\x9b\x5a\xa6\x4c\xd3\x9b\x0d\x13\x7d\x6e\x17\x5a\xf8\x99\x16\xb4\x33\x75\xfc\xf1\x41\xbe\x02\x1a\x8b\x94\x89\x66\x0a\xf2\xd0\x42\x54\x8f\x71\x79\xd2\xd4\xfc\xb3\x95\xaf\x90\x2c\x46\xce\x47\x9f\xeb\x3e\x1b\xb1\xdf\xdb\xfd\x6c\xd9\xe6\xde\x49\x1d\x27\x3b\x81\x8a\x1a\xea\x6b\xeb\x68\x14\xee\x19\x90\xa2\x5f\x1a\x8b\xc8\x4c\x55\xd5\xe3\xa4\xf5\x29\xb9\x08\x46\x76\x70\xce\xd0\xc6\xdc\x22\x91\xb7\x56\x96\x92\x66\xdf\xfd\xf5\xaf\x07\x15\x34\x30\xfd\x7e\x21\x6b\xe1\x72\xdd\x32\x33\xdd\xc5\xda\xdc\xa2\xce\x0b\xe2\x24\xc7\x54\x6a\x24\x76\x71\x92\x5e\xc0\x17\x74\xe6\x61\x72\x32\x93\xb1\x7c\x37\xf5\xf5\x6f\xeb\x01\x3f\x1a\x39\x84\xd6\x3a\xf5\x2b\x8a\x5c\xe6\xda\x8e\xf8\xd9\x0e\x53\x41\x62\x6e\x81\xc7\x17\x23\x61\x11\x5a\xe5\x85\x07\x0a\x35\xe6\xf1\xfe\x7d\x3d\xde\xb5\x75\xcf\xaa\xae\xc1\xcc\x2c\x5f\x19\x2c\x6d\xfd\xd7\x46\xfa\x6e\x3d\xd2\x3d\x5e\x2b\x3b\x98\x79\x59\xdf\x6d\x47\xfa\x04\x7f\x72\x20\xbc\x75\x6e\x14\xcf\x43\xa0\x0d\xc5\x48\x4c\x8c\x76\x40\x8a\xb6\x96\x52\x81\x78\xf0\x15\xaf\xa0\x50\xcf\x79\xf4\xff\xd8\x1e\xe4\x8d\x09\xe0\x8c\xd4\x82\x18\x66\xbe\xed\x14\xf6\xb6\x83\xd0\xe2\x20\x27\x8c\xd8\x4e\xce\xe2\xcf\x5c\x86\xad\x6c\x0d\x02\xbe\x40\x35\x90\xa6\x41\x65\x83\xd2\x0c\xee\x15\xdc\xbb\x75\xf9\xed\xc6\x7c\xf4\x4c\x57\xbc\xdf\xd4\xdf\x94\x11\x83\x87\xb2\xa8\x34\x48\xb7\x07\x0d\xab\x98\xf2\x12\x71\xe1\x33\x81\x0c\xaf\x7d\x85\xdd\xca\x4a\x3c\x11\x2a\x64\x32\x16\xd2\xc1\x67\x3b\xec\x07\x5e\x7d\xda\x39\xda\x43\xe1\x07\x07\x3f\x94\x85\x64\x26\x60\xf2\x42\x94\x35\x9f\xa4\xa7\xc7\x1b\xde\x1f\x07\xbd\x72\x08\x70\xbd\x28\xd4\x7e\x62\xc8\xf6\xed\x8d\x56\xd1\xd8\x6d\xda\x18\x8b\x71\xfa\x27\xe9\x2f\x5b\x69\x1a\xae\x7e\xef\xad\xc0\xb8\x9e\x5a\x54\x91\x98\x4c\xe5\xdb\x53\xbb\x4a\xe4\xcd\x30\xb9\xdd\x07\xe9\xaf\xa5\xd2\x7c\x9c\xa9\x0d\xfa\xc8\x47\x22\x66\x17\xf0\x60\x9b\x46\x2b\xd3\xbc\x31\x5a\xf4\x0b\x45\x48\x5c\x9b\x41\x97\x9d\x9c\x19\x7a\xdd\x01\x9f\x41\x3e\x84\x33\xcd\xa6\x03\xe0\xfc\x71\xf3\xcf\x70\xa7\x8d\xe7\xbc\xe8\x9c\xec\x4c\x1d\x93\x5b\x4b\x2f\x85\x14\x75\x4c\x85\x4d\x7c\xd1\x03\xdc\x19\x8b\x4e\xd5\x19\xf6\xe8\x31\x0a\x19\x19\xe6\x66\xda\x1a\x38\xc7\x8e\x38\x9e\x3c\x5d\xac\x28\xe8\xcb\x83\x8f\x37\xce\x27\xca\x39\xb7\x1f\x95\xf7\x61\xec\xe1\x8d\x98\x71\xe5\xf1\x53\x01\x50\x69\x10\x61\xec\x21\x59\x87\x4a\x9a\x8a\x97\x9f\x2f\xe9\x1b\xfd\xb9\xa6\xd1\x10\x4f\xe6\xcc\x25\xa4\xd3\x04\x91\x4e\x6e\x3f\x5f\xc6\xe8\xc4\x6d\x57\x13\x9d\x39\xb1\x9f\x16\x63\xec\x13\xf8\x41\x07\x7f\x8d\x5a\x6a\x21\xef\x89\x20\xae\xa3\x66\xf4\xc1\x01\xaf\xa6\xee\xe9\x3b\xe3\xb7\xca\xc0\xdf\xd6\x44\xf1\x67\x84\xc5\xdf\xfe\x52\x16\x66\x40\x07\x9c\xf5\x4f\xdf\x19\xdf\xd5\xb5\x5a\xae\x2c\xd2\x31\xd6\x52\x71\x45\xbf\xaa\x7e\x59\x5b\xfc\xef\x9b\xc7\x54\x56\xac\x16\xde\xe7\x25\x79\x9e\x3e\x2c\x9c\xdb\x7d\x20\xdf\xb6\x47\x3f\xeb\x7e\x35\x95\x47\x04\x45\x9e\xd0\xb3\xac\x5e\x0e\xf6\x61\xf3\x52\xe9\x42\x56\x2f\x68\x59\xe6\x17\x4b\xde\xba\x39\xe1\x1f\xd5\x33\x01\xb1\x92\xd5\x2b\xd3\x5c\x2e\xea\x9a\xfb\x84\x8a\x58\xe0\xec\xc6\x4d\xe9\xe5\x6e\x9c\xab\x2e\xd9\xb9\xcb\x99\xa3\xf4\x22\x60\xe9\xda\xcc\x29\xed\x7a\xca\x1a\xcd\xaf\x01\x66\x67\xc6\xd1\x51\x72\xad\xec\xc9\xb3\x66\x91\x19\x1e\x75\x59\x78\xb5\xd8\x35\x15\x58\x85\x05\xbf\xa8\xc6\xd5\x49\xfe\x26\xe3\x8a\xbe\x59\x71\x97\xbe\x7d\x59\x58\xa3\x15\xbf\x72\x0f\xf4\x9d\x65\x3a\x7e\xbd\x2d\xd3\x91\xce\x65\x3a\xf6\xf7\x15\x2d\x98\x9a\xbd\xa9\x05\x97\x9d\x9c\x51\x50\xeb\x0e\x16\x7a\x78\x08\x2d\x98\xa0\xaa\xf5\xa3\xc7\x05\x1e\x03\x96\xe5\x63\x94\x8f\x09\x29\x8b\x67\x65\x1b\x27\xfb\x96\x49\xec\x45\x86\x28\xa5\x4f\x01\x51\xbd\x2a\xa9\x3d\x2d\x70\x56\x1b\x61\xb1\x6a\x42\xa8\x18\xdf\xa8\x20\xf5\xe3\x86\xe7\x2a\x12\x04\xe3\xb5\xcb\x12\x43\xae\x2d\xe4\x7a\x3e\x6f\xeb\x73\xdd\x8f\x5c\x89\xfd\xa6\xd0\xce\x52\xb3\xab\xca\x7a\x4a\x99\x3c\x5b\xcb\x82\xfd\xdd\x0c\x4e\xa9\x7e\xa9\x93\xd7\xc3\xd6\x95\x08\x22\x51\xf2\x43\xb7\xc5\xa5\xdf\x25\x04\xc3\x51\x38\x82\x03\x53\x2d\x2a\x38\x19\x9b\x26\xbf\x2e\xd6\xbd\x8f\xd3\x9e\x4a\x76\x50\xab\x6d\x69\xf4\x7d\xad\x58\x5d\x34\x65\xdc\x1f\x56\x3b\x90\xf3\xe9\x0f\x79\xf1\xe1\x64\xaf\x65\x15\xac\xbb\xa1\xf7\x3a\xc7\x8d\xf8\x1c\x4e\xf6\xdb\x23\x71\x88\x25\x4b\x59\xc8\x9e\x95\xe1\x76\x7d\xef\xcb\x22\x7a\x1f\xdb\x47\x30\xd1\x65\x61\x8f\x60\xd8\xe3\x1a\xee\x6c\x4e\x60\x59\xc4\xac\xc8\x5e\x99\x45\xd8\x18\x53\x25\x1e\xd1\x9c\xea\x3f\xf3\xe6\x26\x66\xfc\xf9\x0b\xb7\xd1\x0e\xee\x72\xc9\x7e\xa5\xea\xfc\x22\x68\xe1\xb2\x3b\x51\xad\x9a\x8b\x5a\xd5\xf3\xeb\x9f\xe5\x13\xa6\x0f\xd2\x5f\x00\x98\x94\x5c\x5a\x75\x34\x75\xd0\xd2\x03\x25\x30\x22\xe5\xa5\xfe\x40\x75\x67\x66\x51\x50\x67\xb7\x8b\x7a\xcb\x07\x2a\xb3\xc8\x75\x40\xbb\xc9\x2a\xb0\x84\x42\xb5\xae\x63\x6d\x4a\x58\x73\xf5\xca\x4d\x2f\x11\xa2\xce\x95\x75\x2e\x06\x72\xc1\xad\x68\xa8\x4a\x06\x68\xec\xa2\xa2\x96\x90\xe9\xf1\xe3\x9d\xad\xb9\x8b\x90\x1f\x3e\x12\xbc\x78\xc3\x33\xc3\x7e\x6a\xfc\x93\x74\x4a\x2e\xca\xfc\x89\x2f\x11\xb6\x1d\x24\x82\x2f\x8b\xe7\xc1\xd4\x1a\xea\x44\x60\x7a\x2b\xe2\x22\x11\xe6\x2e\x56\x04\xf6\xfa\x68\x53\xd0\x8e\xf0\xb6\xa6\xcd\xf1\x79\x15\x4f\xb0\x34\xca\x79\xae\x11\xdf\xae\x21\xe2\x3e\x6a\x6e\x76\x91\x16\xfa\xda\xa7\xa7\x80\x7b\x6e\x89\xfa\xfc\x06\x30\x87\x8f\x3e\x3b\xb5\xa8\xca\x9d\x6a\xda\x70\xc6\x76\x25\xef\x76\x62\xe1\xe6\x2b\xe5\xd9\x51\x3a\x94\xf1\x29\x55\x74\xd9\x5a\x0f\x86\xb2\x08\xe7\x7d\xc7\x2a\xf1\x0b\x39\x65\x8d\x44\x45\x8d\x62\xc2\x38\xad\xf9\xad\x56\xe7\x9a\xf8\x9c\xcb\x8b\xc5\x28\xee\xd3\xc5\xe8\x6d\xaa\x3b\x41\x4a\xbe\xdd\xdb\xb0\x72\x0f\x29\xcf\x66\xe6\xb0\x99\x82\x3f\xa9\xcf\x18\xe5\x3e\x07\x81\x52\x33\x63\x1c\x23\x34\x43\x2f\x8e\xe7\xbf\x0a\x7c\x90\xbe\xe5\xf9\x86\xf8\x20\x99\x3d\x2f\x6e\xa5\x6f\xdf\x68\xb7\xb0\x1b\x39\xf1\x81\xfc\xa2\x92\xe6\x4f\x14\x88\xa7\x6c\x1d\xd4\xef\xc4\x9d\x1c\x9f\x63\xd4\x59\x69\x55\xbd\x40\x3d\xa5\x9c\x45\x38\xa9\x0a\x7e\x10\x07\x37\x0a\x6d\x9b\x06\x7d\x00\x65\x62\x94\x4d\xef\x24\xd9\xbb\xcb\x77\xe2\x01\x63\x8c\x93\xf2\x20\x92\x62\x10\xf9\x8d\xb5\x75\xe1\x5d\xf9\xbf\x01\x00\x00\xff\xff\x18\xa0\xa8\x88\x82\x31\x00\x00")

func _dataEnYmlBytes() ([]byte, error) {
	return bindataRead(
		__dataEnYml,
		"_data/en.yml",
	)
}

func _dataEnYml() (*asset, error) {
	bytes, err := _dataEnYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "_data/en.yml", size: 12674, mode: os.FileMode(420), modTime: time.Unix(1593691749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"_data/en.yml": _dataEnYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"_data": &bintree{nil, map[string]*bintree{
		"en.yml": &bintree{_dataEnYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

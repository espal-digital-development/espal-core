// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package translationsmock

import (
	"sync"
)

var (
	lockRepositoryMockFormatted       sync.RWMutex
	lockRepositoryMockFormattedPlural sync.RWMutex
	lockRepositoryMockPlural          sync.RWMutex
	lockRepositoryMockSingular        sync.RWMutex
)

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             FormattedFunc: func(languageID uint16, key string) string {
// 	               panic("mock out the Formatted method")
//             },
//             FormattedPluralFunc: func(languageID uint16, key string) string {
// 	               panic("mock out the FormattedPlural method")
//             },
//             PluralFunc: func(languageID uint16, key string) string {
// 	               panic("mock out the Plural method")
//             },
//             SingularFunc: func(languageID uint16, key string) string {
// 	               panic("mock out the Singular method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// FormattedFunc mocks the Formatted method.
	FormattedFunc func(languageID uint16, key string) string

	// FormattedPluralFunc mocks the FormattedPlural method.
	FormattedPluralFunc func(languageID uint16, key string) string

	// PluralFunc mocks the Plural method.
	PluralFunc func(languageID uint16, key string) string

	// SingularFunc mocks the Singular method.
	SingularFunc func(languageID uint16, key string) string

	// calls tracks calls to the methods.
	calls struct {
		// Formatted holds details about calls to the Formatted method.
		Formatted []struct {
			// LanguageID is the languageID argument value.
			LanguageID uint16
			// Key is the key argument value.
			Key string
		}
		// FormattedPlural holds details about calls to the FormattedPlural method.
		FormattedPlural []struct {
			// LanguageID is the languageID argument value.
			LanguageID uint16
			// Key is the key argument value.
			Key string
		}
		// Plural holds details about calls to the Plural method.
		Plural []struct {
			// LanguageID is the languageID argument value.
			LanguageID uint16
			// Key is the key argument value.
			Key string
		}
		// Singular holds details about calls to the Singular method.
		Singular []struct {
			// LanguageID is the languageID argument value.
			LanguageID uint16
			// Key is the key argument value.
			Key string
		}
	}
}

// Formatted calls FormattedFunc.
func (mock *RepositoryMock) Formatted(languageID uint16, key string) string {
	if mock.FormattedFunc == nil {
		panic("RepositoryMock.FormattedFunc: method is nil but Repository.Formatted was just called")
	}
	callInfo := struct {
		LanguageID uint16
		Key        string
	}{
		LanguageID: languageID,
		Key:        key,
	}
	lockRepositoryMockFormatted.Lock()
	mock.calls.Formatted = append(mock.calls.Formatted, callInfo)
	lockRepositoryMockFormatted.Unlock()
	return mock.FormattedFunc(languageID, key)
}

// FormattedCalls gets all the calls that were made to Formatted.
// Check the length with:
//     len(mockedRepository.FormattedCalls())
func (mock *RepositoryMock) FormattedCalls() []struct {
	LanguageID uint16
	Key        string
} {
	var calls []struct {
		LanguageID uint16
		Key        string
	}
	lockRepositoryMockFormatted.RLock()
	calls = mock.calls.Formatted
	lockRepositoryMockFormatted.RUnlock()
	return calls
}

// FormattedPlural calls FormattedPluralFunc.
func (mock *RepositoryMock) FormattedPlural(languageID uint16, key string) string {
	if mock.FormattedPluralFunc == nil {
		panic("RepositoryMock.FormattedPluralFunc: method is nil but Repository.FormattedPlural was just called")
	}
	callInfo := struct {
		LanguageID uint16
		Key        string
	}{
		LanguageID: languageID,
		Key:        key,
	}
	lockRepositoryMockFormattedPlural.Lock()
	mock.calls.FormattedPlural = append(mock.calls.FormattedPlural, callInfo)
	lockRepositoryMockFormattedPlural.Unlock()
	return mock.FormattedPluralFunc(languageID, key)
}

// FormattedPluralCalls gets all the calls that were made to FormattedPlural.
// Check the length with:
//     len(mockedRepository.FormattedPluralCalls())
func (mock *RepositoryMock) FormattedPluralCalls() []struct {
	LanguageID uint16
	Key        string
} {
	var calls []struct {
		LanguageID uint16
		Key        string
	}
	lockRepositoryMockFormattedPlural.RLock()
	calls = mock.calls.FormattedPlural
	lockRepositoryMockFormattedPlural.RUnlock()
	return calls
}

// Plural calls PluralFunc.
func (mock *RepositoryMock) Plural(languageID uint16, key string) string {
	if mock.PluralFunc == nil {
		panic("RepositoryMock.PluralFunc: method is nil but Repository.Plural was just called")
	}
	callInfo := struct {
		LanguageID uint16
		Key        string
	}{
		LanguageID: languageID,
		Key:        key,
	}
	lockRepositoryMockPlural.Lock()
	mock.calls.Plural = append(mock.calls.Plural, callInfo)
	lockRepositoryMockPlural.Unlock()
	return mock.PluralFunc(languageID, key)
}

// PluralCalls gets all the calls that were made to Plural.
// Check the length with:
//     len(mockedRepository.PluralCalls())
func (mock *RepositoryMock) PluralCalls() []struct {
	LanguageID uint16
	Key        string
} {
	var calls []struct {
		LanguageID uint16
		Key        string
	}
	lockRepositoryMockPlural.RLock()
	calls = mock.calls.Plural
	lockRepositoryMockPlural.RUnlock()
	return calls
}

// Singular calls SingularFunc.
func (mock *RepositoryMock) Singular(languageID uint16, key string) string {
	if mock.SingularFunc == nil {
		panic("RepositoryMock.SingularFunc: method is nil but Repository.Singular was just called")
	}
	callInfo := struct {
		LanguageID uint16
		Key        string
	}{
		LanguageID: languageID,
		Key:        key,
	}
	lockRepositoryMockSingular.Lock()
	mock.calls.Singular = append(mock.calls.Singular, callInfo)
	lockRepositoryMockSingular.Unlock()
	return mock.SingularFunc(languageID, key)
}

// SingularCalls gets all the calls that were made to Singular.
// Check the length with:
//     len(mockedRepository.SingularCalls())
func (mock *RepositoryMock) SingularCalls() []struct {
	LanguageID uint16
	Key        string
} {
	var calls []struct {
		LanguageID uint16
		Key        string
	}
	lockRepositoryMockSingular.RLock()
	calls = mock.calls.Singular
	lockRepositoryMockSingular.RUnlock()
	return calls
}
